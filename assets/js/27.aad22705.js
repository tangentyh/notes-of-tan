(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{238:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"Redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),s("h2",{attrs:{id:"Introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("ol",[s("li",[t._v("docs\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://redis.io/documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis official"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/redis/redis",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis GitHub"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.redislabs.com/latest/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis Labs Documentation | Redis Labs Documentation Center"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://redisdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 命令参考 — Redis 命令参考"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("books\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://redislabs.com/ebooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("e-Books - Redis"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://redisbook.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 设计与实现 — Redis 设计与实现"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://redisinaction.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis实战 — Redis 实战"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://redisguide.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis使用手册"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://learnredis.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Redis入门与实战》 — LearnRedis.com 1.0 文档"),s("OutboundLink")],1)])])])])])]),t._v(" "),s("h2",{attrs:{id:"Data-Types-And-Data-Structures"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Data-Types-And-Data-Structures"}},[t._v("#")]),t._v(" Data Types And Data Structures")]),t._v(" "),s("h3",{attrs:{id:"Data-Structures"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Data-Structures"}},[t._v("#")]),t._v(" Data Structures")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("string")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("c_str")]),t._v(" — used in string literal, like when "),s("code",[t._v("redisLog")])]),t._v(" "),s("li",[t._v("simple dynamic string，SDS — used as keys, values, and buffers"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录 buf 数组中已使用字节的数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等于 SDS 所保存字符串的长度")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录 buf 数组中未使用字节的数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" free"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c_str, '\\0' ended, which is not counted in len")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("capacity grow policy — if "),s("code",[t._v("len")]),t._v(" < 1 MB, "),s("code",[t._v("free")]),t._v(" = "),s("code",[t._v("len")]),t._v("; else, "),s("code",[t._v("free")]),t._v(" = 1 MB")]),t._v(" "),s("li",[t._v("lazy reclaim of "),s("code",[t._v("free")]),t._v(" — reclaim on demand")]),t._v(" "),s("li",[t._v("binary-safe — "),s("code",[t._v("len")]),t._v(" as end, instead of "),s("code",[t._v("'\\0'")]),t._v(" as end\n"),s("ul",[s("li",[s("code",[t._v("'\\0'")]),t._v(" as end — for C API reuse, partially supported")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("dictionary, hash table — used in "),s("code",[t._v("REDIS_HASH")]),t._v(" and database implementation, and more")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型特定函数")]),t._v("\n    dictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要传给那些类型特定函数的可选参数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表")]),t._v("\n    dictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash 索引")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rehashing not in progress if rehashidx == -1 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("dictType")]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictType")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算哈希值的函数, MurmurHash algorithm for v3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hashFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制键的函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("keyDup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制值的函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("valDup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对比键的函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("keyCompare"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁键的函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("keyDestructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁值的函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("valDestructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("code",[t._v("dictht")]),t._v(" — dictionary hash table"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表数组")]),t._v("\n    dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size of table, defaults to 4")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小掩码，用于计算索引值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总是等于 size - 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该哈希表已有节点的数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("dictEntry")]),t._v(" — key-value pair"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向下个哈希表节点，形成链表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("hash value — "),s("code",[t._v("hashFunction(key) & sizemask")])]),t._v(" "),s("li",[t._v("hash collision — separate chaining with "),s("code",[t._v("*next")]),t._v(", 程序总是将新节点添加到链表的表头位置")])])]),t._v(" "),s("li",[t._v("rehash\n"),s("ul",[s("li",[t._v("expand — when not executing "),s("code",[t._v("BGSAVE")]),t._v(" or "),s("code",[t._v("BGREWRITEAOF")]),t._v(" and load factor >= 1, or when executing either one and load factor >= 5; expand to the size of the first 2^n that >= "),s("code",[t._v("ht[0].used * 2")])]),t._v(" "),s("li",[t._v("shrink — when load factor < 0.1; shrink to the size of the first 2^n that >= "),s("code",[t._v("ht[0].used")])]),t._v(" "),s("li",[t._v("progressive rehash — set "),s("code",[t._v("rehashidx")]),t._v(" to 0, and increment by 1 for every CRUD operation, reset to -1 when completed and swap "),s("code",[t._v("ht[0]")]),t._v(" and "),s("code",[t._v("ht[1]")])])])])])]),t._v(" "),s("li",[s("p",[t._v("skiplist — used in "),s("code",[t._v("REDIS_ZSET")]),t._v(" and cluster")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表头节点和表尾节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表中节点的数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表中层数最大的节点的层数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zskiplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("zskiplistNode")]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后退指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员对象")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 层")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistLevel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前进指针")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跨度")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" span"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zskiplistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("level — height generated between 1 to 32 according to power law")]),t._v(" "),s("li",[t._v("score — for sort, ascending, sort by "),s("code",[t._v("obj")]),t._v(" when equality")])])])])]),t._v(" "),s("li",[s("p",[t._v("int set — encoding-adapting ordered distinct array, used in "),s("code",[t._v("REDIS_SET")]),t._v(" if the cardinality is low")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码方式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 集合包含的元素数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存元素的数组, ordered")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("add element — O(N)\n"),s("ul",[s("li",[t._v("space saving — "),s("code",[t._v("contents")]),t._v(" is of the smallest encoding possible, upgrade and reallocate if necessary")]),t._v(" "),s("li",[t._v("upgrade — if one encoding not enough, upgrade encoding of "),s("code",[t._v("contents")]),t._v(" from "),s("code",[t._v("INTSET_ENC_INT16")]),t._v(" to "),s("code",[t._v("INTSET_ENC_INT32")]),t._v(" to "),s("code",[t._v("INTSET_ENC_INT64")]),t._v(", new element added at head or tail")])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SADD")])])])])])]),t._v(" "),s("li",[s("p",[t._v("list — linked list, used in "),s("code",[t._v("REDIS_LIST")]),t._v(" and various places")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" listNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值复制函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值释放函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("free"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点值对比函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("LLEN key")])]),t._v(" "),s("li",[s("code",[t._v("LRANGE key start stop")])])])])])]),t._v(" "),s("li",[s("p",[t._v("ziplist — a sequential data structure that is continuous on memory, used in "),s("code",[t._v("REDIS_LIST")]),t._v(" and "),s("code",[t._v("REDIS_HASH")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("zlbytes zltail zllen [entries] zlend\n 4b       4b    2b              0xFF\n")])])]),s("ul",[s("li",[s("code",[t._v("zlbytes")]),t._v(" — total size")]),t._v(" "),s("li",[s("code",[t._v("zltail")]),t._v(" — offset between the start of the ziplist and the start of the last entry")]),t._v(" "),s("li",[s("code",[t._v("zllen")]),t._v(" — total entry count, can only hold within "),s("code",[t._v("UINT16_MAX")])]),t._v(" "),s("li",[s("code",[t._v("zlend")]),t._v(" — end mark")]),t._v(" "),s("li",[t._v("entry — a byte array or a number"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("previous_entry_length encoding content\n")])])]),s("ul",[s("li",[s("code",[t._v("previous_entry_length")]),t._v(" — 1 byte when < "),s("code",[t._v("0xFE")]),t._v(" otherwise 5 byte starting with "),s("code",[t._v("0xFE")]),t._v(", for iterating")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" — type and length of "),s("code",[t._v("content")])]),t._v(" "),s("li",[t._v("operations like push an entry — O(N), the possibility of long cascade update is low, which needs consecutive entries of length between 250 to 253b\n"),s("ul",[s("li",[t._v("cascade update — "),s("code",[t._v("previous_entry_length")]),t._v(" of an entry updates from 1b to 5b, triggering the "),s("code",[t._v("previous_entry_length")]),t._v(" update of the next entry, O(N^2) in the worst case")])])])])])])])]),t._v(" "),s("h3",{attrs:{id:"Data-Types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Data-Types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("object — wrapper for data structures, with timestamp, with reference count for object sharing and GC")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向底层实现数据结构的指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用计数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" robj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("type")]),t._v(" — "),s("code",[t._v("REDIS_STRING")]),t._v(", "),s("code",[t._v("REDIS_LIST")]),t._v(", "),s("code",[t._v("REDIS_HASH")]),t._v(", "),s("code",[t._v("REDIS_SET")]),t._v(", "),s("code",[t._v("REDIS_ZSET")]),t._v(", keys are always string")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" — "),s("code",[t._v("REDIS_ENCODING_INT")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_EMBSTR")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_RAW")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_HT")]),t._v(" (hash table), "),s("code",[t._v("REDIS_ENCODING_LINKEDLIST")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_ZIPLIST")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_INTSET")]),t._v(", "),s("code",[t._v("REDIS_ENCODING_SKIPLIST")])]),t._v(" "),s("li",[t._v("polymorphism — the same command works for different types and/or encodings")]),t._v(" "),s("li",[t._v("GC — reference counting")]),t._v(" "),s("li",[s("code",[t._v("lru")]),t._v(" — last accessed timestamp, used when "),s("code",[t._v("maxmemory")]),t._v(" with "),s("code",[t._v("volatile-lru")]),t._v(" or "),s("code",[t._v("allkeys-lru")])]),t._v(" "),s("li",[t._v("flyweight — for integers from 0 to 9999")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("OBJECT")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("OBJECT ENCODING")])]),t._v(" "),s("li",[s("code",[t._v("OBJECT REFCOUNT")])]),t._v(" "),s("li",[s("code",[t._v("OBJECT IDLETIME")])])])]),t._v(" "),s("li",[s("code",[t._v("TYPE")])]),t._v(" "),s("li",[t._v("see "),s("code",[t._v("redisDb")])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("REDIS_STRING")])]),t._v(" "),s("ul",[s("li",[t._v("corresponding "),s("code",[t._v("encoding")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REDIS_ENCODING_INT")]),t._v(" — "),s("code",[t._v("long")]),t._v(", for numbers within range")]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_EMBSTR")]),t._v(" — 使用 embstr 编码的 SDS, used when stirng length <= 39 bytes and when "),s("code",[t._v("long double")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("embstr")]),t._v(" — like raw SDS, but allocate one space for both "),s("code",[t._v("redisObject")]),t._v(" and "),s("code",[t._v("sdshdr")]),t._v(", read only, and more")])])]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_RAW")]),t._v(" — SDS, used when string length > 39 bytes")])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SET")]),t._v(", "),s("code",[t._v("GET")])]),t._v(" "),s("li",[s("code",[t._v("MSET")])]),t._v(" "),s("li",[s("code",[t._v("APPEND")])]),t._v(" "),s("li",[s("code",[t._v("INCRBYFLOAT")])]),t._v(" "),s("li",[s("code",[t._v("INCRBY")]),t._v(", "),s("code",[t._v("DECRBY")])]),t._v(" "),s("li",[s("code",[t._v("STRLEN")])]),t._v(" "),s("li",[s("code",[t._v("SETRANGE")]),t._v(", "),s("code",[t._v("GETRANGE")])]),t._v(" "),s("li",[s("code",[t._v("SETEX")])])])])])]),t._v(" "),s("li",[s("p",[t._v("bit array")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("redisObject.type")]),t._v(" — "),s("code",[t._v("REDIS_STRING")]),t._v(", like "),s("code",[t._v("java.util.BitSet")]),t._v(", but one byte ("),s("code",[t._v("char")]),t._v(") each word")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SETBIT")])]),t._v(" "),s("li",[s("code",[t._v("GETBIT")])]),t._v(" "),s("li",[s("code",[t._v("BITCOUNT")])]),t._v(" "),s("li",[s("code",[t._v("BITOP")])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("REDIS_LIST")])]),t._v(" "),s("ul",[s("li",[t._v("corresponding "),s("code",[t._v("encoding")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REDIS_ENCODING_ZIPLIST")]),t._v(" — when each element size < 64 bytes and list size < 512, "),s("code",[t._v("list-max-ziplist-value")]),t._v(" and "),s("code",[t._v("list-max-ziplist-entries")]),t._v(" in configurations")]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_LINKEDLIST")])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("LPUSH")]),t._v(", "),s("code",[t._v("RPUSH")])]),t._v(" "),s("li",[s("code",[t._v("LPOP")]),t._v(", "),s("code",[t._v("RPOP")])]),t._v(" "),s("li",[s("code",[t._v("LINDEX")])]),t._v(" "),s("li",[s("code",[t._v("LLEN")])]),t._v(" "),s("li",[s("code",[t._v("LINSERT")])]),t._v(" "),s("li",[s("code",[t._v("LREM")])]),t._v(" "),s("li",[s("code",[t._v("LTRIM")])]),t._v(" "),s("li",[s("code",[t._v("LSET")])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("REDIS_HASH")])]),t._v(" "),s("ul",[s("li",[t._v("corresponding "),s("code",[t._v("encoding")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REDIS_ENCODING_ZIPLIST")]),t._v(" — when all keys and values < 64 bytes, and list size < 512, "),s("code",[t._v("hash-max-ziplist-value")]),t._v(" and "),s("code",[t._v("hash-max-ziplist-entries")]),t._v(" in configurations")]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_HT")])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("HSET")]),t._v(", "),s("code",[t._v("HGET")])]),t._v(" "),s("li",[s("code",[t._v("HEXISTS")])]),t._v(" "),s("li",[s("code",[t._v("HDEL")])]),t._v(" "),s("li",[s("code",[t._v("HLEN")])]),t._v(" "),s("li",[s("code",[t._v("HGETALL")])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("REDIS_SET")])]),t._v(" "),s("ul",[s("li",[t._v("corresponding "),s("code",[t._v("encoding")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REDIS_ENCODING_INTSET")]),t._v(" — when only integer elements and cardinality < 512, "),s("code",[t._v("set-max-intset-entrie")]),t._v(" in configurations")]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_HT")]),t._v(" — "),s("code",[t._v("null")]),t._v(" as value")])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SADD")])]),t._v(" "),s("li",[s("code",[t._v("SCARD")])]),t._v(" "),s("li",[s("code",[t._v("SISMEMBER")])]),t._v(" "),s("li",[s("code",[t._v("SMEMBERS")])]),t._v(" "),s("li",[s("code",[t._v("SRANDMEMBER")])]),t._v(" "),s("li",[s("code",[t._v("SPOP")])]),t._v(" "),s("li",[s("code",[t._v("SREM")])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("REDIS_ZSET")]),t._v(" — ordered set")]),t._v(" "),s("ul",[s("li",[t._v("corresponding "),s("code",[t._v("encoding")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REDIS_ENCODING_ZIPLIST")]),t._v(" — when cardinality < 128 and all elements < 64 bytes, "),s("code",[t._v("zset-max-ziplist-entries")]),t._v(" and "),s("code",[t._v("zset-max-ziplist-value")]),t._v(" in configurations")]),t._v(" "),s("li",[s("code",[t._v("REDIS_ENCODING_SKIPLIST")]),t._v(" — use "),s("code",[t._v("zset")]),t._v(": like "),s("code",[t._v("java.util.LinkedHashMap")]),t._v(" but with skiplist in lieu of linked list"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    zskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("ZCARD")])]),t._v(" "),s("li",[s("code",[t._v("ZADD")])]),t._v(" "),s("li",[s("code",[t._v("ZRANGE")]),t._v(", "),s("code",[t._v("ZREVRANGE")])]),t._v(" "),s("li",[s("code",[t._v("ZSCORE")])]),t._v(" "),s("li",[s("code",[t._v("ZCOUNT")])]),t._v(" "),s("li",[s("code",[t._v("ZRANK")]),t._v(", "),s("code",[t._v("ZREVRANK")])]),t._v(" "),s("li",[s("code",[t._v("ZREM")])])])])])])]),t._v(" "),s("h3",{attrs:{id:"Sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Sort"}},[t._v("#")]),t._v(" Sort")]),t._v(" "),s("ol",[s("li",[t._v("sort"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_redisSortObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmpobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for BY ALPHA")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" redisSortObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("steps\n"),s("ol",[s("li",[t._v("create an array of "),s("code",[t._v("redisSortObject")])]),t._v(" "),s("li",[t._v("populate "),s("code",[t._v("redisSortObject->obj")])]),t._v(" "),s("li",[t._v("populate scores, skipped when "),s("code",[t._v("ALPHA")]),t._v(", according to the pattern when "),s("code",[t._v("BY")]),t._v(";otherwise populate "),s("code",[t._v("cmpobj")]),t._v(" if "),s("code",[t._v("BY")]),t._v(" with "),s("code",[t._v("ALPHA")])]),t._v(" "),s("li",[t._v("sort, by quicksort")]),t._v(" "),s("li",[t._v("return to the client")])])]),t._v(" "),s("li",[t._v("compare by"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('reids> SADD fruits "apple" "banana" "cherry"\nredis> MSET apple-price 8 banana-price 5.5 cherry-price 7\nredis> SORT fruits BY *-price\n')])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SORT")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]\n")])])]),s("ul",[s("li",[s("code",[t._v("ALPHA")]),t._v(" — lexicographically")]),t._v(" "),s("li",[s("code",[t._v("ASC")]),t._v(", "),s("code",[t._v("DESC")])]),t._v(" "),s("li",[s("code",[t._v("BY")])]),t._v(" "),s("li",[s("code",[t._v("LIMIT")])]),t._v(" "),s("li",[s("code",[t._v("GET")]),t._v(" — get pattern")]),t._v(" "),s("li",[s("code",[t._v("STORE")])])])])])])])])]),t._v(" "),s("h2",{attrs:{id:"Server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Server"}},[t._v("#")]),t._v(" Server")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("server")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisServer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  redisDb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// db array")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dbnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Total number of configured DBs */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// part of stats")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" stat_keyspace_hits"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of successful lookups of keys */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" stat_keyspace_misses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of failed lookups of keys */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* RDB persistence */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Changes to DB from the last save */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" dirty_before_bgsave"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Used to restore dirty on failed BGSAVE */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Networking */")]),t._v("\n  list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* List of active clients */")]),t._v("\n  list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_to_close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clients to close asynchronously */")]),t._v("\n  list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_pending_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* There is to write or install handler. */")]),t._v("\n  list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client has pending read socket buffers. */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Scripting */")]),t._v("\n  lua_State "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lua"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The Lua interpreter. We use just one for all clients */")]),t._v("\n  client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lua_client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* The "fake client" to query Redis from Lua */')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("dbnum")]),t._v(" — defaults to 16, "),s("code",[t._v("database")]),t._v(" in configurations")]),t._v(" "),s("li",[t._v("maintainence when reading or writing a keyspace\n"),s("ul",[s("li",[t._v("maintain statistics, like "),s("code",[t._v("stat_keyspace_hits")]),t._v(", "),s("code",[t._v("stat_keyspace_misses")])]),t._v(" "),s("li",[t._v("update "),s("code",[t._v("redisObject.lru")])]),t._v(" "),s("li",[t._v("delete a key if expired")]),t._v(" "),s("li",[t._v("mark "),s("code",[t._v("WATCH")]),t._v("ed keys dirty")]),t._v(" "),s("li",[t._v("increment "),s("code",[t._v("dirty")]),t._v(" counters")]),t._v(" "),s("li",[t._v("dispatch notifications")])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("INFO")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("SERVER")])]),t._v(" "),s("li",[s("code",[t._v("STATS")])])])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("redisDb")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Redis database representation. There are multiple databases identified\n * by integers from 0 (the default database) up to the max configured\n * database. The database number is the 'id' field in the structure. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisDb")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The keyspace for this DB */")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Timeout of keys with a timeout set */")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("blocking_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Keys with clients waiting for data (BLPOP)*/")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ready_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Blocked keys that received a PUSH */")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("watched_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* WATCHED keys for MULTI/EXEC CAS */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Database ID */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" avg_ttl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Average TTL, just for stats */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" expires_cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Cursor of the active expire cycle. */")]),t._v("\n    list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("defrag_later"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* List of key names to attempt to defrag one by one, gradually. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" redisDb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("expires")]),t._v(" — a dict where keys are pointers to keys in keyspace, values are "),s("code",[t._v("long long")]),t._v(" UNIX timestamps\n"),s("ul",[s("li",[t._v("expungement strategy\n"),s("ul",[s("li",[t._v("lazy — expunge when reading the key")]),t._v(" "),s("li",[t._v("periodic — expunge with a frequency and duration; continue from the last expunged "),s("code",[t._v("redisDb")]),t._v(", cycling the db array; examine and expunge keys randomly selected from "),s("code",[t._v("expires")]),t._v(" for each "),s("code",[t._v("redisDb")])])])]),t._v(" "),s("li",[t._v("related commands — "),s("code",[t._v("PEXPIREAT")]),t._v(" under the hood\n"),s("ul",[s("li",[s("code",[t._v("EXPIRE")]),t._v(", "),s("code",[t._v("PEXPIRE")]),t._v(", "),s("code",[t._v("SETEX")]),t._v(" (only for string) — TTL, in s or ms")]),t._v(" "),s("li",[s("code",[t._v("EXPIREAT")]),t._v(", "),s("code",[t._v("PEXPIREAT")]),t._v(" — UNIX timestamp, in s or ms")]),t._v(" "),s("li",[s("code",[t._v("TTL")]),t._v(", "),s("code",[t._v("PTTL")]),t._v(" — remaining time to live, in s or ms")]),t._v(" "),s("li",[s("code",[t._v("PERSIST")]),t._v(" — remove timestamp")])])]),t._v(" "),s("li",[t._v("replication related — key expungement of followers is controlled by the master, who sends "),s("code",[t._v("DEL")]),t._v(" commands to followers")]),t._v(" "),s("li",[t._v("persistence related\n"),s("ul",[s("li",[t._v("RDB\n"),s("ul",[s("li",[t._v("when "),s("code",[t._v("SAVE")]),t._v(" or "),s("code",[t._v("BGSAVE")]),t._v(" — expired keys filtered")]),t._v(" "),s("li",[t._v("when loading data — master will filter expired keys, followers will not (cleared when syncing with master)")])])]),t._v(" "),s("li",[t._v("AOF\n"),s("ul",[s("li",[t._v("when writing to AOF — when expunged, a "),s("code",[t._v("DEL")]),t._v(" is explicitly appended")]),t._v(" "),s("li",[t._v("when rewriting AOF — expired keys filtered")])])])])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("FLUSHDB")])]),t._v(" "),s("li",[s("code",[t._v("RANDOMKEY")])]),t._v(" "),s("li",[s("code",[t._v("DBSIZE")])]),t._v(" "),s("li",[s("code",[t._v("EXISTS")])]),t._v(" "),s("li",[s("code",[t._v("DEL")])]),t._v(" "),s("li",[s("code",[t._v("RENAME")])]),t._v(" "),s("li",[s("code",[t._v("KEYS")])]),t._v(" "),s("li",[s("code",[t._v("INFO")]),t._v(", "),s("code",[t._v("INFO STATS")])])])])])]),t._v(" "),s("li",[s("p",[t._v("client")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("client")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// once called redisClient")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client incremental unique ID. */")]),t._v("\n  connection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fd, connection type, state, flags, callbacks")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  redisDb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Pointer to currently SELECTed DB. */")]),t._v("\n  robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* As set by CLIENT SETNAME. */")]),t._v("\n  sds querybuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Buffer we use to accumulate client queries. */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client flags: CLIENT_* macros. */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("query buffer or reply buffer overflow — the client will be closed\n"),s("ul",[s("li",[t._v("hard limit — close immediately")]),t._v(" "),s("li",[t._v("soft limit — close after the time since "),s("code",[t._v("time_t obuf_soft_limit_reached_time")]),t._v(" beyond configured, "),s("code",[t._v("client-output-buffer-limit")]),t._v(" in configurations")])])]),t._v(" "),s("li",[s("code",[t._v("querybuf")]),t._v(" related fields"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("size_t qb_pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The position we have read in querybuf. */")]),t._v("\nsds pending_querybuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* If this client is flagged as master, this buffer\n                           represents the yet not applied portion of the\n                           replication stream that we are receiving from\n                           the master. */")]),t._v("\nsize_t querybuf_peak"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Recent (100ms or more) peak of querybuf size. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Num of arguments of current command. */")]),t._v("\nrobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Arguments of current command. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisCommand")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lastcmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Last command executed. */")]),t._v("\n")])])])]),t._v(" "),s("li",[s("code",[t._v("flags")]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client flags */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_SLAVE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This client is a repliaca */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_MASTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This client is a master */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_MONITOR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This client is a slave monitor, see MONITOR */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_MULTI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This client is in a MULTI context */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_BLOCKED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The client is waiting in a blocking operation */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_DIRTY_CAS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Watched keys modified. EXEC will fail. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_CLOSE_AFTER_REPLY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Close after writing entire reply. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_UNBLOCKED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This client was unblocked and is stored in\n                                  server.unblocked_clients */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_LUA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This is a non connected client used by Lua */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_ASKING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client issued the ASKING command */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_CLOSE_ASAP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Close this client ASAP */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CLIENT_UNIX_SOCKET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Client connected via Unix domain socket */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("more")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SELECT")])]),t._v(" "),s("li",[s("code",[t._v("CLIENT")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("LIST")])]),t._v(" "),s("li",[s("code",[t._v("SETNAME")])]),t._v(" "),s("li",[s("code",[t._v("KILL")])])])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("redisCommand")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisCommand")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    redisCommandProc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("proc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sflags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Flags as string representation, one char per flag. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The actual flags, obtained from the 'sflags' field. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" microseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// statistics")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("name")]),t._v(" — "),s("code",[t._v("client->argv[0]")])]),t._v(" "),s("li",[s("code",[t._v("proc")]),t._v(" — callback, called as "),s("code",[t._v("client->cmd->proc(client)")])]),t._v(" "),s("li",[s("code",[t._v("sflags")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("w")]),t._v(" — write, like "),s("code",[t._v("SET")]),t._v(", "),s("code",[t._v("RPUSH")]),t._v(", "),s("code",[t._v("DEL")])]),t._v(" "),s("li",[s("code",[t._v("r")]),t._v(" — read, like "),s("code",[t._v("GET")]),t._v(", "),s("code",[t._v("STRLEN")]),t._v(", "),s("code",[t._v("EXISTS")])]),t._v(" "),s("li",[s("code",[t._v("m")]),t._v(" — 这个命令可能会占用大量内存，执行之前需要先检查服务器的内存使用情况，如果内存紧缺的话就禁止执行这个命令。 like "),s("code",[t._v("SET")]),t._v(", "),s("code",[t._v("APPEND")]),t._v(", "),s("code",[t._v("RPUSH")]),t._v(", "),s("code",[t._v("LPUSH")]),t._v(", "),s("code",[t._v("SADD")]),t._v(", "),s("code",[t._v("SINTERSTORE")])]),t._v(" "),s("li",[t._v("more")])])])])])]),t._v(" "),s("h2",{attrs:{id:"Events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("event loop")]),t._v(" "),s("ul",[s("li",[t._v("file events — sockets")]),t._v(" "),s("li",[t._v("time events — "),s("code",[t._v("serverCron")])]),t._v(" "),s("li",[t._v("flush AOF buffer")])])]),t._v(" "),s("li",[s("p",[t._v("file events — Reactor model, I/O multiplexing, event queuing at event dispatcher")]),t._v(" "),s("ul",[s("li",[t._v("event handlers\n"),s("ul",[s("li",[s("code",[t._v("acceptTcpHandler")])]),t._v(" "),s("li",[s("code",[t._v("readQueryFromClient")])]),t._v(" "),s("li",[s("code",[t._v("sendReplyToClient")])]),t._v(" "),s("li",[t._v("more")])])]),t._v(" "),s("li",[t._v("tbd")])])]),t._v(" "),s("li",[s("p",[t._v("time events — tbd")]),t._v(" "),s("ul",[s("li",[t._v("one time scheduled events")]),t._v(" "),s("li",[t._v("periodic events\n"),s("ul",[s("li",[s("code",[t._v("serverCron")]),t._v(" — "),s("code",[t._v("hz")]),t._v(" in configurations, defaults to 10, update statistics, expunge expired keys, close and clear sessions, AOF and RDB, follower replication, cluster synchronization and heartbeat")])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("serverCron")])]),t._v(" "),s("ul",[s("li",[t._v("update tasks\n"),s("ul",[s("li",[t._v("update timestamp cache — timestamp cached in "),s("code",[t._v("redisServer.unixtime")]),t._v(" and "),s("code",[t._v("redisServer.mstime")]),t._v(" to reduce system calls for timestamp insensitive tasks like logging, deciding persistence time point, "),s("code",[t._v("EXPIRE")]),t._v(" and slow query log not included")]),t._v(" "),s("li",[t._v("update "),s("code",[t._v("redisServer.lruclock")]),t._v(" timestamp cache, defaults to once every 10s")]),t._v(" "),s("li",[t._v("update stats")])])]),t._v(" "),s("li",[t._v("more tasks")])])])]),t._v(" "),s("h2",{attrs:{id:"Publish-and-Subscribe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Publish-and-Subscribe"}},[t._v("#")]),t._v(" Publish and Subscribe")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("publish and subscribe")]),t._v(" "),s("ul",[s("li",[t._v("channels"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisServer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pubsub_channels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* channels a client is interested in (SUBSCRIBE) */")]),t._v("\n  list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pubsub_patterns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* patterns a client is interested in (SUBSCRIBE) */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("pubsub_channels")]),t._v(" — "),s("code",[t._v("dict")]),t._v(", key as channel name, value as a linked list of subscribed clients")]),t._v(" "),s("li",[s("code",[t._v("pubsub_patterns")]),t._v(" — "),s("code",[t._v("list")]),t._v(", "),s("code",[t._v("pubsubPattern")]),t._v(" as elements"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pubsubPattern")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" pubsubPattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SUBSCRIBE")])]),t._v(" "),s("li",[s("code",[t._v("PUBLISH")])]),t._v(" "),s("li",[s("code",[t._v("PSUBSCRIBE")]),t._v(" — subscribe but support glob-style patterns")]),t._v(" "),s("li",[s("code",[t._v("PUBSUB")])]),t._v(" "),s("li",[s("code",[t._v("PUNSUBSCRIBE")])]),t._v(" "),s("li",[s("code",[t._v("UNSUBSCRIBE")])])])])])]),t._v(" "),s("li",[s("p",[t._v("keyspace changes notification")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyKeyspaceEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dbid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("keyspace event — every key event in a keyspace, "),s("code",[t._v("notify-keyspace-events")]),t._v(" in configurations\n"),s("ul",[s("li",[t._v("key event — commands on keys")])])]),t._v(" "),s("li",[t._v("channel name — prefixed with "),s("code",[t._v("__keyspace@<db>__")]),t._v(", like "),s("code",[t._v("__keyspace@0__:foo")])]),t._v(" "),s("li",[t._v("parameters\n"),s("ul",[s("li",[s("code",[t._v("event")]),t._v(" — command name, like "),s("code",[t._v("del")])]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(", "),s("code",[t._v("dbid")]),t._v(" — related key and db")]),t._v(" "),s("li",[s("code",[t._v("type")]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Keyspace changes notification classes. Every class is associated with a\n * character for configuration purposes. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_KEYSPACE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* K */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_KEYEVENT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* E */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_GENERIC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* g */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_STRING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* $ */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_LIST")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* l */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* s */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_HASH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* h */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_ZSET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* z */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_EXPIRED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* x */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_EVICTED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* e */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_STREAM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* t */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_KEY_MISS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* m (Note: This one is excluded from NOTIFY_ALL on purpose) */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_LOADED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* module only key space notification, indicate a key loaded from rdb */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOTIFY_ALL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOTIFY_GENERIC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_STRING "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_LIST "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_SET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_HASH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_ZSET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_EXPIRED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_EVICTED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" NOTIFY_STREAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* A flag */")])]),t._v("\n")])])])])])])])])]),t._v(" "),s("h2",{attrs:{id:"Persistence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Persistence"}},[t._v("#")]),t._v(" Persistence")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("RDB — persistence of current snapshot in memory as a compressed binary file")]),t._v(" "),s("ul",[s("li",[t._v("expired key handling — see "),s("code",[t._v("redisDb")])]),t._v(" "),s("li",[t._v("automatic load — if AOF switched off, RDB files are loaded automatically at start")]),t._v(" "),s("li",[t._v("auto "),s("code",[t._v("BGSAVE")]),t._v(" — "),s("code",[t._v("save")]),t._v(" in configurations, triggered if "),s("code",[t._v("redisServer.dirty")]),t._v(" more than configured during corresponding configured time duration, executed by "),s("code",[t._v("serverCron")]),t._v(" function\n"),s("ul",[s("li",[s("code",[t._v("redisServer.dirty")]),t._v(" — counter for changes to keys since last "),s("code",[t._v("SAVE")]),t._v(" or "),s("code",[t._v("BGSAVE")]),t._v(", for example, the counter will +3 after "),s("code",[t._v("SADD")]),t._v(" 3 elements on a key")]),t._v(" "),s("li",[s("code",[t._v("redisServer.lastsave")]),t._v(" — timestamp of last successful "),s("code",[t._v("SAVE")]),t._v(" or "),s("code",[t._v("BGSAVE")])])])]),t._v(" "),s("li",[t._v("RDB file format — tbd")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SAVE")]),t._v(" — blocking")]),t._v(" "),s("li",[s("code",[t._v("BGSAVE")]),t._v(" — non-blocking in a forked process, but reject other "),s("code",[t._v("SAVE")]),t._v(", "),s("code",[t._v("BGSAVE")]),t._v(", "),s("code",[t._v("BGREWRITEAOF")]),t._v(" when executing")])])])])]),t._v(" "),s("li",[s("p",[t._v("AOF — append only file, text file format, recording write commands")]),t._v(" "),s("ul",[s("li",[t._v("steps\n"),s("ul",[s("li",[t._v("append — write to buffer "),s("code",[t._v("redisServer.aof_buf")]),t._v(", whose type is "),s("code",[t._v("sds")])]),t._v(" "),s("li",[t._v("write and sync — at the end of every event loop, "),s("code",[t._v("flushAppendOnlyFile")]),t._v(" executed, which writes to AOF and sync as "),s("code",[t._v("appendfsync")]),t._v(" in configurations")])])]),t._v(" "),s("li",[s("code",[t._v("appendfsync")]),t._v(" in configurations\n"),s("ul",[s("li",[s("code",[t._v("always")]),t._v(" — also depends on "),s("code",[t._v("no-appendfsync-on-rewrite")]),t._v(", which defaults to false")]),t._v(" "),s("li",[s("code",[t._v("everysec")]),t._v(", default — if over 1 sec since last sync; by a dedicated thread")]),t._v(" "),s("li",[s("code",[t._v("no")]),t._v(" — no sync, sync handled by OS")])])]),t._v(" "),s("li",[t._v("AOF loading — fake client created, from which commands in AOF executed")]),t._v(" "),s("li",[t._v("AOF rewrite — deduplicate AOF, implemented by generating commands from current database state with care for client input buffer overflow\n"),s("ul",[s("li",[t._v("avoid blocking — AOF rewrite is executed in a forked process, new commands during AOF rewrite are simultaneously saved in a separate buffer, which is flushed before the new AOF replace the previous one")])])]),t._v(" "),s("li",[t._v("expired key handling — see "),s("code",[t._v("redisDb")])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("BGREWRITEAOF")]),t._v(" — non-blocking, but reject "),s("code",[t._v("BGSAVE")]),t._v(" when executing")])])])])])]),t._v(" "),s("h2",{attrs:{id:"Clustering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Clustering"}},[t._v("#")]),t._v(" Clustering")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("replication")]),t._v(" "),s("ul",[s("li",[t._v("set slave — "),s("code",[t._v("SLAVEOF")]),t._v(" command, or "),s("code",[t._v("slaveof")]),t._v(" in configurations")]),t._v(" "),s("li",[t._v("synchronization\n"),s("ul",[s("li",[s("code",[t._v("SYNC")]),t._v(" — used in old version, slave send "),s("code",[t._v("SYNC")]),t._v(" to master, the master starts recording commands while "),s("code",[t._v("BGSAVE")]),t._v(" for RDB file and send it to the slave, the slave load the file, and the master send commands since "),s("code",[t._v("BGSAVE")]),t._v(" to the slave")]),t._v(" "),s("li",[s("code",[t._v("PSYNC")]),t._v(" — full resynchronization as "),s("code",[t._v("SYNC")]),t._v(" for initial replication, partial resynchronization as recovery")]),t._v(" "),s("li",[t._v("command propagate — propagate commands with side effects after "),s("code",[t._v("SYNC")])]),t._v(" "),s("li",[t._v("heartbeat — slaves will ping master with "),s("code",[t._v("REPLCONF ACK replication_offset")]),t._v(" periodically, defaults to 1 Hz, "),s("code",[t._v("lag")]),t._v(" in the output of "),s("code",[t._v("INFO replication")]),t._v(" "),s("ul",[s("li",[t._v("anti-entropy — reconcile if the "),s("code",[t._v("replication_offset")]),t._v(" received by master does not match its own, e.g. some command propagate message lost")]),t._v(" "),s("li",[t._v("related configurations "),s("code",[t._v("min-slaves-to-write")]),t._v(", "),s("code",[t._v("min-slaves-max-lag")])])])])])]),t._v(" "),s("li",[t._v("partial resynchronization implementation — by replication offset in master and slave, replication backlog in master as buffer, and server ID (run ID)\n"),s("ul",[s("li",[t._v("replication offset — master adds n to its offset upon n bytes propagated, slave adds n to its offset upon n bytes received")]),t._v(" "),s("li",[t._v("replication backlog — fixed size FIFO queue defaults to 1 MB, saving propagated commands; if the command the replication offset in slave points to no longer in the queue, resort to full resynchronization")]),t._v(" "),s("li",[t._v("run ID — slave will persist the ID of the master server, send back to master upon recovering, full resynchronization if not the same master")])])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SLAVEOF")])]),t._v(" "),s("li",[s("code",[t._v("SYNC")]),t._v(", "),s("code",[t._v("PSYNC")]),t._v(" — internal command")]),t._v(" "),s("li",[s("code",[t._v("REPLCONF")])]),t._v(" "),s("li",[s("code",[t._v("INFO replication")])])])])])]),t._v(" "),s("li",[s("p",[t._v("sentinel — monitor the cluster and pick new leader")]),t._v(" "),s("ul",[s("li",[t._v("available commands — "),s("code",[t._v("PING")]),t._v(", pub/sub etc., see "),s("code",[t._v("sentinelcmds[]")]),t._v(" in "),s("code",[t._v("sentinel.c")])]),t._v(" "),s("li",[t._v("configurations — "),s("code",[t._v("sentinel")])]),t._v(" "),s("li",[t._v("state"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Main state. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sentinelState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" current_epoch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Current epoch. */")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("masters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Dictionary of master sentinelRedisInstances.\n                           Key is the instance name, value is the\n                           sentinelRedisInstance structure pointer. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" sentinel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("sentinelRedisInstance")]),t._v(" — states of master, slave or another sentinel, tbd")])])]),t._v(" "),s("li",[t._v("link — command link and subscribe link, first established to the master and then slaves\n"),s("ul",[s("li",[t._v("channel — sentinel subscribe by sending command "),s("code",[t._v("SUBSCRIBE __sentinel__:hello")]),t._v(" via subscribe link once it is established")]),t._v(" "),s("li",[t._v("inter-sentinel link — upon the discovery of other sentinels, command links established mutually")])])]),t._v(" "),s("li",[t._v("heartbeat\n"),s("ul",[s("li",[s("code",[t._v("INFO")]),t._v(" master and slaves — sentinel will send "),s("code",[t._v("INFO")]),t._v(" to master in 0.1 Hz, refreshing "),s("code",[t._v("run_id")]),t._v(" and "),s("code",[t._v("slaves")]),t._v(" accordingly, for newly added slaves, sentinel will create link to them and send heartbeats in the same manner, and extract "),s("code",[t._v("run_id")]),t._v(", "),s("code",[t._v("role")]),t._v(", "),s("code",[t._v("master_link_status")]),t._v(", "),s("code",[t._v("slave_priority")]),t._v(", "),s("code",[t._v("slave_repl_offset")]),t._v(" etc. from "),s("code",[t._v("INFO")])]),t._v(" "),s("li",[t._v("make master and slaves "),s("code",[t._v("PUBLISH")]),t._v(" and piggyback — sentinel send "),s("code",[t._v("PUBLISH")]),t._v(" to master and slave, defaults to 0.5 Hz"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('PUBLISH __sentinel__:hello "<s_ip>,<s_port>,<s_runid>,<s_epoch>,<m_name>,<m_id>,<m_port>,<m_epoch>\n')])])]),s("ul",[s("li",[s("code",[t._v("s_")]),t._v(" for sentinel, "),s("code",[t._v("m_")]),t._v(" for master")]),t._v(" "),s("li",[t._v("loop: perception of other sentinels — sentinels can "),s("code",[t._v("PUBLISH")]),t._v(" via command link and receive via their subscription, for piggybacked message, ignore if same ID as self in the message, update states according to the message if other sentinels")])])]),t._v(" "),s("li",[t._v("to master, slaves and other sentinels — sentinel "),s("code",[t._v("PING")]),t._v(" other servers in 1 Hz, with possible response "),s("code",[t._v("+PONG")]),t._v(", "),s("code",[t._v("-LOADING")]),t._v(", "),s("code",[t._v("-MASTERDOWN")]),t._v(" "),s("ul",[s("li",[t._v("subjective down — if no valid response for "),s("code",[t._v("down-after-milliseconds")]),t._v(" in sentinel configurations, "),s("code",[t._v("SRI_S_DOWN")]),t._v(" will be ORed to flags; opinion may vary among sentinels")]),t._v(" "),s("li",[t._v("objective down — ask other sentinels, "),s("code",[t._v("SRI_S_DOWN")]),t._v(" ORed if subjective down for a quorum, "),s("code",[t._v("quorum")]),t._v(" set in sentinel configurations and can vary among sentinels"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SENTINEL is-master-down-by-addr <ip> <port> <current_epoch> <run_id_or_star>\n")])])]),t._v("response, where the last two only used for leader election"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1) <down_state>\n2) <leader_runid>\n3) <leader_epoch>\n")])])])])])])])]),t._v(" "),s("li",[t._v("sentinel leader election (Raft) — after master server objective down, a sentinel will "),s("code",[t._v("SENTINEL is-master-down-by-addr")]),t._v(" to other sentinels but with own "),s("code",[t._v("run_id")]),t._v(", the following runs like Raft")]),t._v(" "),s("li",[t._v("failover — after master failure, the leader sentinel selects a slave as the new master by sending "),s("code",[t._v("SLAVEOF no one")]),t._v(", then "),s("code",[t._v("INFO")]),t._v(" in 1 Hz to see if "),s("code",[t._v("role")]),t._v(" in response becomes "),s("code",[t._v("master")]),t._v(", and the "),s("code",[t._v("SLAVEOF")]),t._v(" other slaves to set the new master, also "),s("code",[t._v("SLAVEOF")]),t._v(" the old master once it come back\n"),s("ul",[s("li",[t._v("master selection — filter out down slaves, slaves with no response for "),s("code",[t._v("INFO")]),t._v(" for 5s, slaves whose link with the old master broke for "),s("code",[t._v("down-after-milliseconds * 10")]),t._v("; then sort by "),s("code",[t._v("slave_priority")]),t._v(", "),s("code",[t._v("slave_repl_offset")]),t._v(", "),s("code",[t._v("run_id")]),t._v(" and choose the best")])])])])]),t._v(" "),s("li",[s("p",[t._v("cluster — database sharing")]),t._v(" "),s("ul",[s("li",[t._v("enable cluster — "),s("code",[t._v("cluster-enabled")]),t._v(" in configurations, a node can only "),s("code",[t._v("SELECT")]),t._v(" 0")]),t._v(" "),s("li",[t._v("add node to cluster — three way handshake after "),s("code",[t._v("CLUSTER MEET")]),t._v(" from the client: "),s("code",[t._v("MEET")]),t._v(", "),s("code",[t._v("PONG")]),t._v(", "),s("code",[t._v("PING")]),t._v("; then disseminate to other nodes via Gossip (heartbeats) to let them handshake the new node"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("CLUSTER MEET <ip> <port>\n")])])])]),t._v(" "),s("li",[t._v("structures in "),s("code",[t._v("cluster.h")]),t._v(" — "),s("code",[t._v("clusterNode")]),t._v(", "),s("code",[t._v("clusterLink")]),t._v(", "),s("code",[t._v("clusterState")])]),t._v(" "),s("li",[t._v("slots — "),s("code",[t._v("1 << 14")]),t._v(" = 16384 slots, "),s("code",[t._v("CLUSTER_FAIL")]),t._v(" even if only one slot not handled\n"),s("ul",[s("li",[t._v("delegate slots to a node — "),s("code",[t._v("CLUSTER ADDSLOTS")])]),t._v(" "),s("li",[t._v("slot state store — as a "),s("code",[t._v("clusterNode")]),t._v(" map in "),s("code",[t._v("clusterState.slots")]),t._v(" and as a bit vector "),s("code",[t._v("slots")]),t._v(" in "),s("code",[t._v("clusterNode")]),t._v(" in "),s("code",[t._v("clusterState->nodes")])]),t._v(" "),s("li",[t._v("broadcast "),s("code",[t._v("slots")]),t._v(" — a node will broadcast its "),s("code",[t._v("slots")]),t._v(" to other nodes, which is kept in "),s("code",[t._v("clusterState.slots")]),t._v(" and "),s("code",[t._v("clusterNode")]),t._v(" in "),s("code",[t._v("clusterState->nodes")]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("clusterState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    clusterNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myself"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This node */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Hash table of name -> clusterNode structures */")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nodes_black_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Nodes we don't re-add for a few seconds. */")]),t._v("\n    clusterNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("migrating_slots_to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CLUSTER_SLOTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    clusterNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("importing_slots_from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CLUSTER_SLOTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    clusterNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CLUSTER_SLOTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" slots_keys_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CLUSTER_SLOTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rax "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("slots_to_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" clusterState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("clusterNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" slots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CLUSTER_SLOTS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* slots handled by this node */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numslots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of slots handled by this node */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" clusterNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("hash function — "),s("code",[t._v("CRC16(key) & 0x3fff")]),t._v(", command "),s("code",[t._v("CLUSTER KEYSLOT")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("0x3fff")]),t._v(" — bitmap for a node will be of size 2 KB, which saves bandwidth compared to 65536 slots, and 16384 slots are enough for clusters under 1000 nodes")])])]),t._v(" "),s("li",[s("code",[t._v("slots_to_keys")]),t._v(" — slot to key mapping as radix trees, support for commands like "),s("code",[t._v("CLUSTER GETKEYSINSLOT")])])])]),t._v(" "),s("li",[t._v("sharding and re-sharding\n"),s("ul",[s("li",[t._v("sharding — execute if the right slot, otherwise redirect the client to the node the slot belongs to by a "),s("code",[t._v("MOVE")]),t._v(" error")]),t._v(" "),s("li",[t._v("re-sharding — adjust slot distribution and migrate slots")]),t._v(" "),s("li",[t._v("migrate slots — executed online by cluster management utility redis-trib, one slot by one slot\n"),s("ol",[s("li",[t._v("send "),s("code",[t._v("CLUSTER SETSLOT <slot> IMPORTING <source_id>")]),t._v(" to target node, setting its "),s("code",[t._v("clusterState.importing_slots_from[slot]")]),t._v(" to source node")]),t._v(" "),s("li",[t._v("send "),s("code",[t._v("CLUSTER SETSLOT <slot> MIGRATING <target_id>")]),t._v(" to source node, setting its "),s("code",[t._v("clusterState.migrating_slots_to[slot]")]),t._v(" t target node")]),t._v(" "),s("li",[t._v("send "),s("code",[t._v("CLUSTER GETKEYSINSLOT")]),t._v(" to source node, for keys responded, send "),s("code",[t._v("MIGRATE")]),t._v(" to source node; repeat until all keys migrated")]),t._v(" "),s("li",[t._v("send "),s("code",[t._v("CLUSTER SETSLOT <slot> NODE <target_id>")]),t._v(" to any node to disseminate the information to the cluster")])])]),t._v(" "),s("li",[t._v("command executing when migrating — if the key does not exist on the source node, send "),s("code",[t._v("ASK")]),t._v(" error to redirect the client to the target node, and client send "),s("code",[t._v("ASKING")]),t._v(" to the redirected node before resending command\n"),s("ul",[s("li",[s("code",[t._v("ASKING")]),t._v(" — turn on "),s("code",[t._v("REDIS_ASKING")]),t._v(" in "),s("code",[t._v("client.flags")]),t._v(" for next command; a node will refrain from send "),s("code",[t._v("MOVE")]),t._v(" error and try to execute the command even if the slot is not delegated to the node if "),s("code",[t._v("REDIS_ASKING")]),t._v(" on the client and "),s("code",[t._v("clusterState.importing_slots_from[slot]")]),t._v(" is not "),s("code",[t._v("NULL")])])])])])]),t._v(" "),s("li",[t._v("replication and failover — use replication for each node and select a slave as the new master if the original master is down\n"),s("ul",[s("li",[t._v("set slave — "),s("code",[t._v("CLUSTER REPLICATE")]),t._v(", set "),s("code",[t._v("clusterState.myself.slaveof")]),t._v(" and turn off "),s("code",[t._v("CLUSTER_NODE_MASTER")]),t._v(" and turn on "),s("code",[t._v("CLUSTER_NODE_SLAVE")]),t._v(" "),s("code",[t._v("clusterState.myself.flags")]),t._v(", then information disseminated via heartbeats, and other nodes update information in "),s("code",[t._v("clusterNode->slaves")]),t._v(", "),s("code",[t._v("clusterNode.numslaves")])]),t._v(" "),s("li",[s("code",[t._v("CLUSTER_NODE_PFAIL")]),t._v(" and "),s("code",[t._v("CLUSTER_NODE_FAIL")]),t._v(" "),s("ul",[s("li",[t._v("heartbeat and "),s("code",[t._v("CLUSTER_NODE_PFAIL")]),t._v(" — nodes (masters and slaves) in cluster will periodically "),s("code",[t._v("PING")]),t._v(" each other, if no "),s("code",[t._v("PONG")]),t._v(", mark "),s("code",[t._v("CLUSTER_NODE_PFAIL")]),t._v(" (probable fail) for target node in "),s("code",[t._v("clusterState.nodes")]),t._v(" and disseminate via heartbeat message; upon receiving such message, a node will append to "),s("code",[t._v("clusterNode->fail_reports")]),t._v(" in "),s("code",[t._v("clusterState.nodes")])]),t._v(" "),s("li",[s("code",[t._v("CLUSTER_NODE_FAIL")]),t._v(" — if a majority of master nodes mark one master node "),s("code",[t._v("CLUSTER_NODE_PFAIL")]),t._v(", then that node will be marked "),s("code",[t._v("CLUSTER_NODE_FAIL")]),t._v(", and a "),s("code",[t._v("FAIL")]),t._v(" message will be broadcasted")])])]),t._v(" "),s("li",[t._v("failover — when the master fails, a slave is elected to "),s("code",[t._v("SLAVEOF no one")]),t._v(", cancel slots in the original master and add those slots for itself, then broadcast a "),s("code",[t._v("PONG")]),t._v(" to inform the cluster\n"),s("ul",[s("li",[t._v("new master election — Raft, other master nodes can vote")])])])])]),t._v(" "),s("li",[t._v("messages\n"),s("ul",[s("li",[t._v("type\n"),s("ul",[s("li",[s("code",[t._v("MEET")])]),t._v(" "),s("li",[s("code",[t._v("PING")]),t._v(" — once every second, every node selects 5 other random nodes to "),s("code",[t._v("PING")]),t._v("; besides, every node "),s("code",[t._v("PING")]),t._v(" nodes whose last "),s("code",[t._v("PONG")]),t._v(" till now is over half of "),s("code",[t._v("cluster-node-timeout")])]),t._v(" "),s("li",[s("code",[t._v("PONG")]),t._v(" — response to "),s("code",[t._v("MEET")]),t._v(" and "),s("code",[t._v("PING")]),t._v(", and voluntary broadcast")]),t._v(" "),s("li",[s("code",[t._v("FAIL")]),t._v(" — broadcasted ASAP")]),t._v(" "),s("li",[s("code",[t._v("PUBLISH")]),t._v(" — clients can subscribe to every node, and can also publish to every other node; the current implementation will simply broadcast each published message to all other nodes, but at some point this will be optimized either using Bloom filters or other algorithms")])])]),t._v(" "),s("li",[t._v("header common to all messages — "),s("code",[t._v("clusterMsg")]),t._v(" in "),s("code",[t._v("cluster.h")]),t._v(", includes the sender's ID, "),s("code",[t._v("currentEpoch")]),t._v(", "),s("code",[t._v("configEpoch")]),t._v(", flags, slot bitmap, address, master ID, cluster state POV ("),s("code",[t._v("CLUSTER_OK")]),t._v(" or "),s("code",[t._v("CLUSTER_FAIL")]),t._v(")")]),t._v(" "),s("li",[t._v("heartbeat — "),s("code",[t._v("PING")]),t._v(", "),s("code",[t._v("PONG")]),t._v(", also contain a Gossip section")]),t._v(" "),s("li",[t._v("Gossip section — for "),s("code",[t._v("MEET")]),t._v(", "),s("code",[t._v("PING")]),t._v(" and "),s("code",[t._v("PONG")]),t._v(" messages, offering a view of ID, last "),s("code",[t._v("PING")]),t._v(" and "),s("code",[t._v("PONG")]),t._v(" timestamps, address and flags of a few random nodes from the sender"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* PING, MEET and PONG */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Array of N clusterMsgDataGossip structures */")]),t._v("\n    clusterMsgDataGossip gossip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ping"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),s("li",[t._v("related command "),s("code",[t._v("CLUSTER")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("MEET")])]),t._v(" "),s("li",[s("code",[t._v("NODES")])]),t._v(" "),s("li",[s("code",[t._v("INFO")])]),t._v(" "),s("li",[s("code",[t._v("ADDSLOTS")]),t._v(", "),s("code",[t._v("SETSLOT")])]),t._v(" "),s("li",[s("code",[t._v("KEYSLOT")])]),t._v(" "),s("li",[s("code",[t._v("GETKEYSINSLOT")])]),t._v(" "),s("li",[s("code",[t._v("REPLICATE")])])])])])])]),t._v(" "),s("h2",{attrs:{id:"Transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Transaction"}},[t._v("#")]),t._v(" Transaction")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("transaction — queue commands and execute them atomically")]),t._v(" "),s("ul",[s("li",[t._v("command queue — all commands except transaction related commands will be validated and queued"),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("multiState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    multiCmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("commands"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Array of MULTI commands */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Total number of MULTI commands */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cmd_flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The accumulated command flags OR-ed together.\n                               So if at least a command has a given flag, it\n                               will be set in this field. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cmd_inv_flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Same as cmd_flags, OR-ing the ~flags. so that it\n                               is possible to know if all the commands have a\n                               certain flag. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minreplicas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* MINREPLICAS for synchronous replication */")]),t._v("\n    time_t minreplicas_timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* MINREPLICAS timeout as unixtime. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" multiState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("client")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    multiState mstate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* MULTI/EXEC state */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("optimistic lock — "),s("code",[t._v("WATCH")]),t._v(", transaction aborted if any "),s("code",[t._v("WATCH")]),t._v("ed key is modified before "),s("code",[t._v("EXEC")]),t._v(" "),s("ul",[s("li",[t._v("implementation — "),s("code",[t._v("redisDb->watched_keys")]),t._v(", "),s("code",[t._v("dict")]),t._v(" of key to client linked list; add "),s("code",[t._v("CLIENT_DIRTY_CAS")]),t._v(" in "),s("code",[t._v("client.flags")]),t._v(" if a command with "),s("code",[t._v("w")]),t._v(" in "),s("code",[t._v("redisCommand.sflags")]),t._v(" modified watched keys")])])]),t._v(" "),s("li",[t._v("ACID — guaranteed by single thread, except durability\n"),s("ul",[s("li",[t._v("force durability — "),s("code",[t._v("SAVE")]),t._v(" before "),s("code",[t._v("EXEC")]),t._v(", but low performance")])])])])]),t._v(" "),s("li",[s("p",[t._v("non-transactional pipeline — batch commands but not in a transaction")])]),t._v(" "),s("li",[s("p",[t._v("related commands")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("MULTI")]),t._v(" — start transaction, "),s("code",[t._v("CLIENT_MULTI")]),t._v(" in "),s("code",[t._v("client.flags")])]),t._v(" "),s("li",[s("code",[t._v("EXEC")]),t._v(" — commit")]),t._v(" "),s("li",[s("code",[t._v("WATCH")]),t._v(", "),s("code",[t._v("UNWATCH")])]),t._v(" "),s("li",[s("code",[t._v("DISCARD")])])])])]),t._v(" "),s("h2",{attrs:{id:"Other"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Other"}},[t._v("#")]),t._v(" Other")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("config")]),t._v(" "),s("ul",[s("li",[t._v("config file — "),s("code",[t._v("/etc/redis/redis.conf")])]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("CONFIG")])])])])])]),t._v(" "),s("li",[s("p",[t._v("eviction when "),s("code",[t._v("maxmemory")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("volatile-lru")]),t._v(" — 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰")]),t._v(" "),s("li",[s("code",[t._v("volatile-ttl")]),t._v(" — 从已设置过期时间的数据集中挑选将要过期的数据淘汰")]),t._v(" "),s("li",[s("code",[t._v("volatile-random")]),t._v(" — 从已设置过期时间的数据集中任意选择数据淘汰")]),t._v(" "),s("li",[s("code",[t._v("allkeys-lru")]),t._v(" — 从所有数据集中挑选最近最少使用的数据淘汰")]),t._v(" "),s("li",[s("code",[t._v("allkeys-random")]),t._v(" — 从所有数据集中任意选择数据进行淘汰")]),t._v(" "),s("li",[s("code",[t._v("noeviction")]),t._v(" — 禁止驱逐数据")])])]),t._v(" "),s("li",[s("p",[t._v("Lua")]),t._v(" "),s("ul",[s("li",[t._v("create Lua environment\n"),s("ol",[s("li",[t._v("创建一个基础的 Lua 环境 by "),s("code",[t._v("lua_open")]),t._v("， 之后的所有修改都是针对这个环境进行的。")]),t._v(" "),s("li",[t._v("载入多个函数库到 Lua 环境里面， 让 Lua 脚本可以使用这些函数库来进行数据操作。 — tbd")]),t._v(" "),s("li",[t._v("创建全局表格 "),s("code",[t._v("redis")]),t._v(" ， 这个表格包含了对 Redis 进行操作的函数， 比如用于在 Lua 脚本中执行 Redis 命令的 "),s("code",[t._v("redis.call")]),t._v(" 函数。")]),t._v(" "),s("li",[t._v("使用 Redis 自制的随机函数来替换 Lua 原有的带有副作用的随机函数， 从而避免在脚本中引入副作用。")]),t._v(" "),s("li",[t._v("创建排序辅助函数， Lua 环境使用这个辅佐函数来对一部分 Redis 命令的结果进行排序， 从而消除这些命令的不确定性。")]),t._v(" "),s("li",[t._v("创建 "),s("code",[t._v("redis.pcall")]),t._v(" 函数的错误报告辅助函数， 这个函数可以提供更详细的出错信息。")]),t._v(" "),s("li",[t._v("对 Lua 环境里面的全局环境进行保护， 防止用户在执行 Lua 脚本的过程中， 将额外的全局变量添加到了 Lua 环境里面。")]),t._v(" "),s("li",[t._v("将完成修改的 Lua 环境保存到服务器状态的 "),s("code",[t._v("lua")]),t._v(" 属性里面， 等待执行服务器传来的 Lua 脚本。")])])]),t._v(" "),s("li",[s("code",[t._v("redis.call")]),t._v(" and "),s("code",[t._v("redis.pcall")]),t._v(" — executed by "),s("code",[t._v("redisServer.lua_client")])]),t._v(" "),s("li",[t._v("SHA1\n"),s("ul",[s("li",[t._v("as key — "),s("code",[t._v("redisServer->lua_scripts")]),t._v(", which is "),s("code",[t._v("dict")]),t._v(" with SHA1 as key, function body as value")]),t._v(" "),s("li",[t._v("as Lua function name — function "),s("code",[t._v("f_<SHA1>()")]),t._v(" is defined with the arguments of "),s("code",[t._v("EVAL")])])])]),t._v(" "),s("li",[t._v("script executing — tbd")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("EVAL")])]),t._v(" "),s("li",[s("code",[t._v("EVALSHA")])]),t._v(" "),s("li",[s("code",[t._v("SCRIPT")])])])])])]),t._v(" "),s("li",[s("p",[t._v("slow log")]),t._v(" "),s("ul",[s("li",[t._v("configurations — "),s("code",[t._v("slowlog-log-slower-than")]),t._v(", "),s("code",[t._v("slowlog-max-len")])]),t._v(" "),s("li",[t._v("log entry id — "),s("code",[t._v("long long")]),t._v(" "),s("code",[t._v("redisServer.slowlog_entry_id")]),t._v(", +1 every time")]),t._v(" "),s("li",[t._v("tbd")]),t._v(" "),s("li",[t._v("related commands\n"),s("ul",[s("li",[s("code",[t._v("SLOWLOG")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("GET")])])])])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("MONITOR")]),t._v(" — a debugging command that streams back every command processed by the Redis server")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("client.flags")]),t._v(" — "),s("code",[t._v("REDIS_MONITOR")])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);