(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{241:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("h2",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("help")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("man")]),t._v(" git-command\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--help")]),t._v("\n")])])]),e("ul",[e("li",[e("a",{attrs:{href:"https://git-scm.com/doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - Documentation"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - Reference"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://git-scm.com/docs/git",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git, including all commands"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://git-scm.com/docs/gitglossary",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - gitglossary Documentation"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("code",[t._v("git help")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--all "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-g"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--guide"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--info"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-m"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--man"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-w"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--web"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COMMAND"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("GUIDE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),e("li",[e("code",[t._v("-h")]),t._v(" "),e("code",[t._v("--help")]),t._v(" option")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.github.com/en",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub.com Help Documentation"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://lab.github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Learning Lab"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--help"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-C "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--exec-path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--html-path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--man-path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--info-path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--paginate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-P"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--no-pager"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--no-replace-objects"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--bare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--git-dir"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--work-tree"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--namespace"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--super-prefix"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git config")])]),t._v(" "),e("ul",[e("li",[t._v("location\n"),e("ul",[e("li",[e("code",[t._v("/etc/gitconfig")]),t._v(" — "),e("code",[t._v("--system")])]),t._v(" "),e("li",[e("code",[t._v("~/.gitconfig")]),t._v(" or "),e("code",[t._v("~/.config/git/config")]),t._v(" — "),e("code",[t._v("--global")])]),t._v(" "),e("li",[e("code",[t._v(".git/config")]),t._v(" — "),e("code",[t._v("--local")]),t._v(" or by default")])])]),t._v(" "),e("li",[t._v("show configuration and where it comes from"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git config [<file-option>] [--show-origin] [-z|--null] [--name-only] -l | --list")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--list")]),t._v(" --show-origin\n")])])])]),t._v(" "),e("li",[t._v("common configurations — list available in "),e("code",[t._v("git help config")]),t._v(" "),e("ul",[e("li",[t._v("identity\n"),e("ul",[e("li",[e("code",[t._v("user.name")])]),t._v(" "),e("li",[e("code",[t._v("user.email")])]),t._v(" "),e("li",[e("code",[t._v("credential.helper")])]),t._v(" "),e("li",[e("code",[t._v("user.signingkey")]),t._v(" — typically from "),e("code",[t._v("gpg --gen-key")]),t._v(" or "),e("code",[t._v("gpg --list-keys")])])])]),t._v(" "),e("li",[t._v("utilities\n"),e("ul",[e("li",[e("code",[t._v("core.editor")]),t._v(" or "),e("code",[t._v("EDITOR")]),t._v(" environment variable")])])]),t._v(" "),e("li",[t._v("aliases — "),e("code",[t._v("alias.<string>")])])])]),t._v(" "),e("li",[t._v("branch\n"),e("ul",[e("li",[e("code",[t._v("branch.<name>.remote")]),t._v(", "),e("code",[t._v("branch.<name>.merge")]),t._v(" — usually use "),e("code",[t._v("git checkout")]),t._v(" or "),e("code",[t._v("git branch")]),t._v(" with "),e("code",[t._v("-t")]),t._v(" to set")]),t._v(" "),e("li",[e("code",[t._v("branch.autoSetupMerge")])])])]),t._v(" "),e("li",[t._v("remote\n"),e("ul",[e("li",[e("code",[t._v("pull.rebase")]),t._v(", boolean")])])]),t._v(" "),e("li",[t._v("functionality\n"),e("ul",[e("li",[e("code",[t._v("rerere.enabled")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v(".gitignore")])]),t._v(" "),e("ul",[e("li",[t._v("docs — "),e("code",[t._v("man gitignore")])]),t._v(" "),e("li",[t._v("syntax\n"),e("ul",[e("li",[t._v("inline comment — "),e("code",[t._v("#")])]),t._v(" "),e("li",[t._v("glob patterns — applied recursively, like simplified regexp\n"),e("ul",[e("li",[e("code",[t._v("*")]),t._v(" — zero or more characters")]),t._v(" "),e("li",[e("code",[t._v("?")]),t._v(" — one character")]),t._v(" "),e("li",[e("code",[t._v("**")]),t._v(" — "),e("code",[t._v("a/**/z")]),t._v(" would match "),e("code",[t._v("a/z")]),t._v(", "),e("code",[t._v("a/b/z")]),t._v(", "),e("code",[t._v("a/b/c/z")]),t._v(", and so on")]),t._v(" "),e("li",[e("code",[t._v("[abc]")]),t._v(" — same as regexp")])])]),t._v(" "),e("li",[t._v("avoid recursivity — start patterns with "),e("code",[t._v("/")])]),t._v(" "),e("li",[t._v("specify directory — end patterns with "),e("code",[t._v("/")])]),t._v(" "),e("li",[t._v("negate patterns — start with "),e("code",[t._v("!")])])])]),t._v(" "),e("li",[t._v("commonly used — "),e("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("github/gitignore: A collection of useful .gitignore templates"),e("OutboundLink")],1),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("*."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oa"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# object and archive files")]),t._v("\n*~ "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# temporary files of editors such as vim and emacs")]),t._v("\n")])])])])])]),t._v(" "),e("li",[e("p",[t._v("CLI")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("gitk")])])])]),t._v(" "),e("li",[e("p",[t._v("GitHub API")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("/users/<username>")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("curl https://api.github.com/users/schacon\n")])])])]),t._v(" "),e("li",[t._v("gitignore"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("curl https://api.github.com/gitignore/templates/Java\n")])])])]),t._v(" "),e("li",[t._v("comment"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('curl -H "Content-Type: application/json" \\\n    -H "Authorization: token TOKEN" \\\n    --data \'{"body":"A new comment, :+1:"}\' \\\n    https://api.github.com/repos/schacon/blink/issues/6/comments\n')])])])]),t._v(" "),e("li",[t._v("gist — like normal git repo\n"),e("ul",[e("li",[t._v("anonymous"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone https://gist.github.com/<gist-id>.git\n")])])])]),t._v(" "),e("li",[t._v("with user"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone https://<user>@gist.github.com/<gist-id>.git\n")])])])])])])])])]),t._v(" "),e("h2",{attrs:{id:"quick-reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quick-reference"}},[t._v("#")]),t._v(" Quick Reference")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("initialization")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" dir_name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])])]),t._v(" "),e("li",[e("p",[t._v("add files to the index")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" file1 file2 file3\n")])])])]),t._v(" "),e("li",[e("p",[t._v("changes made to indexed files")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])])]),t._v(" "),e("li",[e("p",[t._v("all in one step")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v("\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"philosophy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#philosophy"}},[t._v("#")]),t._v(" Philosophy")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("philosophy — "),e("a",{attrs:{href:"https://git-scm.com/docs/gitglossary",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - gitglossary Documentation"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("snapshots — stream of snapshots instead of delta-based version control")]),t._v(" "),e("li",[t._v("local — most operations are local compared to the central-based")]),t._v(" "),e("li",[t._v("integrity — everything is checksummed (SHA-1) before it is stored and is then referred to by that checksum")]),t._v(" "),e("li",[t._v("only add (generally) — hard to get the system to do anything that is not undoable or to make it erase data in any way")]),t._v(" "),e("li",[t._v("three states — modified, staged and commited")]),t._v(" "),e("li",[t._v("index — cache")]),t._v(" "),e("li",[t._v("working tree — current file contents tree for files in track")])])]),t._v(" "),e("li",[e("p",[t._v("common options")]),t._v(" "),e("ul",[e("li",[t._v("list files\n"),e("ul",[e("li",[e("code",[t._v("--")]),t._v(" — used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options)")]),t._v(" "),e("li",[t._v("escape like "),e("code",[t._v("git rm \\*~")]),t._v(" — Git does its own filename expansion in addition to your shell’s filename expansion")]),t._v(" "),e("li",[e("code",[t._v("-r")]),t._v(" — recursively")])])]),t._v(" "),e("li",[t._v("how to run\n"),e("ul",[e("li",[e("code",[t._v("-n")]),t._v(" "),e("code",[t._v("--dry-run")])]),t._v(" "),e("li",[e("code",[t._v("-i")]),t._v(" "),e("code",[t._v("--interactive")])]),t._v(" "),e("li",[e("code",[t._v("-p")]),t._v(" "),e("code",[t._v("--patch")]),t._v(" — partially for files")]),t._v(" "),e("li",[e("code",[t._v("-f")]),t._v(" "),e("code",[t._v("--force")])]),t._v(" "),e("li",[e("code",[t._v("-e")]),t._v(" "),e("code",[t._v("--edit")]),t._v(" — Open the diff vs. the index in an editor and let the user edit it")])])]),t._v(" "),e("li",[t._v("stdout\n"),e("ul",[e("li",[e("code",[t._v("-q")]),t._v(" "),e("code",[t._v("--quiet")])]),t._v(" "),e("li",[e("code",[t._v("-v")]),t._v(", "),e("code",[t._v("-vv")]),t._v(", "),e("code",[t._v("--verbose")])])])]),t._v(" "),e("li",[t._v("message\n"),e("ul",[e("li",[e("code",[t._v("-m <msg>")]),t._v(" "),e("code",[t._v("--message=<msg>")])]),t._v(" "),e("li",[e("code",[t._v("-F <file>")]),t._v(" "),e("code",[t._v("--file=<file>")])]),t._v(" "),e("li",[e("code",[t._v("-e")]),t._v(" "),e("code",[t._v("--edit")]),t._v(" — further edit the message from "),e("code",[t._v("-m")]),t._v(" or "),e("code",[t._v("-F")])]),t._v(" "),e("li",[t._v("otherwise configured editor is started for message")])])]),t._v(" "),e("li",[t._v("operations\n"),e("ul",[e("li",[e("code",[t._v("-d")]),t._v(", "),e("code",[t._v("--delete")])])])])])]),t._v(" "),e("li",[e("p",[t._v("data types")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("<date>")])]),t._v(" "),e("li",[e("code",[t._v("<pattern>")]),t._v(" — shell wildcard / glob pattern, except that slashes are not treated specially")]),t._v(" "),e("li",[e("code",[t._v("<revision range>")])]),t._v(" "),e("li",[e("code",[t._v("<repository>")]),t._v(" — "),e("code",[t._v("<url>")]),t._v(" or "),e("code",[t._v("<name>")]),t._v(" of a remote")]),t._v(" "),e("li",[e("code",[t._v("<object>")]),t._v(", "),e("code",[t._v("<rev>")]),t._v(" "),e("ul",[e("li",[t._v("blobs, trees, tags and commits, "),e("code",[t._v("<commit>")]),t._v(" — defaults to "),e("code",[t._v("HEAD")])]),t._v(" "),e("li",[e("code",[t._v("<sha1>")]),t._v(" — full or leading substring that is unique")]),t._v(" "),e("li",[e("code",[t._v("<describeOutput>")]),t._v(" — "),e("code",[t._v("git describe")]),t._v(" output, optionally followed by a dash and a number of commits, followed by a dash, a g, and an abbreviated object name, e.g. "),e("code",[t._v("v1.7.4.2-679-g3bee7fb")])]),t._v(" "),e("li",[e("code",[t._v("<refname>")]),t._v(" — e.g. "),e("code",[t._v("master")]),t._v(", "),e("code",[t._v("heads/master")]),t._v(", "),e("code",[t._v("refs/heads/master")]),t._v(", see below")]),t._v(" "),e("li",[t._v("more below")])])]),t._v(" "),e("li",[e("code",[t._v("<range>")]),t._v(" — a set of commits")]),t._v(" "),e("li",[e("code",[t._v("<refspec>")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("<rev>")]),t._v(", "),e("code",[t._v("<refname>")]),t._v(" — checked by "),e("code",[t._v("git check-ref-format")]),t._v(", see also above")]),t._v(" "),e("ul",[e("li",[t._v("resolved by the order below\n"),e("ul",[e("li",[e("code",[t._v("$GIT_DIR/<refname>")]),t._v(" that is what you mean (this is usually useful only for "),e("code",[t._v("HEAD")]),t._v(", "),e("code",[t._v("FETCH_HEAD")]),t._v(", "),e("code",[t._v("ORIG_HEAD")]),t._v(", "),e("code",[t._v("MERGE_HEAD")]),t._v(" and "),e("code",[t._v("CHERRY_PICK_HEAD")]),t._v(");\n"),e("ul",[e("li",[e("code",[t._v("HEAD")]),t._v(", "),e("code",[t._v("@")]),t._v(" — commit on which you based the changes in the working tree")]),t._v(" "),e("li",[e("code",[t._v("FETCH_HEAD")]),t._v(" — the last "),e("code",[t._v("git fetch")]),t._v(" branch")]),t._v(" "),e("li",[e("code",[t._v("ORIG_HEAD")]),t._v(" — created by commands that move your "),e("code",[t._v("HEAD")]),t._v(" in a drastic way, for undo")]),t._v(" "),e("li",[e("code",[t._v("MERGE_HEAD")]),t._v(" — the commit(s) which you are merging into your branch when you run "),e("code",[t._v("git merge")])]),t._v(" "),e("li",[e("code",[t._v("CHERRY_PICK_HEAD")]),t._v(" — records the commit which you are cherry-picking when you run "),e("code",[t._v("git cherry-pick")])])])]),t._v(" "),e("li",[e("code",[t._v("refs/<refname>")]),t._v(" if it exists;")]),t._v(" "),e("li",[e("code",[t._v("refs/tags/<refname>")]),t._v(" if it exists;")]),t._v(" "),e("li",[e("code",[t._v("refs/heads/<refname>")]),t._v(" if it exists;")]),t._v(" "),e("li",[e("code",[t._v("refs/remotes/<refname>")]),t._v(" if it exists;")]),t._v(" "),e("li",[e("code",[t._v("refs/remotes/<refname>/HEAD")]),t._v(" if it exists.")])])]),t._v(" "),e("li",[t._v("with "),e("code",[t._v("@")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("@")]),t._v(" — "),e("code",[t._v("HEAD")])]),t._v(" "),e("li",[e("code",[t._v("[<refname>]@{<date>}")]),t._v(" — the value of the ref at a prior point in time, e.g. "),e("code",[t._v("master@{yesterday}")]),t._v(", "),e("code",[t._v("HEAD@{5 minutes ago}")])]),t._v(" "),e("li",[e("code",[t._v("<refname>@{<n>}")]),t._v(" — the n-th prior value of that ref, e.g. "),e("code",[t._v("master@{1}")]),t._v(", see "),e("code",[t._v("git reflog")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("@{<n>}")]),t._v(" — current branch")]),t._v(" "),e("li",[e("code",[t._v("@{-<n>}")]),t._v(" — the n-th branch/commit checked out before the current one")])])]),t._v(" "),e("li",[e("code",[t._v("[<branchname>]@{upstream}")]),t._v(", "),e("code",[t._v("<branchname>@{u}")]),t._v(" — upstream branch for "),e("code",[t._v("branchname")]),t._v(", configured with "),e("code",[t._v("branch.<name>.remote")]),t._v(" and "),e("code",[t._v("branch.<name>.merge")]),t._v(", e.g. "),e("code",[t._v("master@{upstream}")]),t._v(", "),e("code",[t._v("@{u}")])]),t._v(" "),e("li",[e("code",[t._v("[<branchname>]@{push}")]),t._v(" — the local tracking branch ("),e("code",[t._v("refs/remotes/")]),t._v(") for "),e("code",[t._v("git push")]),t._v(" destination (checked out branch or the current "),e("code",[t._v("HEAD")]),t._v(" if no branchname is specified), e.g. "),e("code",[t._v("master@{push}")]),t._v(", "),e("code",[t._v("@{push}")]),t._v(" "),e("ul",[e("li",[t._v("difference — In a non-triangular workflow, "),e("code",[t._v("@{push}")]),t._v(" is the same as "),e("code",[t._v("@{upstream}")])]),t._v(" "),e("li",[t._v("triangular workflow — where we pull from one location and push to another"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config push.default current\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config remote.pushdefault myfork\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" mybranch origin/master\n")])])])])])]),t._v(" "),e("li",[e("code",[t._v("stash@{<n>}")]),t._v(", "),e("code",[t._v("stash@{<date>}")])])])]),t._v(" "),e("li",[e("code",[t._v("<rev>")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("<rev>^[<n>]")]),t._v(" — the nth parent of that commit object, "),e("code",[t._v("<rev>^")]),t._v(" is equivalent to "),e("code",[t._v("<rev>^1")])]),t._v(" "),e("li",[e("code",[t._v("<rev>~[<n>]")]),t._v(" — "),e("code",[t._v("<rev>~3")]),t._v(" is equivalent to "),e("code",[t._v("<rev>^^^")]),t._v(" which is equivalent to "),e("code",[t._v("<rev>^1^1^1")])]),t._v(" "),e("li",[e("code",[t._v("<rev>^{<type>}")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("<rev>^{}")])])])]),t._v(" "),e("li",[e("code",[t._v(":/<text>")]),t._v(" — search commit by commit message with regex "),e("code",[t._v("<text>")]),t._v(", with "),e("a",{attrs:{href:"https://git-scm.com/docs/gitrevisions#Documentation/gitrevisions.txt-emlttextgtemegemfixnastybugem",target:"_blank",rel:"noopener noreferrer"}},[t._v("special sequence"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[e("code",[t._v("<rev>^{/<text>}")])])])]),t._v(" "),e("li",[e("code",[t._v("<rev>:<path>")]),t._v(" — the blob or tree, e.g. "),e("code",[t._v("HEAD:README")]),t._v(", "),e("code",[t._v("master:./README")])]),t._v(" "),e("li",[e("code",[t._v(":[<n>:]<path>")]),t._v(" — a blob object in the index\n"),e("ul",[e("li",[e("code",[t._v("n")]),t._v(" — stage number, defaults to 0, during a merge, stage 1 is the common ancestor, stage 2 is the target branch’s version (typically the current branch), and stage 3 is the version from the branch which is being merged.")])])])])]),t._v(" "),e("li",[e("code",[t._v("<tree-ish>")]),t._v(" — a (sub)directory tree"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("----------------------------------------------------------------------\n|    Commit-ish/Tree-ish    |                Examples\n----------------------------------------------------------------------\n|  1. <sha1>                | dae86e1950b1277e545cee180551750029cfe735\n|  2. <describeOutput>      | v1.7.4.2-679-g3bee7fb\n|  3. <refname>             | master, heads/master, refs/heads/master\n|  4. <refname>@{<date>}    | master@{yesterday}, HEAD@{5 minutes ago}\n|  5. <refname>@{<n>}       | master@{1}\n|  6. @{<n>}                | @{1}\n|  7. @{-<n>}               | @{-1}\n|  8. <refname>@{upstream}  | master@{upstream}, @{u}\n|  9. <rev>^                | HEAD^, v1.5.1^0\n| 10. <rev>~<n>             | master~3\n| 11. <rev>^{<type>}        | v0.99.8^{commit}\n| 12. <rev>^{}              | v0.99.8^{}\n| 13. <rev>^{/<text>}       | HEAD^{/fix nasty bug}\n| 14. :/<text>              | :/fix nasty bug\n----------------------------------------------------------------------\n|       Tree-ish only       |                Examples\n----------------------------------------------------------------------\n| 15. <rev>:<path>          | HEAD:README, :README, master:./README\n----------------------------------------------------------------------\n|       Tree-ish/Blob       |                Examples\n----------------------------------------------------------------------\n| 16. :<n>:<path>           | :0:README, :README\n----------------------------------------------------------------------\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("<range>")]),t._v(" — a set of commits")]),t._v(" "),e("ul",[e("li",[t._v("reachable set — the commit itself and the commits in its ancestry chain")]),t._v(" "),e("li",[e("code",[t._v("<rev>")]),t._v(" — the set of commits reachable from the given commit")]),t._v(" "),e("li",[e("code",[t._v("^<rev>")]),t._v(" — exclude")]),t._v(" "),e("li",[t._v("dot range\n"),e("ul",[e("li",[e("code",[t._v("<rev>..<rev>")]),t._v(" — range, "),e("code",[t._v("r1..r2")]),t._v(" is equivalent to "),e("code",[t._v("^r1 r2")])]),t._v(" "),e("li",[e("code",[t._v("<rev>...<rev>")]),t._v(" — symmetric difference, "),e("code",[t._v("r1...r2")]),t._v(" is equivalent to "),e("code",[t._v("r1 r2 --not $(git merge-base --all r1 r2)")]),t._v(", the set of commits that are reachable from either one of "),e("code",[t._v("r1")]),t._v(" (left side) or "),e("code",[t._v("r2")]),t._v(" (right side) but not from both")]),t._v(" "),e("li",[t._v("default "),e("code",[t._v("<rev>")]),t._v(" — "),e("code",[t._v("HEAD")]),t._v(", "),e("code",[t._v("origin..")]),t._v(" is a shorthand for "),e("code",[t._v("origin..HEAD")])])])]),t._v(" "),e("li",[t._v("parent\n"),e("ul",[e("li",[e("code",[t._v("<rev>^@")]),t._v(" — all parents of "),e("code",[t._v("<rev>")])]),t._v(" "),e("li",[e("code",[t._v("<rev>^!")]),t._v(" — "),e("code",[t._v("<rev>")]),t._v(" but its parents, i.e. single commit")]),t._v(" "),e("li",[e("code",[t._v("<rev>^-[<n>]")]),t._v(" — "),e("code",[t._v("<rev>^<n>..<rev>")]),t._v(", "),e("code",[t._v("<n>")]),t._v(" defaults to 1")])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("<refspec>")]),t._v(" — the destination ref to update with what source object, a way of mapping names on the remote with local names")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[+]<src>:<dst>\n")])])]),e("ul",[e("li",[e("code",[t._v("+")]),t._v(" — override restriction rules, like "),e("code",[t._v("--force")])]),t._v(" "),e("li",[e("code",[t._v("<src>")]),t._v(" — "),e("code",[t._v("<rev>")]),t._v(" "),e("ul",[e("li",[t._v("empty "),e("code",[t._v("<src>")]),t._v(" without "),e("code",[t._v("+")]),t._v(" or "),e("code",[t._v("--force")]),t._v(": "),e("code",[t._v(":<dst>")]),t._v(" — delete "),e("code",[t._v("<dst>")])])])]),t._v(" "),e("li",[e("code",[t._v("<dst>")]),t._v(" — defaults to "),e("code",[t._v("remote.<repository>.push")]),t._v(", if not set, defaults to the same ref as "),e("code",[t._v("<src>")])]),t._v(" "),e("li",[e("code",[t._v("tag <tag>")]),t._v(" — the same as "),e("code",[t._v("refs/tags/<tag>:refs/tags/<tag>")])]),t._v(" "),e("li",[t._v("single "),e("code",[t._v(":")]),t._v(' — "matching" branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side')]),t._v(" "),e("li",[t._v("example — in gitconfig also "),e("code",[t._v("fetch")]),t._v(" pull request heads to "),e("code",[t._v("refs/remotes/origin/pr")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[remote "origin"]\n    url = https://github.com/libgit2/libgit2.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*\n')])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("<pathspec>")]),t._v(" — see "),e("a",{attrs:{href:"https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git gitglossary"),e("OutboundLink")],1)])])]),t._v(" "),e("h2",{attrs:{id:"git-basics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-basics"}},[t._v("#")]),t._v(" Git Basics")]),t._v(" "),e("h3",{attrs:{id:"getting-and-creating-projects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getting-and-creating-projects"}},[t._v("#")]),t._v(" Getting and Creating Projects")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git init")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-q "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --quiet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--bare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--template"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("template_directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--separate-git-dir "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("git dir"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("permissions"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("directory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git clone")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("-o <name>")]),t._v(", "),e("code",[t._v("--origin <name>")])])])])]),t._v(" "),e("h3",{attrs:{id:"basic-snapshotting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-snapshotting"}},[t._v("#")]),t._v(" Basic Snapshotting")]),t._v(" "),e("h4",{attrs:{id:"add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git add")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n      [--chmod=(+|-)x] [--] [<pathspec>…​]\n")])])]),e("ul",[e("li",[e("code",[t._v("-i")]),t._v(", "),e("code",[t._v("--interactive")]),t._v(" — interactive mode, see docs")]),t._v(" "),e("li",[t._v("stage part of the file\n"),e("ul",[e("li",[e("code",[t._v("-e")]),t._v(", "),e("code",[t._v("--edit")]),t._v(" — edit diff")]),t._v(" "),e("li",[e("code",[t._v("-p")]),t._v(", "),e("code",[t._v("--patch")]),t._v(" — "),e("code",[t._v("-i")]),t._v(" and "),e("code",[t._v("patch")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git commit")])]),t._v(" "),e("ul",[e("li",[t._v("commit message\n"),e("ul",[e("li",[e("code",[t._v("-m <msg>")]),t._v(", "),e("code",[t._v("--message=<msg>")]),t._v(" "),e("ul",[e("li",[t._v("without "),e("code",[t._v("-m")]),t._v(" to open an editor for commit message")]),t._v(" "),e("li",[e("code",[t._v("-v")]),t._v(" for verbose reminder")])])]),t._v(" "),e("li",[e("code",[t._v("-C <commit>")]),t._v(", "),e("code",[t._v("--reuse-message=<commit>")])]),t._v(" "),e("li",[e("code",[t._v("-c <commit>")]),t._v(", "),e("code",[t._v("--reedit-message=<commit>")])]),t._v(" "),e("li",[e("code",[t._v("-F <file>")]),t._v(", "),e("code",[t._v("--file=<file>")])])])]),t._v(" "),e("li",[e("code",[t._v("-a")]),t._v(", "),e("code",[t._v("--all")]),t._v(" — automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected")]),t._v(" "),e("li",[e("code",[t._v("--amend")]),t._v(" — Replace the tip of the current branch by creating a new commit\n"),e("ul",[e("li",[t._v("has the same parents and author as the current one — the "),e("code",[t._v("--reset-author")]),t._v(" option can countermand this")]),t._v(" "),e("li",[e("code",[t._v("--no-edit")]),t._v(" — keep commit message")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular Team Git Commit Guidelines"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git tag")])]),t._v(" "),e("ul",[e("li",[t._v("list tags"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--contains "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--no-contains "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--points-at "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--column"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --no-column"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--create-reflog"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--sort"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--format"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("format"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("merged "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),e("li",[t._v("create lightweight tags — pointers to specific "),e("code",[t._v("<object>")]),t._v("s, meant for private or temporary object labels"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),e("li",[t._v("create annotated tags — stored as full "),e("code",[t._v("<object>")]),t._v(", meant for release, containing a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("keyid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-F")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("-a")]),t._v(" "),e("code",[t._v("--annotate")]),t._v(" — Make an unsigned, annotated tag object")]),t._v(" "),e("li",[e("code",[t._v("<tagname>")]),t._v(" — "),e("code",[t._v("<refname>")])])])]),t._v(" "),e("li",[t._v("push tags — have to explicitly push tags to a shared server after creation or deletion\n"),e("ul",[e("li",[e("code",[t._v("git push <repository> <refspec>…​")])]),t._v(" "),e("li",[e("code",[t._v("git push <repository> --tags")])]),t._v(" "),e("li",[e("code",[t._v("git push origin --delete <tagname>")])])])]),t._v(" "),e("li",[t._v("delete"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​\n")])])])])])])]),t._v(" "),e("h4",{attrs:{id:"deletion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deletion"}},[t._v("#")]),t._v(" Deletion")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git rm")]),t._v(" — Remove files from the working tree and from the index")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] <file>…​\n")])])]),e("ul",[e("li",[e("code",[t._v("--cached")]),t._v(" — Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git reset")]),t._v(" — Reset current HEAD to the specified state")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset [-q] [<tree-ish>] [--] <paths>…​\ngit reset (--patch | -p) [<tree-ish>] [--] [<paths>…​]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n")])])]),e("ul",[e("li",[t._v("mode\n"),e("ul",[e("li",[e("code",[t._v("--soft")]),t._v(" — only move "),e("code",[t._v("HEAD")])]),t._v(" "),e("li",[e("code",[t._v("--mixed")]),t._v(" — also reset index")]),t._v(" "),e("li",[e("code",[t._v("--hard")]),t._v(" — also reset the working tree")])])]),t._v(" "),e("li",[t._v("with file path — "),e("code",[t._v("git restore")])]),t._v(" "),e("li",[e("code",[t._v("git revert")]),t._v(" — Revert some existing commits")])])])]),t._v(" "),e("h4",{attrs:{id:"get-info"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-info"}},[t._v("#")]),t._v(" Get Info")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git status")]),t._v(" — Show the working tree status")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pathspec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("statuses\n"),e("ul",[e("li",[t._v("' ' = unmodified")]),t._v(" "),e("li",[t._v("M = modified")]),t._v(" "),e("li",[t._v("A = added")]),t._v(" "),e("li",[t._v("D = deleted")]),t._v(" "),e("li",[t._v("R = renamed")]),t._v(" "),e("li",[t._v("C = copied")]),t._v(" "),e("li",[t._v("U = updated but unmerged")])])]),t._v(" "),e("li",[e("code",[t._v("-s")]),t._v(", "),e("code",[t._v("--short")]),t._v(" — Give the output in the short-format."),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("X          Y     Meaning\n-------------------------------------------------\n         [AMD]   not updated\nM        [ MD]   updated in index\nA        [ MD]   added to index\nD                deleted from index\nR        [ MD]   renamed in index\nC        [ MD]   copied in index\n[MARC]           index and work tree matches\n[ MARC]     M    work tree changed since index\n[ MARC]     D    deleted in work tree\n[ D]        R    renamed in work tree\n[ D]        C    copied in work tree\n-------------------------------------------------\nD           D    unmerged, both deleted\nA           U    unmerged, added by us\nU           D    unmerged, deleted by them\nU           A    unmerged, added by them\nD           U    unmerged, deleted by us\nA           A    unmerged, both added\nU           U    unmerged, both modified\n-------------------------------------------------\n?           ?    untracked\n!           !    ignored\n-------------------------------------------------\n")])])]),e("ul",[e("li",[t._v("X shows the status of the index, and Y shows the status of the work tree")])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff")]),t._v(" — Show changes between commits, commit and working tree, etc")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --staged is a synonym of --cached")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("blob"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("blob"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --no-index "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("git difftool")]),t._v(" — "),e("code",[t._v("git diff")]),t._v(" in an external tool\n"),e("ul",[e("li",[e("code",[t._v("git difftool --tool-help")]),t._v(" to see available tools")])])])])])]),t._v(" "),e("h2",{attrs:{id:"branching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#branching"}},[t._v("#")]),t._v(" Branching")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git checkout")]),t._v(" — Switch branches or restore working tree files")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout [-q] [-f] [-m] [<branch>]\n")])])]),e("ul",[e("li",[t._v("options\n"),e("ul",[e("li",[e("code",[t._v("-m")]),t._v(", "),e("code",[t._v("--merge")]),t._v(" — error when checking out not indexed changes, use this option to try to merge, staged changes may be lost")]),t._v(" "),e("li",[e("code",[t._v("-t")]),t._v(", "),e("code",[t._v("--track")]),t._v(" — see "),e("code",[t._v("git branch")])])])]),t._v(" "),e("li",[e("code",[t._v("DETACHED HEAD")]),t._v(" — new commit won’t belong to any branch and will be unreachable, except by the exact commit hash"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout [-q] [-f] [-m] --detach [<branch>]\ngit checkout [-q] [-f] [-m] [--detach] <commit>\n")])])])]),t._v(" "),e("li",[e("code",[t._v("-b")]),t._v(" — check out and create new branch"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -b <branch> --track <remote>/<branch>\n")])])]),e("ul",[e("li",[e("code",[t._v("-B")]),t._v(" — "),e("code",[t._v("-f -b")]),t._v(", reset to "),e("code",[t._v("<start_point>")]),t._v(" if already exists")]),t._v(" "),e("li",[e("code",[t._v("--orphan")]),t._v(" — the first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits")])])]),t._v(" "),e("li",[t._v("restore files"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>…​\ngit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]\n")])])]),e("ul",[e("li",[e("code",[t._v("<tree-ish>")]),t._v(" — defaults to index, with which overwrite both the index and the working tree")])])]),t._v(" "),e("li",[e("code",[t._v("git switch")]),t._v(" — branch switching, specialized "),e("code",[t._v("git checkout")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git switch [<options>] [--no-guess] <branch>\ngit switch [<options>] --detach [<start-point>]\ngit switch [<options>] (-c|-C) <new-branch> [<start-point>]\ngit switch [<options>] --orphan <new-branch>\n")])])])]),t._v(" "),e("li",[e("code",[t._v("git restore")]),t._v(" — reset files to certain revisions, specialized "),e("code",[t._v("git checkout")]),t._v(", see "),e("a",{attrs:{href:"#basic-snapshotting"}},[t._v("Basic Snapshotting")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch")]),t._v(" — List, create, or delete branches")]),t._v(" "),e("ul",[e("li",[t._v("create branch and checkout — "),e("code",[t._v("git checkout -b")]),t._v(", see "),e("code",[t._v("git checkout")])]),t._v(" "),e("li",[t._v("delete"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch (-d | -D) [-r] <branchname>…​\n")])])]),e("ul",[e("li",[e("code",[t._v("-d")]),t._v(", "),e("code",[t._v("--delete")])]),t._v(" "),e("li",[e("code",[t._v("-D")]),t._v(" — "),e("code",[t._v("--delete --force")])])])]),t._v(" "),e("li",[t._v("rename or copy"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch (-m | -M) [<oldbranch>] <newbranch>\ngit branch (-c | -C) [<oldbranch>] <newbranch>\n")])])]),e("ul",[e("li",[e("code",[t._v("-m")]),t._v(" "),e("code",[t._v("--move")]),t._v(" — move/rename a branch and the corresponding reflog")]),t._v(" "),e("li",[e("code",[t._v("-M")]),t._v(" — shortcut for "),e("code",[t._v("--move --force")])]),t._v(" "),e("li",[e("code",[t._v("-c")]),t._v(" "),e("code",[t._v("--copy")]),t._v(", "),e("code",[t._v("-C")]),t._v(" — similar to "),e("code",[t._v("-m")]),t._v(" but copy")])])]),t._v(" "),e("li",[t._v("list"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -vv\n")])])]),e("ul",[e("li",[e("code",[t._v("[(--merged | --no-merged) [<commit>]]")])])])]),t._v(" "),e("li",[t._v("remote related — see "),e("a",{attrs:{href:"#remote"}},[t._v("Remote")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git worktree")]),t._v(" — Manage multiple working trees")])])]),t._v(" "),e("h3",{attrs:{id:"merge-patching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merge-patching"}},[t._v("#")]),t._v(" Merge & Patching")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git merge")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n    [--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n    [--[no-]allow-unrelated-histories]\n    [--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>…​]\n")])])]),e("ul",[e("li",[t._v("merge commit — more than one parent\n"),e("ul",[e("li",[e("code",[t._v("--commit")])]),t._v(" "),e("li",[e("code",[t._v("--no-commit")]),t._v(" — stop just before creating a merge commit, use in tandem with "),e("code",[t._v("--no-ff")]),t._v(" if necessary")])])]),t._v(" "),e("li",[e("code",[t._v("--squash")]),t._v(" — as if a real merge happened, except for the merge information, fail if used with "),e("code",[t._v("--commit")]),t._v(" "),e("ul",[e("li",[t._v("move the "),e("code",[t._v("HEAD")]),t._v(", or record "),e("code",[t._v("$GIT_DIR/MERGE_HEAD")]),t._v(" causing the next "),e("code",[t._v("git commit")]),t._v(" command to create a merge commit")])])]),t._v(" "),e("li",[t._v("fast forward merge — only move the pointer, no merge commit\n"),e("ul",[e("li",[e("code",[t._v("--ff")]),t._v(" — default, fast forward whenever possible")]),t._v(" "),e("li",[e("code",[t._v("--no-ff")]),t._v(" — merge commit in all cases")]),t._v(" "),e("li",[e("code",[t._v("--ff-only")]),t._v(" — fast forward or no merge")])])]),t._v(" "),e("li",[e("code",[t._v("--allow-unrelated-histories")]),t._v(" — can merge another repo")]),t._v(" "),e("li",[t._v("conflict — also for "),e("code",[t._v("git rebase")]),t._v(", "),e("code",[t._v("git cherry-pick")]),t._v(" etc."),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git merge (--continue | --abort | --quit)\n")])])]),e("ul",[e("li",[t._v("resolve conflict\n"),e("ul",[e("li",[t._v("inspect conflict — "),e("code",[t._v("git status")])]),t._v(" "),e("li",[t._v("mark conflict resolved — stage conflict file, or "),e("code",[t._v("git rm")])]),t._v(" "),e("li",[e("code",[t._v("git mergetool")]),t._v(" — Run merge conflict resolution tools to resolve merge conflicts")]),t._v(" "),e("li",[t._v("after resolved — "),e("code",[t._v("git commit")]),t._v(" or "),e("code",[t._v("git merge --continue")]),t._v("; the latter command checks whether there is a (interrupted) merge in progress before calling "),e("code",[t._v("git commit")])])])]),t._v(" "),e("li",[t._v("stop merge"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git merge (--abort | --quit)\n")])])]),e("ul",[e("li",[e("code",[t._v("--abort")]),t._v(" — abort and try to reconstruct the pre-merge state")]),t._v(" "),e("li",[e("code",[t._v("--quit")]),t._v(" — forget the current merge and leave index and working tree as-is")])])])])]),t._v(" "),e("li",[e("code",[t._v("git rerere")]),t._v(" — Reuse recorded resolution of conflicted merges\n"),e("ul",[e("li",[t._v("config — "),e("code",[t._v("rerere.enabled")])])])]),t._v(" "),e("li",[e("code",[t._v("git merge-file")]),t._v(" — incorporates all changes that lead from the "),e("code",[t._v("<base-file>")]),t._v(" to "),e("code",[t._v("<other-file>")]),t._v(" into "),e("code",[t._v("<current-file>")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git rebase")]),t._v(" — Reapply commits on top of another base tip")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n")])])]),e("ul",[e("li",[e("code",[t._v("[<upstream> [<branch>]]")]),t._v(" — make "),e("code",[t._v("<branch>")]),t._v(" based on "),e("code",[t._v("<upstream>")]),t._v(", by applying commits "),e("code",[t._v("<upstream>..<branch>")]),t._v(" to "),e("code",[t._v("<upstream>")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("<upstream>")]),t._v(" — Upstream branch to compare against, defaults to corresponding configurations")]),t._v(" "),e("li",[e("code",[t._v("<branch>")]),t._v(" — defaults to "),e("code",[t._v("HEAD")]),t._v(", "),e("code",[t._v("git switch")]),t._v(" if not already on")]),t._v(" "),e("li",[t._v("duplicates — any patch already accepted upstream with a different commit message or timestamp will be skipped")])])]),t._v(" "),e("li",[e("code",[t._v("--onto <newbase>")]),t._v(" — start point to base on, defaults to "),e("code",[t._v("<upstream>")]),t._v(" if omitted; apply commits "),e("code",[t._v("<upstream>..HEAD")]),t._v(" to "),e("code",[t._v("<newbase>")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("A...B")]),t._v(" as "),e("code",[t._v("<newbase>")]),t._v(" — the merge base of A and B if there is exactly one merge base")])])]),t._v(" "),e("li",[e("code",[t._v("-keep-base")]),t._v(" — equivalent to "),e("code",[t._v("--onto <upstream>…​ <upstream>")]),t._v(", merge base preserved")]),t._v(" "),e("li",[e("code",[t._v("git pull --rebase")]),t._v(" — "),e("code",[t._v("git fetch")]),t._v(" and "),e("code",[t._v("git rebase <remote>")])]),t._v(" "),e("li",[t._v("conflict"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n")])])])]),t._v(" "),e("li",[e("code",[t._v("-i")]),t._v(", "),e("code",[t._v("--interactive")]),t._v(" — specific action for each commit"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# . create a merge commit using the original merge commit's\n# . message (or the oneline, if no original merge commit was\n# . specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git cherry-pick")]),t._v(" — Apply the changes introduced by some existing commits")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff] [-S[<keyid>]] <commit>…​\n")])])]),e("ul",[e("li",[t._v("conflict"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git cherry-pick (--continue | --skip | --abort | --quit)\n")])])])]),t._v(" "),e("li",[e("code",[t._v("--no-commit")]),t._v(" — to working tree")]),t._v(" "),e("li",[t._v("example — apply commits to the working tree"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> [8=master]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick --no-commit "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git filter-branch")]),t._v(" — Rewrite branches, the nuclear option, run test if possible")]),t._v(" "),e("ul",[e("li",[t._v("example — remove a file from entire history"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\n")])])])]),t._v(" "),e("li",[t._v("example — make a subdirectory the new project root"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git filter-branch --subdirectory-filter trunk HEAD\n")])])])]),t._v(" "),e("li",[t._v("example — change email of someone"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git filter-branch --commit-filter \'\n    if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];\n    then\n        GIT_AUTHOR_NAME="Scott Chacon";\n        GIT_AUTHOR_EMAIL="schacon@example.com";\n        git commit-tree "$@";\n    else\n        git commit-tree "$@";\n    fi\' HEAD\n')])])])])])])]),t._v(" "),e("h2",{attrs:{id:"remote"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote"}},[t._v("#")]),t._v(" Remote")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git remote")]),t._v(" — Manage set of tracked repositories")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# show")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" show "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# edit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("master"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("tags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--mirror"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("push"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("old"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote remove "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-head "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--auto")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--delete")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-branches "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--add"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote get-url "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--all"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("newurl"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("oldurl"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("newurl"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--delete")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --dry-run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" update "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --prune"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("origin")]),t._v(" — "),e("code",[t._v("git clone")]),t._v(" command implicitly adds the "),e("code",[t._v("origin")]),t._v(" remote")]),t._v(" "),e("li",[t._v("remote branches: List references in a remote repository"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git ls-remote [<repository> [<refs>…​]]\ngit remote show [<repository> [<refs>…​]]\n")])])]),e("ul",[e("li",[t._v("pull requests — references as "),e("code",[t._v("refs/pull/<num>/head")]),t._v(" and "),e("code",[t._v("refs/pull/<num>/merge")]),t._v(" (potential merge commit), not "),e("code",[t._v("fetch")]),t._v("ed by default")])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git fetch")]),t._v(" — Download objects and refs from another repository, not merged")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("refspec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--multiple")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("updates "),e("code",[t._v(".git/FETCH_HEAD")])]),t._v(" "),e("li",[t._v("fetch a pull request"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch origin refs/pull/958/head\n")])])])]),t._v(" "),e("li",[t._v("gitconfig for auto fetch pull request heads"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[remote "origin"]\n    url = https://github.com/libgit2/libgit2.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*\n')])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git pull")]),t._v(" — fetch and merge a tracking branch")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull [<options>] [<repository> [<refspec>…​]]\n")])])]),e("ul",[e("li",[t._v("tracking branch — local branches that have a direct relationship to a remote branch\n"),e("ul",[e("li",[e("code",[t._v("checkout -b")]),t._v(" from a remote-tracking branch automatically makes it tracking branch — "),e("code",[t._v("branch.autoSetupMerge")])]),t._v(" "),e("li",[t._v("upstream branch — the remote branch tracked")])])]),t._v(" "),e("li",[e("code",[t._v("--rebase")]),t._v(" — see "),e("code",[t._v("git rebase")]),t._v(", can be made default by configuration "),e("code",[t._v("pull.rebase")])]),t._v(" "),e("li",[t._v("merge pull requests locally"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull <url> <branch>\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch")]),t._v(" — see also "),e("a",{attrs:{href:"#branching"}},[t._v("Branching")])]),t._v(" "),e("ul",[e("li",[t._v("track — "),e("code",[t._v("-t")]),t._v(", "),e("code",[t._v("--track")]),t._v(", set up "),e("code",[t._v("branch.<name>.remote")]),t._v(" and "),e("code",[t._v("branch.<name>.merge")]),t._v(" configuration entries"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch [--track | --no-track] [-f] <branchname> [<start-point>]\n")])])]),e("ul",[e("li",[e("code",[t._v("--no-track")]),t._v(" — no set up even "),e("code",[t._v("branch.autoSetupMerge")]),t._v(" is true")])])]),t._v(" "),e("li",[t._v("set upstream — "),e("code",[t._v("--set-upstream-to")]),t._v(", "),e("code",[t._v("-u")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git push")]),t._v(" — Update remote refs along with associated objects")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--all "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--mirror")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --tags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--follow-tags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--atomic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --dry-run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--receive-pack"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("git-receive-pack"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--repo"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --force"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-d "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --delete"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--prune"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-u "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --set-upstream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-o "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --push-option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("signed"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--signed"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("if-asked"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--force-with-lease"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("refname"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("expect"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--no-verify"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("refspec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("-d")]),t._v(", "),e("code",[t._v("--delete")]),t._v(" — All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon.")]),t._v(" "),e("li",[e("code",[t._v("-u")]),t._v(", "),e("code",[t._v("--set-upstream")])])])])]),t._v(" "),e("h2",{attrs:{id:"inspection-and-comparison"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inspection-and-comparison"}},[t._v("#")]),t._v(" Inspection and Comparison")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git status")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff")]),t._v(" — see "),e("a",{attrs:{href:"#get-info"}},[t._v("Get Info")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log")]),t._v(" — Show commit logs")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("revision range"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("commit limiting\n"),e("ul",[e("li",[e("code",[t._v("-<number>")]),t._v(", "),e("code",[t._v("-n <number>")]),t._v(", "),e("code",[t._v("--max-count=<number>")]),t._v(" — Limit the number of commits to output.")]),t._v(" "),e("li",[e("code",[t._v("--since=<date>")]),t._v(", "),e("code",[t._v("--after=<date>")])]),t._v(" "),e("li",[e("code",[t._v("--until=<date>")]),t._v(", "),e("code",[t._v("--before=<date>")])]),t._v(" "),e("li",[e("code",[t._v("--no-merges")]),t._v(" — Do not print commits with more than one parent. This is exactly the same as "),e("code",[t._v("--max-parents=1")])])])]),t._v(" "),e("li",[t._v("diff\n"),e("ul",[e("li",[e("code",[t._v("-p")]),t._v(", "),e("code",[t._v("-u")]),t._v(", "),e("code",[t._v("--patch")]),t._v(" — Generate patch")]),t._v(" "),e("li",[e("code",[t._v("--stat")])]),t._v(" "),e("li",[e("code",[t._v("-S<string>")]),t._v(" — Look for differences that add/delete the specified string in a file, can also be file name or directory name")]),t._v(" "),e("li",[e("code",[t._v("-G<regex>")]),t._v(" — Look for differences whose patch text contains added/removed lines that match "),e("code",[t._v("<regex>")])])])]),t._v(" "),e("li",[t._v("formatting"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%h %s"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n")])])]),e("ul",[e("li",[e("code",[t._v("--pretty[=<format>]")]),t._v(", "),e("code",[t._v("--format=<format>")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("<format>")]),t._v(" — "),e("a",{attrs:{href:"https://git-scm.com/docs/git-log#_pretty_formats",target:"_blank",rel:"noopener noreferrer"}},[t._v("git docs"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("example — log commit message"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("%B "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])])])]),t._v(" "),e("li",[e("code",[t._v("--graph")]),t._v(" — text-based graphical representation of the commit history")]),t._v(" "),e("li",[e("code",[t._v("--decorate[=short|full|auto|no]")]),t._v(" — Print out the ref names of any commits that are shown")]),t._v(" "),e("li",[e("code",[t._v("--oneline")]),t._v(" — "),e("code",[t._v("--pretty=oneline --abbrev-commit")])]),t._v(" "),e("li",[t._v("more")])])]),t._v(" "),e("li",[e("code",[t._v("git shortlog")]),t._v(" — Summarize "),e("code",[t._v("git log")]),t._v(" output")]),t._v(" "),e("li",[e("code",[t._v("-g")]),t._v(" "),e("code",[t._v("--walk-reflogs")]),t._v(" — Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones")]),t._v(" "),e("li",[t._v("find at which commit a file is deleted"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log --full-history -1 -- [file path]\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git reflog")]),t._v(" — the tips of branches and other references were updated in the local repository")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git reflog show")]),t._v(" — default, same options as "),e("code",[t._v("git log")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git show")]),t._v(" — show one or more objects (blobs, trees, tags and commits)")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("show\n"),e("ul",[e("li",[t._v("For commits — shows the log message and textual diff\n"),e("ul",[e("li",[t._v("merge commit — in a special format as produced by "),e("code",[t._v("git diff-tree --cc")]),t._v(".")])])]),t._v(" "),e("li",[t._v("For tags — it shows the tag message and the referenced objects.")]),t._v(" "),e("li",[t._v("For trees — it shows the names (equivalent to "),e("code",[t._v("git ls-tree")]),t._v(" with "),e("code",[t._v("--name-only")]),t._v(").")]),t._v(" "),e("li",[t._v("For plain blobs — it shows the plain contents.")])])]),t._v(" "),e("li",[t._v("options — "),e("code",[t._v("git diff-tree")]),t._v(" options to control how the changes the commit introduces are shown.")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git describe")]),t._v(" — Give an object a human readable name based on an available ref, require annotated tags")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("--tags")]),t._v(" — also lightweight tags")])])])]),t._v(" "),e("h2",{attrs:{id:"utility"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#utility"}},[t._v("#")]),t._v(" Utility")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git check-ref-format")]),t._v(" — ensures that a reference name "),e("code",[t._v("<refname>")]),t._v(" is well formed")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" check-ref-format "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--normalize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("allow-onelevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--refspec-pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("refname"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" check-ref-format "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--branch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchname-shorthand"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git rev-list")]),t._v(" — lists commit objects in reverse chronological order, with pretty formats, underlying command for other commands")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-list "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​ "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("commit limiting options\n"),e("ul",[e("li",[e("code",[t._v("--all")]),t._v(" — as if all the refs in "),e("code",[t._v("refs/")]),t._v(", along with "),e("code",[t._v("HEAD")]),t._v(", are listed on the command line as "),e("code",[t._v("<commit>")])]),t._v(" "),e("li",[e("code",[t._v("--branches[=<pattern>]")]),t._v(" — all the refs in "),e("code",[t._v("refs/heads")]),t._v(" as "),e("code",[t._v("<commit>")]),t._v("; if "),e("code",[t._v("<pattern>")]),t._v(" given but no "),e("code",[t._v("?")]),t._v(", "),e("code",[t._v("*")]),t._v(" or "),e("code",[t._v("[]")]),t._v(", "),e("code",[t._v("/*")]),t._v(" at the end is implied")])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git rev-parse")]),t._v(" — pick out and massage parameters??")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-parse "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…​\n")])])]),e("ul",[e("li",[t._v("options\n"),e("ul",[e("li",[t._v("mode")]),t._v(" "),e("li",[t._v("filtering")]),t._v(" "),e("li",[t._v("for output\n"),e("ul",[e("li",[e("code",[t._v("--symbolic")])]),t._v(" "),e("li",[e("code",[t._v("--symbolic-full-name")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-parse --symbolic-full-name @"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nrefs/remotes/myfork/mybranch\n")])])])])])]),t._v(" "),e("li",[t._v("more")])])]),t._v(" "),e("li",[t._v("example"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n")])])])])])])]),t._v(" "),e("h3",{attrs:{id:"content-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#content-search"}},[t._v("#")]),t._v(" Content Search")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git grep")])]),t._v(" "),e("ul",[e("li",[t._v("search commit contents, see "),e("code",[t._v("git rev-list")]),t._v(" above, from "),e("a",{attrs:{href:"https://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stack Overflow"),e("OutboundLink")],1),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-list "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("expression"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git bisect")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git blame")]),t._v(" — Show what revision and author last modified each line of a file")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("-S <string>")])]),t._v(" "),e("li",[e("code",[t._v("-G <regex>")])]),t._v(" "),e("li",[e("code",[t._v("-L <start>,<end>:<file>")])]),t._v(" "),e("li",[e("code",[t._v("-L :<funcname>:<file>")])])])])]),t._v(" "),e("h3",{attrs:{id:"administration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#administration"}},[t._v("#")]),t._v(" Administration")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("git archive")]),t._v(" — Create an archive of files from a named tree")]),t._v(" "),e("ul",[e("li",[t._v("example"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" archive master "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--prefix")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'project/'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zip "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" describe master"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(".zip\n")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git bundle")]),t._v(" — "),e("code",[t._v("git archive")]),t._v(" but with "),e("code",[t._v(".git")]),t._v(" folder")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git stash")])]),t._v(" "),e("ul",[e("li",[t._v("location — the latest stored in "),e("code",[t._v("refs/stash")]),t._v(", other stored in the reflog, "),e("code",[t._v("stash@{<n>}")]),t._v(", "),e("code",[t._v("stash@{<date>}")])]),t._v(" "),e("li",[e("code",[t._v("--index")]),t._v(" — also restore the index")]),t._v(" "),e("li",[e("code",[t._v("-k")]),t._v(" "),e("code",[t._v("--keep-index")]),t._v(", "),e("code",[t._v("--no-keep-index")]),t._v(" — keep the index intact")]),t._v(" "),e("li",[e("code",[t._v("-u")]),t._v(" "),e("code",[t._v("--include-untracked")])]),t._v(" "),e("li",[e("code",[t._v("-a")]),t._v(" "),e("code",[t._v("--all")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git clean")]),t._v(" — Remove untracked files from the working tree")]),t._v(" "),e("ul",[e("li",[t._v("backup before clean — "),e("code",[t._v("git stash -a")])])])])]),t._v(" "),e("h3",{attrs:{id:"submodules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#submodules"}},[t._v("#")]),t._v(" Submodules")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git submodule")]),t._v(" "),e("ul",[e("li",[t._v("clone a project with submodules\n"),e("ul",[e("li",[t._v("clone one by one"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cd sub_name\ngit submodule init\ngit submodule update\n")])])])]),t._v(" "),e("li",[t._v("clone recursively"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone --recurse-submodules\n")])])])])])]),t._v(" "),e("li",[t._v("more")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);