(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{232:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-basics"}},[t._v("#")]),t._v(" Java Basics")]),t._v(" "),a("h2",{attrs:{id:"docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docs"}},[t._v("#")]),t._v(" Docs")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("docs — "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JDK 11 Documentation - Home"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("oracle JDK 1.8"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("CLI tools\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.oracle.com/javase/9/jshell/toc.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("jshell"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/toc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Platform, Standard Edition Tools Reference for Oracle JDK on Solaris, Linux, and OS X, Release 8"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Platform, Standard Edition Tools Reference, Release 11"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/gctuning/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide, Release 11"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://download.oracle.com/otndocs/jcp/jdbc-4_3-mrel3-spec/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSR-000221 JDBC API 4.3 Maintenance Release 3"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://docs.oracle.com/javase/specs",target:"_blank",rel:"noopener noreferrer"}},[t._v("specification"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("The Java® Language Specification")]),t._v(" "),a("li",[t._v("The Java® Virtual Machine Specification")])])])])]),t._v(" "),a("li",[a("p",[t._v("source")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/AdoptOpenJDK/openjdk-jdk8u",target:"_blank",rel:"noopener noreferrer"}},[t._v("AdoptOpenJDK/openjdk-jdk8u: JDK8u mirror from mercurial"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://hg.openjdk.java.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenJDK Mercurial Repositories"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://hg.openjdk.java.net/jdk8u",target:"_blank",rel:"noopener noreferrer"}},[t._v("jdk8u"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jdk8u/jdk8u/hotspot: log"),a("OutboundLink")],1)])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/openjdk/jdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("openjdk/jdk: JDK main-line development"),a("OutboundLink")],1)])])])]),t._v(" "),a("h2",{attrs:{id:"cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cli"}},[t._v("#")]),t._v(" CLI")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("javac")]),t._v(" — compile, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/javac.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("javac")]),t._v(" docs"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("timestamps aware — auto compile dependencies and recompile when source file updated according to timestamps")]),t._v(" "),a("li",[t._v("extra options — "),a("code",[t._v("--help-extra")]),t._v(", "),a("code",[t._v("-X")])]),t._v(" "),a("li",[t._v("warnings — "),a("code",[t._v("-Xlint:<key>(,<key>)*")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-Xlint")]),t._v(" or "),a("code",[t._v("-Xlint:all")]),t._v(" — all checks")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:deprecation")]),t._v(" — same as "),a("code",[t._v("-deprecation")]),t._v(", checks for deprecated methods")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:fallthrough")]),t._v(" — checks for missing "),a("code",[t._v("break")]),t._v(" statements in "),a("code",[t._v("switch")]),t._v(" statements")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:finally")]),t._v(" — warns about finally clauses that cannot complete normally")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:none")]),t._v(" — carries out none of the checks")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:path")]),t._v(" — checks that all directories on the class path and source path exist")]),t._v(" "),a("li",[a("code",[t._v("-Xlint:serial")]),t._v(" — warns about serializable classes without "),a("code",[t._v("serialVersionUID")])]),t._v(" "),a("li",[a("code",[t._v("-Xlint:unchecked")]),t._v(" — warns of unsafe conversions between generic and raw types")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java")]),t._v(" — execute, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/java.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("java")]),t._v(" docs"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("synopsis"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("java [options] <mainclass> [args...]\n    (to execute a class)\njava [options] -m <module>[/<mainclass>] [args...]\njava [options] --module <module>[/<mainclass>] [args...]\n    (to execute the main class in a module)\n")])])]),a("ul",[a("li",[t._v("args in "),a("code",[t._v("public static void main(String[] args)")]),t._v(" — class name is not included"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" Message "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" cruel world\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# args: ["-g", "cruel", "world"]')]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("jar — "),a("code",[t._v("java -jar MyProgram.jar")]),t._v(", see "),a("a",{attrs:{href:"#jar"}},[t._v("Jar")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("java [options] -jar <jarfile> [args...]\n")])])])]),t._v(" "),a("li",[t._v("single source file program — compile and run, no "),a("code",[t._v(".class")]),t._v(" file generated"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("java [options] <sourcefile> [args]\n")])])])])])]),t._v(" "),a("li",[a("code",[t._v("-cp")]),t._v(" or "),a("code",[t._v("-classpath")]),t._v(" — specify the class path"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-classpath")]),t._v(" /home/user/classdir:.:/home/user/archives/archive.jar MyProg\n")])])])]),t._v(" "),a("li",[a("code",[t._v("-verbose")]),t._v(" — watch class loading")]),t._v(" "),a("li",[a("code",[t._v("java -X")]),t._v(" — a listing of all nonstandard options\n"),a("ul",[a("li",[a("code",[t._v("-Xprof")]),t._v(" — profiling, support was removed in JDK 10")]),t._v(" "),a("li",[a("code",[t._v("-XshowSettings:properties")]),t._v(", "),a("code",[t._v("-XshowSettings:locale")])]),t._v(" "),a("li",[a("code",[t._v("-Xverify:none")]),t._v(", or "),a("code",[t._v("-noverify")]),t._v(" — turn off verification when loading classes")]),t._v(" "),a("li",[t._v("memory related — see "),a("RouterLink",{attrs:{to:"/backend/java/JVM.html#memory"}},[t._v("JVM")])],1)])]),t._v(" "),a("li",[a("code",[t._v("-XX")]),t._v(" — "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/troubleshoot/command-line-options1.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("-XX")]),t._v(" docs"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/gctuning/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GC Tuning Guide, Release 11"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v("-XX:+PrintFlagsFinal")]),t._v(" — print options, "),a("code",[t._v("java -XX:+PrintFlagsFinal --version")])]),t._v(" "),a("li",[a("code",[t._v("-XX:+PrintCommandLineFlags")]),t._v(" — print flags, can check used GC configurations")])])]),t._v(" "),a("li",[a("code",[t._v("-ea")]),t._v(", enable and disable assertion — see "),a("a",{attrs:{href:"#assertion"}},[t._v("Assertion")])]),t._v(" "),a("li",[a("code",[t._v("-D")]),t._v(", system properties — "),a("code",[t._v("System::getProperty")]),t._v(", "),a("code",[t._v("System::getProperties")]),t._v(" "),a("ul",[a("li",[t._v("log related — see "),a("a",{attrs:{href:"#logging"}},[t._v("Logging")]),t._v(" "),a("ul",[a("li",[t._v("log configuration file location — "),a("code",[t._v("-Djava.util.logging.config.file=configFile")])])])]),t._v(" "),a("li",[t._v("see "),a("RouterLink",{attrs:{to:"/backend/java/javaUtils.html#legacy-collections"}},[a("code",[t._v("Properties")])]),t._v(" for list of system properties")],1)])]),t._v(" "),a("li",[t._v("remote debug"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xdebug")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xrunjdwp:server")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("y,transport"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dt_socket,address"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v(",suspend"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-jar")]),t._v(" target/myapplication-0.0.1-SNAPSHOT.jar "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote debug")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("javaw")]),t._v(" — "),a("code",[t._v("java")]),t._v(" without a shell window")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("javadoc")]),t._v(" — generates HTML documentation from your source files, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/javadoc.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("javadoc")]),t._v(" docs"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("information source\n"),a("ul",[a("li",[t._v("packages")]),t._v(" "),a("li",[t._v("public classes and interfaces")]),t._v(" "),a("li",[t._v("public and protected fields")]),t._v(" "),a("li",[t._v("public and protected constructors and methods")])])]),t._v(" "),a("li",[t._v("assets directory — "),a("code",[t._v("/doc-files")]),t._v(" directory for assets")]),t._v(" "),a("li",[t._v("syntax\n"),a("ul",[a("li",[a("code",[t._v("/** ... */")])]),t._v(" "),a("li",[t._v("tags "),a("code",[t._v("@")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@param variable description")])]),t._v(" "),a("li",[a("code",[t._v("@return description")])]),t._v(" "),a("li",[a("code",[t._v("@throws class description")])]),t._v(" "),a("li",[t._v("more")])])]),t._v(" "),a("li",[t._v("HTML tags\n"),a("ul",[a("li",[t._v("use "),a("code",[t._v("{@code ... }")]),t._v(" instead of "),a("code",[t._v("<code>...</code>")]),t._v(" to cope with escaping of "),a("code",[t._v("^")])])])])])]),t._v(" "),a("li",[t._v("example"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Raises the salary of an employee.\n * @param byPercent the percentage by which to raise the salary (e.g. 10 means 10%)\n * @return the amount of the raise\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("raiseSalary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" byPercent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("more")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("javap")]),t._v(" — print java class information, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/javap.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("javap")]),t._v(" docs"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("javap -v -p ClassName\n")])])]),a("ul",[a("li",[a("code",[t._v("-v")]),t._v(" — verbose, some options combined\n"),a("ul",[a("li",[a("code",[t._v("-c")]),t._v(" — disassemble the code, can be used to inspect if atomic")])])]),t._v(" "),a("li",[a("code",[t._v("-p")]),t._v(" "),a("code",[t._v("-private")]),t._v(" — show all classes and members")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("jshell")]),t._v(" — REPL from Java 9, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/jshell.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("jshell")]),t._v(" docs"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("monitoring and troubleshooting tools — see "),a("a",{attrs:{href:"#debugging"}},[t._v("Debugging")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("serialver")]),t._v(" — get serial version ID, "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/serialver.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("serialver")]),t._v(" docs"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("sign — "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/security-tools-and-commands.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security Tools and Commands"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("code",[t._v("keytool")]),t._v(" — signatures, certificates\n"),a("ul",[a("li",[t._v("password for cacerts — "),a("code",[t._v("changeit")])])])]),t._v(" "),a("li",[a("code",[t._v("jarsigner")]),t._v(" — add a signature to a (jar) file")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("javah")]),t._v(" — produces a C header file from class files for "),a("code",[t._v("native")]),t._v(" methods, superseded by superior functionality in "),a("code",[t._v("javac")]),t._v(", removed since JDK 10")])])]),t._v(" "),a("h3",{attrs:{id:"jar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jar"}},[t._v("#")]),t._v(" JAR")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("jar")]),t._v(" — creates an archive for classes and resources, and can manipulate or restore individual classes or resources from an archive")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("jar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--release VERSION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-C dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/jar/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docs"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("compression — ZIP")]),t._v(" "),a("li",[t._v("similar to "),a("code",[t._v("tar")]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("jar cvf JARFileName File1 File2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])]),t._v(" "),a("li",[a("code",[t._v(".exe")]),t._v(" wrapper — Launch4J, IzPack, etc.")]),t._v(" "),a("li",[t._v("resources\n"),a("ul",[a("li",[t._v("resources finding — delegates to class loader, which remembers how to locate the class, so it can then search for the associated resource in the same location")]),t._v(" "),a("li",[a("code",[t._v("URL Class::getResource(String name)")]),t._v(", "),a("code",[t._v("InputStream Class::getResourceAsStream(String name)")])]),t._v(" "),a("li",[t._v("resource name\n"),a("ul",[a("li",[t._v("absolute — starts with "),a("code",[t._v("/")])]),t._v(" "),a("li",[t._v("relative — "),a("code",[t._v("data/text/about.txt")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("manifest")]),t._v(" "),a("div",{staticClass:"language-manifest extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Manifest-Version: 1.0\nlines describing this archive\n\nName: Woozle.class\nlines describing this file\nName: com/mycompany/mypkg/\nlines describing this package\n")])])]),a("ul",[a("li",[t._v("each jar file contains a "),a("code",[t._v("META-INF/MANIFEST.MF")]),t._v(" manifest file")]),t._v(" "),a("li",[t._v("syntax — key-value entries\n"),a("ul",[a("li",[t._v("main section — starts with "),a("code",[t._v("Manifest-Version")]),t._v(", applies to the whole JAR file")]),t._v(" "),a("li",[t._v("subsequent entries — starts with "),a("code",[t._v("Name")]),t._v(", can specify properties of named entities such as individual files, packages, or URLs")]),t._v(" "),a("li",[t._v("section delimiter — blank lines")]),t._v(" "),a("li",[t._v("file end — the file must end with a newline")])])]),t._v(" "),a("li",[t._v("edit manifest"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("jar cfm JARFileName ManifestFileName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create")]),t._v("\njar ufm MyArchive.jar manifest-additions.mf "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# update")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("specify entry point for execution\n"),a("ul",[a("li",[a("code",[t._v("jar -e")]),t._v(" option")]),t._v(" "),a("li",[a("code",[t._v("Main-Class")]),t._v(" in manifest")]),t._v(" "),a("li",[t._v("execution — "),a("code",[t._v("java -jar MyProgram.jar")])])])]),t._v(" "),a("li",[t._v("sealing — a package can have no more classes, "),a("code",[t._v("Sealed: boolean")]),t._v(", "),a("code",[t._v("false")]),t._v(" by default"),a("div",{staticClass:"language-manifest extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Name: com/mycompany/util/\nSealed: true\n")])])]),a("ul",[a("li",[t._v("global default defined in main section")])])])])])]),t._v(" "),a("h2",{attrs:{id:"philosophy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#philosophy"}},[t._v("#")]),t._v(" Philosophy")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("class based")]),t._v(" "),a("ul",[a("li",[t._v("everything inside class")])])]),t._v(" "),a("li",[a("p",[t._v("camelCase naming")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Character.isJavaIdentifierStart()")]),t._v(" and "),a("code",[t._v("Character.isJavaIdentifierPart()")])]),t._v(" "),a("li",[a("code",[t._v("$")]),t._v(" is intended for names that are generated by the Java compiler and other tools")])])]),t._v(" "),a("li",[a("p",[t._v("curly braces and semicolons")])]),t._v(" "),a("li",[a("p",[t._v("no operator overloading")])]),t._v(" "),a("li",[a("p",[t._v("no block variable shadowing — may not declare identically named variables in two nested blocks")]),t._v(" "),a("ul",[a("li",[t._v("in JS and C++ inner one shadows outer one")])])])]),t._v(" "),a("h3",{attrs:{id:"control-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-flow"}},[t._v("#")]),t._v(" Control Flow")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("switch")])]),t._v(" "),a("ul",[a("li",[t._v("A case label can be\n"),a("ul",[a("li",[t._v("primitive type expressions — a constant expression of type "),a("code",[t._v("char")]),t._v(" , "),a("code",[t._v("byte")]),t._v(" , "),a("code",[t._v("short")]),t._v(" , or "),a("code",[t._v("int")])]),t._v(" "),a("li",[a("code",[t._v("Enum")]),t._v(" — like "),a("code",[t._v("with")]),t._v(" in JS"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" sz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SMALL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no need to use Size.SMALL")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("strings — Starting with Java SE 7, a string literal, uses "),a("code",[t._v("hashCode()")]),t._v(" behind scenes")])])])])]),t._v(" "),a("li",[a("p",[t._v("labeled "),a("code",[t._v("break")]),t._v(" and "),a("code",[t._v("continue")]),t._v(" — for labeled blocks, can only jump out of a block, never into a block")])]),t._v(" "),a("li",[a("p",[t._v("iterator — "),a("code",[t._v("for (variable : collection) statement")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("collection")]),t._v(" — an array or an object of a class that implements the "),a("code",[t._v("Iterable")]),t._v(" interface")]),t._v(" "),a("li",[t._v("see "),a("RouterLink",{attrs:{to:"/backend/java/javaUtils.html#collections"}},[t._v("Collections")])],1)])]),t._v(" "),a("li",[a("p",[t._v("method")]),t._v(" "),a("ul",[a("li",[t._v("vararg parameter — "),a("code",[t._v("...")]),t._v(" "),a("ul",[a("li",[t._v("if only an array passed, then that array is used, without nesting")])])]),t._v(" "),a("li",[t._v("arity limit — JVM imposes on all methods and constructors of any kind an absolute limit of 255 stacked arguments\n"),a("ul",[a("li",[a("code",[t._v("long")]),t._v(" or "),a("code",[t._v("double")]),t._v(" argument — counts (for purposes of arity limits) as two argument slots")]),t._v(" "),a("li",[t._v("non-static methods, constructors, "),a("code",[t._v("MethodHandle::invoke")]),t._v(" — argument slot overhead")])])])])])]),t._v(" "),a("h3",{attrs:{id:"package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package"}},[t._v("#")]),t._v(" Package")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("package")]),t._v(" "),a("ul",[a("li",[t._v("package name — reversely ordered domain")]),t._v(" "),a("li",[t._v("package availability — A class can use all classes from its own package and all public classes from other packages.")]),t._v(" "),a("li",[t._v("package at runtime\n"),a("ul",[a("li",[t._v("locating classes is done by compiler — the only benefit of the "),a("code",[t._v("import")]),t._v(" statement is convenience")]),t._v(" "),a("li",[t._v("canonical name after compilation — the byte codes in class files always canonical names to refer to other classes")])])])])]),t._v(" "),a("li",[a("p",[t._v("class importation")]),t._v(" "),a("ul",[a("li",[t._v("built-in — "),a("code",[t._v("java.lang")])]),t._v(" "),a("li",[t._v("without "),a("code",[t._v("import")]),t._v(" — use canonical name")]),t._v(" "),a("li",[a("code",[t._v("import")]),t._v(" statement"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("import a class — canonical name")]),t._v(" "),a("li",[t._v("import a package — "),a("code",[t._v("*")])]),t._v(" "),a("li",[t._v("import a inner class — "),a("code",[t._v("java.util.AbstractMap.SimpleEntry")])]),t._v(" "),a("li",[t._v("solve name conflict — import the specific class, or use canonical name"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compile-time error when use `Date` class")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("static imports — the importing of static methods and fields"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import static"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import static"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token static"}},[t._v("out")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("add to package — put the name of the package at the top of a source file")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("directory — match the canonical name"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("javac com/mycompany/PayrollApp.java\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" com.mycompany.PayrollApp\n")])])])]),t._v(" "),a("li",[t._v("default package — classes belong to the default package if no "),a("code",[t._v("package")]),t._v(" statement")]),t._v(" "),a("li",[t._v("no custom "),a("code",[t._v("java.")]),t._v(' prefixed packages — disallow loading of user-defined classes whose package name starts with "'),a("code",[t._v("java.")]),t._v('"')])])]),t._v(" "),a("li",[a("p",[t._v("class path")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/home/user/classdir:.:/home/user/archives/archive.jar\nc:\\classdir;.;c:\\archives\\archive.jar\n")])])]),a("ul",[a("li",[t._v("system property — "),a("code",[t._v("java.class.path")])]),t._v(" "),a("li",[t._v("possible components"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("/home/user/classdir:.:/home/user/archives/"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - In UNIX, the `*` must be escaped to prevent shell expansion.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# c:\\classdir;.;c:\\archives\\*")]),t._v("\n")])])]),a("ul",[a("li",[t._v("base directory for the package tree")]),t._v(" "),a("li",[t._v("jar files")]),t._v(" "),a("li",[t._v("jar file directory")]),t._v(" "),a("li",[t._v("do not add runtime libary files — "),a("code",[t._v("rt.jar")]),t._v(" and the other JAR files in the "),a("code",[t._v("jre/lib")]),t._v(" and "),a("code",[t._v("jre/lib/ext")]),t._v(" directories are always searched for classes (modules from JDK 9, and no more "),a("code",[t._v("ext")]),t._v(")")])])]),t._v(" "),a("li",[t._v("used by "),a("code",[t._v("java")]),t._v(" but not "),a("code",[t._v("javac")]),t._v(" "),a("ul",[a("li",[t._v("the "),a("code",[t._v("javac")]),t._v(" compiler — always looks for files in the current directory")]),t._v(" "),a("li",[t._v("the "),a("code",[t._v("java")]),t._v(" virtual machine — launcher only looks into the class path, default class path is "),a("code",[t._v(".")])])])]),t._v(" "),a("li",[t._v("class search order\n"),a("ul",[a("li",[t._v("for "),a("code",[t._v("javac")]),t._v(" — from "),a("code",[t._v("java.lang")]),t._v(" to imports to current package")]),t._v(" "),a("li",[t._v("for "),a("code",[t._v("java")]),t._v(" — from runtime libary to the class path")])])]),t._v(" "),a("li",[t._v("set class path\n"),a("ul",[a("li",[a("code",[t._v("-cp")]),t._v(" or "),a("code",[t._v("-classpath")]),t._v(" option"),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-classpath")]),t._v(" /home/user/classdir:.:/home/user/archives/archive.jar MyProg\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# java -classpath c:\\classdir;.;c:\\archives\\archive.jar MyProg")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("the "),a("code",[t._v("CLASSPATH")]),t._v(" environment variable")])])])])])]),t._v(" "),a("h2",{attrs:{id:"fundamentals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fundamentals"}},[t._v("#")]),t._v(" Fundamentals")]),t._v(" "),a("h3",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),a("h4",{attrs:{id:"primitive-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primitive-types"}},[t._v("#")]),t._v(" primitive types")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("integer types")]),t._v(" "),a("ul",[a("li",[t._v("types\n"),a("ul",[a("li",[a("code",[t._v("byte")])]),t._v(" "),a("li",[a("code",[t._v("short")]),t._v(" — 2 bytes")]),t._v(" "),a("li",[a("code",[t._v("int")])]),t._v(" "),a("li",[a("code",[t._v("long")])])])]),t._v(" "),a("li",[t._v("number literals\n"),a("ul",[a("li",[a("code",[t._v("long")]),t._v(" — "),a("code",[t._v("l")]),t._v(" or "),a("code",[t._v("L")]),t._v(" suffix for "),a("code",[t._v("long")]),t._v(" type")]),t._v(" "),a("li",[t._v("hexadecimal, octal and binary — "),a("code",[t._v("0x")]),t._v(", "),a("code",[t._v("0")]),t._v(", "),a("code",[t._v("0b")]),t._v(" or "),a("code",[t._v("0B")])]),t._v(" "),a("li",[t._v("friendly underscores — "),a("code",[t._v("1_000_000")]),t._v(", "),a("code",[t._v("0b1111_0100_0010_0100_0000")])])])]),t._v(" "),a("li",[t._v("no "),a("code",[t._v("unsigned")])]),t._v(" "),a("li",[t._v("shift overflow bits — mod"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1l")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1l << (65 % 64)")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("float point types")]),t._v(" "),a("ul",[a("li",[t._v("types\n"),a("ul",[a("li",[a("code",[t._v("float")]),t._v(" — 4 bytes")]),t._v(" "),a("li",[a("code",[t._v("double")])])])]),t._v(" "),a("li",[t._v("number literals\n"),a("ul",[a("li",[a("code",[t._v("float")]),t._v(" — "),a("code",[t._v("f")]),t._v(" or "),a("code",[t._v("F")]),t._v(" suffix")]),t._v(" "),a("li",[a("code",[t._v("double")]),t._v(" — "),a("code",[t._v("d")]),t._v(", "),a("code",[t._v("D")]),t._v(" suffix or no suffix")]),t._v(" "),a("li",[t._v("exponent — "),a("code",[t._v("e")])]),t._v(" "),a("li",[t._v("binary exponent — "),a("code",[t._v("p")]),t._v(", e.g. "),a("code",[t._v("0x1.0p-3")]),t._v(" (2^-3)")])])]),t._v(" "),a("li",[t._v("overflows and errors\n"),a("ul",[a("li",[a("code",[t._v("Double.POSITIVE_INFINITY")]),t._v(", "),a("code",[t._v("Double.NEGATIVE_INFINITY")]),t._v(", and "),a("code",[t._v("Double.NaN")]),t._v(", also in "),a("code",[t._v("Float")])]),t._v(" "),a("li",[a("code",[t._v("Double::isNaN")]),t._v(", also in "),a("code",[t._v("Float")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("char")]),t._v(" — describes a code unit in the UTF-16 BE encoding")]),t._v(" "),a("ul",[a("li",[t._v("syntax — single quote")]),t._v(" "),a("li",[t._v("Unicode escaping, e.g. "),a("code",[t._v("\\u0fff")]),t._v(" — inside and outside quotes"),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\\u005B\\u005D args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u0022+\\u0022"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// yielding ""+""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\u000A is a newline // syntax error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// since \\u000A is replaced with a newline when the program is read")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Look inside c:\\users // syntax error")]),t._v("\n")])])]),a("ul",[a("li",[t._v("processing — Unicode escape sequences are processed before the code is parsed")]),t._v(" "),a("li",[t._v("other escapes — "),a("code",[t._v("\\b")]),t._v(", "),a("code",[t._v("\\t")]),t._v(", "),a("code",[t._v("\\n")]),t._v(", "),a("code",[t._v("\\r")])]),t._v(" "),a("li",[a("code",[t._v("native2ascii")]),t._v(" — CLI for converting the native character encoding to plain ASCII, removed in JDK 9 due to the ability to support UTF-8 based properties resource bundles")])])]),t._v(" "),a("li",[t._v("code unit — a 16-bit value\n"),a("ul",[a("li",[t._v("supplementary characters — whose code points are greater than "),a("code",[t._v("U+FFFF")]),t._v(", encoded as consecutive pairs of code units, a range of 2048 unused values of the basic multilingual plane")]),t._v(" "),a("li",[t._v("surrogates area — high-surrogates range "),a("code",[t._v("U+D800")]),t._v(" to "),a("code",[t._v("U+DBFF")]),t._v(" for the first code unit, low-surrogates range "),a("code",[t._v("U+DC00")]),t._v(" to "),a("code",[t._v("U+DFFF")]),t._v(" for the second code unit")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("boolean")])]),t._v(" "),a("ul",[a("li",[t._v("cannot convert between integers and boolean values — "),a("code",[t._v("if (x = 0)")]),t._v(" does not compile")]),t._v(" "),a("li",[t._v("stored as "),a("code",[t._v("int")])])])])]),t._v(" "),a("h5",{attrs:{id:"primitive-type-conversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primitive-type-conversion"}},[t._v("#")]),t._v(" primitive type conversion")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("conversion")]),t._v(" "),a("ul",[a("li",[t._v("legal conversion — types with less information to types with more information, but not vice versa")]),t._v(" "),a("li",[t._v("type priority — "),a("code",[t._v("double")]),t._v(" > "),a("code",[t._v("float")]),t._v(" > "),a("code",[t._v("long")]),t._v(" > "),a("code",[t._v("int")]),t._v(" > "),a("code",[t._v("char")])]),t._v(" "),a("li",[t._v("implicit conversion using operators — converted to a common type before the operation is carried out\n"),a("ul",[a("li",[t._v("example — for "),a("code",[t._v("int x")]),t._v(", "),a("code",[t._v("x += 3.5")]),t._v(" is "),a("code",[t._v("x = (int)(x + 3.5)")])])])])])]),t._v(" "),a("li",[a("p",[t._v("casts")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nx2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Math.round() return long for double, int for float")]),t._v("\n")])])]),a("ul",[a("li",[t._v("truncate when out of range — "),a("code",[t._v("(byte) 300")]),t._v(" is 44")]),t._v(" "),a("li",[t._v("not between "),a("code",[t._v("boolean")]),t._v(" and number — cannot cast between "),a("code",[t._v("boolean")]),t._v(" values and any numeric type")])])])]),t._v(" "),a("h4",{attrs:{id:"other-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-types"}},[t._v("#")]),t._v(" other types")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("enum")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SMALL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MEDIUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LARGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EXTRA_LARGE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MEDIUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s can be null")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SMALL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MEDIUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"M"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LARGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"L"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EXTRA_LARGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XL"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" abbreviation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" abbreviation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abbreviation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" abbreviation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAbbreviation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" abbreviation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("enum")]),t._v(" extends "),a("code",[t._v("Enum")]),t._v(" — "),a("code",[t._v("Size")]),t._v(" is actually a subclass of "),a("code",[t._v("Enum")]),t._v(", having exactly four instances (static field)\n"),a("ul",[a("li",[t._v("singleton — not possible to construct new objects, "),a("code",[t._v("==")]),t._v(" can be used")])])]),t._v(" "),a("li",[t._v("implicitly defined methods (i.e. added by the compiler)\n"),a("ul",[a("li",[a("code",[t._v("static E[] values()")])]),t._v(" "),a("li",[a("code",[t._v("static E valueOf(String name)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Enum")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Enum")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Enum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("String toString()")])]),t._v(" "),a("li",[a("code",[t._v("static <T extends Enum<T>> T valueOf(Class<T> enumType, String name)")])]),t._v(" "),a("li",[a("code",[t._v("int ordinal()")])]),t._v(" "),a("li",[a("code",[t._v("int compareTo(E other)")]),t._v(" — by ordinal number")])])]),t._v(" "),a("li",[a("p",[t._v("arrays")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" smallPrimes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" smallPrimes2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// anonymous array")]),t._v("\n")])])]),a("ul",[a("li",[t._v("arrays are objects — extends "),a("code",[t._v("Object")]),t._v(" and implements "),a("code",[t._v("Cloneable")]),t._v(", "),a("code",[t._v("Serializable")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("final int length")])]),t._v(" "),a("li",[a("code",[t._v("T[] clone()")])]),t._v(" "),a("li",[a("code",[t._v("Object")]),t._v(" methods")])])]),t._v(" "),a("li",[t._v("initialization — zero, "),a("code",[t._v("false")]),t._v(", or "),a("code",[t._v("null")])]),t._v(" "),a("li",[t._v("two dimensional"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" balances"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbalances "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NYEARS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NRATES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" magicSquare "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("ragged"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" odds "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NMAX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NMAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    odds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"classes-and-modifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes-and-modifiers"}},[t._v("#")]),t._v(" Classes and Modifiers")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("public class")])]),t._v(" "),a("ul",[a("li",[t._v("filename and class name — the name of the file must match the name of the "),a("code",[t._v("public")]),t._v(" class")]),t._v(" "),a("li",[t._v("unique in a file — can only have one "),a("code",[t._v("public")]),t._v(" class in a source file")]),t._v(" "),a("li",[t._v("when run "),a("code",[t._v("java ClassName")]),t._v(" in CLI, the "),a("code",[t._v("main")]),t._v(" method in "),a("code",[t._v("ClassName")]),t._v(" is run")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("class")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("this")]),t._v(" "),a("ul",[a("li",[t._v("field variable shadowing — "),a("code",[t._v("this.")]),t._v(" is optional, local variables can shadow instance fields")]),t._v(" "),a("li",[t._v("implicit parameter — implicit parameter "),a("code",[t._v("this")]),t._v(" does not appear in the method declaration\n"),a("ul",[a("li",[t._v("can be explicitly declared as the first parameter, usually for annotations")])])]),t._v(" "),a("li",[t._v("as constructor — constructor call in the form "),a("code",[t._v("this(...)")]),t._v(" must be the first statement in a constructor")])])]),t._v(" "),a("li",[t._v("initialization\n"),a("ul",[a("li",[t._v("implicit field initialization — fields automatically set to a default zero")]),t._v(" "),a("li",[t._v("explicit field initialization — initialize with constant value or an expression")]),t._v(" "),a("li",[t._v("initialization block\n"),a("ul",[a("li",[t._v("can be "),a("code",[t._v("static")]),t._v(" — static initialization block, executed when loading the class")]),t._v(" "),a("li",[t._v("can set fields but cannot read later fields — legal to set fields defined later in the class. However, to avoid circular definitions, not legal to read from fields initialized later")])])]),t._v(" "),a("li",[t._v("execution order — runs after "),a("code",[t._v("super()")]),t._v(" call or other constructor call, but before the rest of the constructor, see below")])])]),t._v(" "),a("li",[t._v("constructors\n"),a("ul",[a("li",[t._v("method name — same as the class")]),t._v(" "),a("li",[a("code",[t._v("new")]),t._v(" — must be called with "),a("code",[t._v("new")])]),t._v(" "),a("li",[t._v("default no-arg constructor — when no constructor present, a no-argument constructor is provided")]),t._v(" "),a("li",[t._v("call another constructor — see "),a("code",[t._v("this")]),t._v(" above")])])]),t._v(" "),a("li",[t._v("execution order when a constructor is called\n"),a("ol",[a("li",[t._v("other constructor call — if the first line of the constructor calls a second constructor, then the second constructor runs before the body of this constructor.")]),t._v(" "),a("li",[t._v("implicit field initialization — all data fields are initialized to their default values (0 , "),a("code",[t._v("false")]),t._v(" , or "),a("code",[t._v("null")]),t._v(")")]),t._v(" "),a("li",[t._v("explicit field initialization and initialization blocks — all field initializers and initialization blocks are executed, in the order they appear in the class declaration")]),t._v(" "),a("li",[t._v("the rest — The body of the constructor is executed.")])])]),t._v(" "),a("li",[t._v("encapsulation\n"),a("ul",[a("li",[t._v("getter, setter — "),a("code",[t._v("private")]),t._v(" data field with "),a("code",[t._v("public")]),t._v(" accessor and mutator")]),t._v(" "),a("li",[t._v("return clone for mutable objects — If you need to return a reference to a mutable object, return a clone")])])]),t._v(" "),a("li",[t._v("destructor\n"),a("ul",[a("li",[t._v("garbage collection — Java does automatic garbage collection, does not support destructors")]),t._v(" "),a("li",[a("code",[t._v("Object::finalize")]),t._v(" deprecated since JDK 9 and "),a("code",[t._v("java.lang.ref.PhantomReference")]),t._v(" — see "),a("RouterLink",{attrs:{to:"/backend/java/JVM.html#reference"}},[t._v("JVM")]),t._v(", and javadoc of "),a("code",[t._v("Object::finalize")]),t._v(" tbd")],1),t._v(" "),a("li",[a("code",[t._v("Runtime::addShutdownHook")]),t._v(" — when JVM shutdown")])])])])]),t._v(" "),a("li",[a("p",[t._v("access modifiers")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("public")]),t._v(" — no access limit")]),t._v(" "),a("li",[a("code",[t._v("private")]),t._v(" — accessible only when the class is the same")]),t._v(" "),a("li",[a("code",[t._v("protected")]),t._v(" — can be accessed by subclasses and within the same package\n"),a("ul",[a("li",[t._v("limitation to subclasses — when not within the same package, "),a("code",[t._v("SuperType.protectedField")]),t._v(" are not accessible to subclass")])])]),t._v(" "),a("li",[t._v("default package access — when no access modifiers specified, can be accessed within the same package")]),t._v(" "),a("li",[t._v("access privileges when overriding — no more restrictive access privileges when overriding")])])]),t._v(" "),a("li",[a("p",[t._v("other modifiers")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("final")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("final")]),t._v(" fields — must be initialized when the object is constructed (can be initialized in constructor) and cannot be modified")]),t._v(" "),a("li",[a("code",[t._v("final")]),t._v(" methods — cannot be overloaded")]),t._v(" "),a("li",[a("code",[t._v("final class")]),t._v(" — cannot be inherited, and methods are automatically "),a("code",[t._v("final")])]),t._v(" "),a("li",[a("code",[t._v("final")]),t._v(" parameters — cannot be modified")])])]),t._v(" "),a("li",[a("code",[t._v("static")]),t._v(" "),a("ul",[a("li",[t._v("call by instance — static methods can be invoked by object call, but not recommended")]),t._v(" "),a("li",[t._v("execution order — static initialization occurs when the class is first loaded")]),t._v(" "),a("li",[t._v("get class from static method ("),a("code",[t._v("this.getClass()")]),t._v(" will not work in static methods) besides "),a("code",[t._v(".class")]),t._v(" property"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEnclosingClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("code",[t._v("strictfp")]),t._v(" — methods tagged with the "),a("code",[t._v("strictfp")]),t._v(" keyword must use strict rules for floating-point computations that yield reproducible results")])])])]),t._v(" "),a("h3",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" Math")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("Math")]),t._v(" — elementary exponential, logarithm, square root, and trigonometric functions")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Math.E")]),t._v(", "),a("code",[t._v("Math.PI")])]),t._v(" "),a("li",[a("code",[t._v("static double random()")]),t._v(" — uses "),a("code",[t._v("java.util.Random")]),t._v(" behind scenes")]),t._v(" "),a("li",[a("code",[t._v("min")]),t._v(", "),a("code",[t._v("max")])]),t._v(" "),a("li",[t._v("double\n"),a("ul",[a("li",[a("code",[t._v("static double ulp(double d)")]),t._v(" — an ulp, unit in the last place, of a double value is the positive distance between this floating-point value and the double value next larger in magnitude")])])]),t._v(" "),a("li",[t._v("rounding\n"),a("ul",[a("li",[a("code",[t._v("static double ceil(double a)")])]),t._v(" "),a("li",[a("code",[t._v("static long round(double a)")]),a("br"),t._v(" "),a("code",[t._v("static int round(float a)")])]),t._v(" "),a("li",[a("code",[t._v("static double floor(double a)")])]),t._v(" "),a("li",[a("code",[t._v("Math.floorDiv()")])]),t._v(" "),a("li",[a("code",[t._v("Math.floorMod(x, y)")]),t._v(" — "),a("code",[t._v("x - Math.floorDiv(x, y) * y")]),t._v(" "),a("ul",[a("li",[t._v("compared to "),a("code",[t._v("x % y")]),t._v(" — "),a("code",[t._v("x - x / y * y")])])])])])]),t._v(" "),a("li",[a("code",[t._v("-Exact")]),t._v(" suffixed methods — "),a("code",[t._v("ArithmeticException")]),t._v(" if overflow\n"),a("ul",[a("li",[a("code",[t._v("addExact")]),t._v(", "),a("code",[t._v("subtractExact")]),t._v(", "),a("code",[t._v("multiplyExact")]),t._v(", "),a("code",[t._v("decrementExact")]),t._v(", "),a("code",[t._v("incrementExact")]),t._v(", "),a("code",[t._v("negateExact")])]),t._v(" "),a("li",[a("code",[t._v("static int toIntExact(long value)")])])])]),t._v(" "),a("li",[t._v("more")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.Random")]),t._v(" — generate a stream of pseudorandom numbers, of which "),a("code",[t._v("Math.random()")]),t._v(" uses an static inner class singleton instance")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("Random()")])]),t._v(" "),a("li",[a("code",[t._v("Random(long seed)")])])])]),t._v(" "),a("li",[t._v("thread-safe — use "),a("code",[t._v("ThreadLocalRandom")]),t._v(" to avoid "),a("code",[t._v("AtomicLong::compareAndSet")])]),t._v(" "),a("li",[t._v("set — "),a("code",[t._v("void setSeed(long seed)")])]),t._v(" "),a("li",[t._v("next — for "),a("code",[t._v("boolean")]),t._v(", "),a("code",[t._v("byte")]),t._v(", "),a("code",[t._v("double")]),t._v(", "),a("code",[t._v("float")]),t._v(", "),a("code",[t._v("int")]),t._v(", "),a("code",[t._v("long")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int nextInt()")])]),t._v(" "),a("li",[a("code",[t._v("int nextInt(int bound)")])]),t._v(" "),a("li",[t._v("more")]),t._v(" "),a("li",[a("code",[t._v("double nextGaussian()")])])])]),t._v(" "),a("li",[t._v("stream")]),t._v(" "),a("li",[a("code",[t._v("java.security.SecureRandom")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("StrictMath")]),t._v(" — guaranteeing identical results on all platforms")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.math.BigInteger")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("static BigInteger valueOf(long val)")])]),t._v(" "),a("li",[a("code",[t._v("static BigInteger ONE")])]),t._v(" "),a("li",[a("code",[t._v("static BigInteger TEN")])]),t._v(" "),a("li",[a("code",[t._v("static BigInteger ZERO")])])])]),t._v(" "),a("li",[t._v("arithmetic\n"),a("ul",[a("li",[a("code",[t._v("BigInteger add(BigInteger other)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger subtract(BigInteger other)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger multiply(BigInteger other)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger divide(BigInteger other)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger mod(BigInteger other)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger modInverse(BigInteger m)")])]),t._v(" "),a("li",[a("code",[t._v("BigInteger modPow(BigInteger exponent, BigInteger m)")])]),t._v(" "),a("li",[t._v("more")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.math.BigDecimal")]),t._v(" — Immutable, arbitrary-precision signed decimal numbers, decimal version of "),a("code",[t._v("BigInteger")])]),t._v(" "),a("ul",[a("li",[t._v("equality — use "),a("code",[t._v("BigDecimal::compare")]),t._v(" instead of "),a("code",[t._v("BigDecimal::equals")]),t._v(", see "),a("a",{attrs:{href:"#common-interfaces"}},[a("code",[t._v("Comparable")])])])])])]),t._v(" "),a("h3",{attrs:{id:"built-in-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#built-in-classes"}},[t._v("#")]),t._v(" Built-In Classes")]),t._v(" "),a("ol",[a("li",[t._v("inside "),a("code",[t._v("java.lang")]),t._v(" package")])]),t._v(" "),a("h4",{attrs:{id:"system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system"}},[t._v("#")]),t._v(" System")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("System")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n")])])]),a("ul",[a("li",[t._v("std\n"),a("ul",[a("li",[a("code",[t._v("static InputStream in")]),t._v(" — instance of "),a("code",[t._v("BufferedInputStream")])]),t._v(" "),a("li",[a("code",[t._v("static PrintStream err")])]),t._v(" "),a("li",[a("code",[t._v("static PrintStream out")])]),t._v(" "),a("li",[a("code",[t._v("static Console console()")])]),t._v(" "),a("li",[a("code",[t._v("static void setErr(PrintStream err)")])]),t._v(" "),a("li",[a("code",[t._v("static void setIn(InputStream in)")])]),t._v(" "),a("li",[a("code",[t._v("static void setOut(PrintStream out)")])])])]),t._v(" "),a("li",[t._v("util\n"),a("ul",[a("li",[a("code",[t._v("static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)")])]),t._v(" "),a("li",[a("code",[t._v("static long currentTimeMillis()")])]),t._v(" "),a("li",[a("code",[t._v("static long nanoTime()")])]),t._v(" "),a("li",[a("code",[t._v("static native int identityHashCode(Object x)")]),t._v(" — "),a("code",[t._v("Object::hashCode")]),t._v(" regardless of overriden or not, 0 for "),a("code",[t._v("null")])])])]),t._v(" "),a("li",[t._v("system property — see "),a("RouterLink",{attrs:{to:"/backend/java/javaUtils.html#legacy-collections"}},[t._v("Legacy Collections")]),t._v(" for the list of system properties\n"),a("ul",[a("li",[a("code",[t._v("static Properties getProperties()")])]),t._v(" "),a("li",[a("code",[t._v("static String getProperty(String key)")]),a("br"),t._v(" "),a("code",[t._v("static String getProperty(String key, String def)")])]),t._v(" "),a("li",[a("code",[t._v("Integer::getInteger")]),t._v(", "),a("code",[t._v("Long::getLong")])]),t._v(" "),a("li",[a("code",[t._v("static void setProperties(Properties props)")]),a("br"),t._v(" "),a("code",[t._v("static String setProperty(String key, String value)")])]),t._v(" "),a("li",[a("code",[t._v("static String clearProperty(String key)")])]),t._v(" "),a("li",[a("code",[t._v("static String lineSeparator()")]),t._v(" — equivalent to "),a("code",[t._v('System.getProperty("line.separator")')]),t._v(" "),a("ul",[a("li",[t._v("see "),a("RouterLink",{attrs:{to:"/backend/java/javaIO.html#file-classes"}},[a("code",[t._v("File")])]),t._v(" for other separators")],1)])])])],1),t._v(" "),a("li",[t._v("environment\n"),a("ul",[a("li",[a("code",[t._v("static Map<String,String> getenv()")])]),t._v(" "),a("li",[a("code",[t._v("static String getenv(String name)")])])])]),t._v(" "),a("li",[t._v("JVM\n"),a("ul",[a("li",[a("code",[t._v("static void exit(int status)")])]),t._v(" "),a("li",[a("code",[t._v("static void gc()")]),t._v(" — run garbage collector")]),t._v(" "),a("li",[a("code",[t._v("static SecurityManager getSecurityManager()")])]),t._v(" "),a("li",[a("code",[t._v("static Channel inheritedChannel()")]),t._v(" — the channel inherited from the entity that created this Java virtual machine")]),t._v(" "),a("li",[a("code",[t._v("static void load(String filename)")])]),t._v(" "),a("li",[a("code",[t._v("static void loadLibrary(String libname)")])]),t._v(" "),a("li",[a("code",[t._v("static String mapLibraryName(String libname)")])]),t._v(" "),a("li",[a("code",[t._v("static void runFinalization()")])]),t._v(" "),a("li",[a("code",[t._v("static void setSecurityManager(SecurityManager s)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("SecurityManager")]),t._v(" — check permissions, like read / write on certain files")])])]),t._v(" "),a("h4",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("CharSequence")]),t._v(" — provides uniform, read-only access to many different kinds of char sequences")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("char charAt(int index)")])]),t._v(" "),a("li",[a("code",[t._v("default IntStream chars()")])]),t._v(" "),a("li",[a("code",[t._v("default IntStream codePoints()")])]),t._v(" "),a("li",[a("code",[t._v("int length()")])]),t._v(" "),a("li",[a("code",[t._v("CharSequence subSequence(int start, int end)")])]),t._v(" "),a("li",[a("code",[t._v("String toString()")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("String")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantDesc")]),t._v("\n")])])]),a("ul",[a("li",[t._v("length\n"),a("ul",[a("li",[a("code",[t._v("int length()")])]),t._v(" "),a("li",[a("code",[t._v("boolean isEmpty()")])]),t._v(" "),a("li",[a("code",[t._v("int codePointCount(int startIndex, int endIndex)")]),t._v(" — the number of code points"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cpCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("substring or transform\n"),a("ul",[a("li",[a("code",[t._v("char charAt(int index)")]),t._v(", "),a("code",[t._v("int codePointAt(int index)")]),t._v(", "),a("code",[t._v("codePointBefore")])]),t._v(" "),a("li",[t._v("conversion methods to and from "),a("code",[t._v("bytes[]")]),t._v(", "),a("code",[t._v("char[]")])]),t._v(" "),a("li",[a("code",[t._v("String substring(int beginIndex)")]),t._v(" "),a("code",[t._v("String substring(int beginIndex, int endIndex)")])]),t._v(" "),a("li",[a("code",[t._v("String replace(char oldChar, char newChar)")]),a("br"),t._v(" "),a("code",[t._v("String replace(CharSequence target, CharSequence replacement)")]),a("br"),t._v(" "),a("code",[t._v("String replaceAll(String regex, String replacement)")]),a("br"),t._v(" "),a("code",[t._v("String replaceFirst(String regex, String replacement)")])]),t._v(" "),a("li",[a("code",[t._v("String toLowerCase()")]),t._v(" "),a("code",[t._v("String toUpperCase()")])]),t._v(" "),a("li",[a("code",[t._v("String trim()")])]),t._v(" "),a("li",[a("code",[t._v("String[] split(String regex)")]),a("br"),t._v(" "),a("code",[t._v("String[] split(String regex, int limit)")])])])]),t._v(" "),a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("static String format(String format, Object... args)")]),a("br"),t._v(" "),a("code",[t._v("static String format(Locale l, String format, Object... args)")])]),t._v(" "),a("li",[a("code",[t._v("static String join(CharSequence delimiter, CharSequence... elements)")]),a("br"),t._v(" "),a("code",[t._v("static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)")]),a("br"),t._v(" "),a("code",[t._v("Collectors::joining")]),a("br"),t._v(" "),a("code",[t._v("StringJoiner")])]),t._v(" "),a("li",[a("code",[t._v("valueOf")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static String valueOf(type c)")]),t._v(" — from various types")]),t._v(" "),a("li",[a("code",[t._v("static String copyValueOf(char[] data)")]),t._v(" — "),a("code",[t._v("valueOf")]),t._v(" equivalent"),a("br"),t._v(" "),a("code",[t._v("static String copyValueOf(char[] data, int offset, int count)")])])])]),t._v(" "),a("li",[a("code",[t._v("String concat(String str)")]),t._v(" — do nothing if empty string; in contrast, "),a("code",[t._v("+")]),t._v(" will be compiled to temporary "),a("code",[t._v("StringBuilder")])]),t._v(" "),a("li",[a("code",[t._v("String(byte[] bytes)")]),a("br"),t._v(" "),a("code",[t._v("String(byte[] bytes, Charset charset)")]),a("br"),t._v(" "),a("code",[t._v("String(byte[] bytes, int offset, int length)")]),a("br"),t._v(" "),a("code",[t._v("String(byte[] bytes, int offset, int length, Charset charset)")])]),t._v(" "),a("li",[a("code",[t._v("String(int[] codePoints, int offset, int count)")])]),t._v(" "),a("li",[a("code",[t._v("String(char[] value)")]),a("br"),t._v(" "),a("code",[t._v("String(char[] value, int offset, int count)")])]),t._v(" "),a("li",[a("code",[t._v("String(String original)")])]),t._v(" "),a("li",[a("code",[t._v("String(StringBuffer buffer)")])]),t._v(" "),a("li",[a("code",[t._v("String(StringBuilder builder)")])])])]),t._v(" "),a("li",[t._v("comparaison\n"),a("ul",[a("li",[a("code",[t._v("int hashCode()")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("boolean equals(Object other)")]),t._v(", "),a("code",[t._v("boolean equalsIgnoreCase(String other)")]),t._v(" "),a("ul",[a("li",[t._v("reference type — do not use the "),a("code",[t._v("==")]),t._v(" operator to test whether two strings are equal")]),t._v(" "),a("li",[t._v("string pool — only string literals are shared, not strings that are the result of operations like "),a("code",[t._v("+")]),t._v(" or "),a("code",[t._v("substring")])])])]),t._v(" "),a("li",[a("code",[t._v("int compareToIgnoreCase(String str)")])]),t._v(" "),a("li",[a("code",[t._v("boolean startsWith(String prefix)")]),t._v(", "),a("code",[t._v("boolean endsWith(String suffix)")])]),t._v(" "),a("li",[a("code",[t._v("boolean contentEquals(CharSequence cs)")]),t._v(", "),a("code",[t._v("boolean contentEquals(StringBuffer sb)")])]),t._v(" "),a("li",[a("code",[t._v("String intern()")]),t._v(" — determined by "),a("code",[t._v("equals")]),t._v(", return the string from string pool, add to the pool if not contained already")])])]),t._v(" "),a("li",[t._v("transverse\n"),a("ul",[a("li",[t._v("with index "),a("code",[t._v("i")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// incremental")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSupplementaryCodePoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// decreasing")]),t._v("\ni"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSurrogate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("int offsetByCodePoints()")]),t._v(" — get at the i^th^ code point")]),t._v(" "),a("li",[a("code",[t._v("int offsetByCodePoints(int index, int codePointOffset)")]),t._v(" — the resulted index by moving given number of code points from given index")]),t._v(" "),a("li",[a("code",[t._v("str.codePoints().toArray()")])])])]),t._v(" "),a("li",[t._v("find\n"),a("ul",[a("li",[a("code",[t._v("boolean contains(CharSequence s)")])]),t._v(" "),a("li",[a("code",[t._v("boolean matches(String regex)")])]),t._v(" "),a("li",[a("code",[t._v("boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)")]),t._v(" — Tests if two string regions are equal"),a("br"),t._v(" "),a("code",[t._v("boolean regionMatches(int toffset, String other, int ooffset, int len)")])]),t._v(" "),a("li",[a("code",[t._v("int indexOf(String str)")]),a("br"),t._v(" "),a("code",[t._v("int indexOf(String str, int fromIndex)")]),a("br"),t._v(" "),a("code",[t._v("int indexOf(int cp)")]),a("br"),t._v(" "),a("code",[t._v("int indexOf(int cp, int fromIndex)")])]),t._v(" "),a("li",[a("code",[t._v("int lastIndexOf(String str)")]),a("br"),t._v(" "),a("code",[t._v("int lastIndexOf(String str, int fromIndex)")]),a("br"),t._v(" "),a("code",[t._v("int lastIndexOf(int cp)")]),a("br"),t._v(" "),a("code",[t._v("int lastIndexOf(int cp, int fromIndex)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("StringBuilder")]),t._v(" — mutable, not synchronized "),a("code",[t._v("StringBuffer")]),t._v(", build a string from many small pieces")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v("\n")])])]),a("ul",[a("li",[t._v("constructors\n"),a("ul",[a("li",[a("code",[t._v("StringBuilder()")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder(CharSequence seq)")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder(int capacity)")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder(String str)")])])])]),t._v(" "),a("li",[t._v("modify\n"),a("ul",[a("li",[a("code",[t._v("append")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder appendCodePoint(int cp)")])]),t._v(" "),a("li",[a("code",[t._v("void setCharAt(int i, char c)")])]),t._v(" "),a("li",[a("code",[t._v("insert")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder delete(int startIndex, int endIndex)")])]),t._v(" "),a("li",[a("code",[t._v("StringBuilder deleteCharAt(int index)")])]),t._v(" "),a("li",[t._v("more")])])]),t._v(" "),a("li",[t._v("reuse\n"),a("ul",[a("li",[a("code",[t._v("void setLength(int newLength)")])])])]),t._v(" "),a("li",[t._v("output — "),a("code",[t._v("String toString()")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("StringBuffer")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.StringJoiner")]),t._v(" — store components in "),a("code",[t._v("String[]")]),t._v(" with doubling strategy when expanding capability, used by "),a("code",[t._v("Collectors::joining")]),t._v(" and "),a("code",[t._v("String::join")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringJoiner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n")])])]),a("ul",[a("li",[t._v("constructors\n"),a("ul",[a("li",[a("code",[t._v("StringJoiner(CharSequence delimiter)")])]),t._v(" "),a("li",[a("code",[t._v("StringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)")])])])]),t._v(" "),a("li",[t._v("use\n"),a("ul",[a("li",[a("code",[t._v("StringJoiner add(CharSequence newElement)")])]),t._v(" "),a("li",[a("code",[t._v("int length()")])]),t._v(" "),a("li",[a("code",[t._v("StringJoiner merge(StringJoiner other)")])]),t._v(" "),a("li",[a("code",[t._v("StringJoiner setEmptyValue(CharSequence emptyValue)")])]),t._v(" "),a("li",[a("code",[t._v("String toString()")])])])])])])]),t._v(" "),a("h4",{attrs:{id:"wrappers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wrappers"}},[t._v("#")]),t._v(" Wrappers")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("wrappers")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Integer")]),t._v(" , "),a("code",[t._v("Long")]),t._v(" , "),a("code",[t._v("Float")]),t._v(" , "),a("code",[t._v("Double")]),t._v(" , "),a("code",[t._v("Short")]),t._v(" , "),a("code",[t._v("Byte")]),t._v(" , "),a("code",[t._v("Character")]),t._v(" , and "),a("code",[t._v("Boolean")])]),t._v(" "),a("li",[t._v("all extends "),a("code",[t._v("Number")]),t._v(" except "),a("code",[t._v("Boolean")]),t._v(" — no arithmetic operations and number conversions for boolean")]),t._v(" "),a("li",[t._v("immutable and "),a("code",[t._v("final")])]),t._v(" "),a("li",[t._v("autowrapping (autoboxing) — done by compiler, nothing related to VM\n"),a("ul",[a("li",[a("code",[t._v("valueOf")]),t._v(" — example: "),a("code",[t._v("list.add(3);")]),t._v(" is automatically translated to "),a("code",[t._v("list.add(Integer.valueOf(3));")])]),t._v(" "),a("li",[a("code",[t._v("typeValue()")]),t._v(" — example: the compiler translates "),a("code",[t._v("int n = list.get(i);")]),t._v(" into "),a("code",[t._v("int n = list.get(i).intValue();")])]),t._v(" "),a("li",[t._v("arithmetic operations — example: "),a("code",[t._v("Integer n = 3; n++;")]),t._v(" compiler automatically inserts instructions to unbox the object, increment the resulting value, and box it back.")])])]),t._v(" "),a("li",[t._v("fixed wrapping — wrapped into fixed objects\n"),a("ul",[a("li",[a("code",[t._v("boolean , byte , char <= 127")])]),t._v(" "),a("li",[a("code",[t._v("short")]),t._v(" , and "),a("code",[t._v("int")]),t._v(" between -128 and 127")])])]),t._v(" "),a("li",[t._v("wrapper class references can be "),a("code",[t._v("null")]),t._v(" — possible "),a("code",[t._v("NullPointerException")])]),t._v(" "),a("li",[t._v("conditional promotion — "),a("code",[t._v("Integer")]),t._v(" to "),a("code",[t._v("Double")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints 1.0")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("byte byteValue()")])]),t._v(" "),a("li",[a("code",[t._v("abstract double doubleValue()")])]),t._v(" "),a("li",[a("code",[t._v("abstract float floatValue()")])]),t._v(" "),a("li",[a("code",[t._v("abstract int intValue()")])]),t._v(" "),a("li",[a("code",[t._v("abstract long longValue()")])]),t._v(" "),a("li",[a("code",[t._v("short shortValue()")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Integer")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantDesc")]),t._v("\n")])])]),a("ul",[a("li",[t._v("fields\n"),a("ul",[a("li",[a("code",[t._v("static int BYTES")]),t._v(" — usually 4")]),t._v(" "),a("li",[a("code",[t._v("static int MAX_VALUE")])]),t._v(" "),a("li",[a("code",[t._v("static int MIN_VALUE")])]),t._v(" "),a("li",[a("code",[t._v("static int SIZE")]),t._v(" — usually 32")]),t._v(" "),a("li",[a("code",[t._v("static Class<Integer> TYPE")]),t._v(" — "),a("code",[t._v("int.class")])])])]),t._v(" "),a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("Integer(int value)")]),t._v(" — deprecated since JDK 9")]),t._v(" "),a("li",[a("code",[t._v("Integer(String s)")]),t._v(" — uses "),a("code",[t._v("parseInt")]),t._v(" internally, deprecated since JDK 9")]),t._v(" "),a("li",[a("code",[t._v("static Integer decode(String nm)")]),t._v(" — accepts decimal, hexadecimal ("),a("code",[t._v("0x")]),t._v(", "),a("code",[t._v("0X")]),t._v(", "),a("code",[t._v("#")]),t._v(" prefixed), octal ("),a("code",[t._v("0")]),t._v(" prefixed), can be negative")]),t._v(" "),a("li",[a("code",[t._v("static Integer valueOf(int i)")]),a("br"),t._v(" "),a("code",[t._v("static Integer valueOf(String s)")]),t._v(" — uses "),a("code",[t._v("parseInt")]),t._v(" internally"),a("br"),t._v(" "),a("code",[t._v("static Integer valueOf(String s, int radix)")])])])]),t._v(" "),a("li",[t._v("conversion to primitive types\n"),a("ul",[a("li",[t._v("methods in "),a("code",[t._v("Number")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int intValue()")])])])]),t._v(" "),a("li",[a("code",[t._v("static int parseInt(String s)")]),a("br"),t._v(" "),a("code",[t._v("static int parseInt(String s, int radix)")])])])]),t._v(" "),a("li",[t._v("arithmetic operations\n"),a("ul",[a("li",[a("code",[t._v("static int signum(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int sum(int a, int b)")])])])]),t._v(" "),a("li",[t._v("unsigned\n"),a("ul",[a("li",[a("code",[t._v("static int parseUnsignedInt(String s)")])]),t._v(" "),a("li",[a("code",[t._v("static int parseUnsignedInt(String s, int radix)")])]),t._v(" "),a("li",[a("code",[t._v("static int divideUnsigned(int dividend, int divisor)")])]),t._v(" "),a("li",[a("code",[t._v("static int compareUnsigned(int x, int y)")])]),t._v(" "),a("li",[a("code",[t._v("static int remainderUnsigned(int dividend, int divisor)")])]),t._v(" "),a("li",[a("code",[t._v("static String toBinaryString(int i)")]),t._v(" — two's complement representation")]),t._v(" "),a("li",[a("code",[t._v("static String toHexString(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static String toOctalString(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static String toUnsignedString(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static String toUnsignedString(int i, int radix)")])]),t._v(" "),a("li",[a("code",[t._v("static long toUnsignedLong(int x)")])])])]),t._v(" "),a("li",[t._v("bits in the two's complement\n"),a("ul",[a("li",[a("code",[t._v("static int bitCount(int i)")]),t._v(" — the number of one-bits")]),t._v(" "),a("li",[a("code",[t._v("static int highestOneBit(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int lowestOneBit(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int numberOfLeadingZeros(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int numberOfTrailingZeros(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int reverse(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int reverseBytes(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static int rotateLeft(int i, int distance)")])]),t._v(" "),a("li",[a("code",[t._v("static int rotateRight(int i, int distance)")])])])]),t._v(" "),a("li",[t._v("for "),a("code",[t._v("int")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static int compare(int x, int y)")])]),t._v(" "),a("li",[a("code",[t._v("static int hashCode(int value)")])]),t._v(" "),a("li",[a("code",[t._v("static String toString(int i)")])]),t._v(" "),a("li",[a("code",[t._v("static String toString(int i, int radix)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Double")])]),t._v(" "),a("ul",[a("li",[t._v("counterparts of fields and methods in "),a("code",[t._v("Integer")])]),t._v(" "),a("li",[t._v("IEEE 754\n"),a("ul",[a("li",[a("code",[t._v("static int MAX_EXPONENT")])]),t._v(" "),a("li",[a("code",[t._v("static int MIN_EXPONENT")])]),t._v(" "),a("li",[a("code",[t._v("static double MIN_NORMAL")])]),t._v(" "),a("li",[a("code",[t._v("Math::ulp")])])])]),t._v(" "),a("li",[t._v("infinite and not a number\n"),a("ul",[a("li",[a("code",[t._v("static double NaN")])]),t._v(" "),a("li",[a("code",[t._v("static double NEGATIVE_INFINITY")])]),t._v(" "),a("li",[a("code",[t._v("static double POSITIVE_INFINITY")])]),t._v(" "),a("li",[a("code",[t._v("static boolean isFinite(double d)")])]),t._v(" "),a("li",[a("code",[t._v("boolean isInfinite()")])]),t._v(" "),a("li",[a("code",[t._v("static boolean isInfinite(double v)")])]),t._v(" "),a("li",[a("code",[t._v("boolean isNaN()")])]),t._v(" "),a("li",[a("code",[t._v("static boolean isNaN(double v)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Character")]),t._v(" — see after")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Boolean")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"inheritance-and-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inheritance-and-object"}},[t._v("#")]),t._v(" Inheritance and Object")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("inheritance")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("extends")])]),t._v(" "),a("li",[a("code",[t._v("super")])]),t._v(" "),a("li",[a("code",[t._v("super()")]),t._v(" "),a("ul",[a("li",[t._v("first statement — the call using "),a("code",[t._v("super")]),t._v(" must be the first statement in the constructor for the subclass")]),t._v(" "),a("li",[t._v("default no-arg constructor — if the subclass constructor does not call a superclass constructor explicitly, the no-argument "),a("code",[t._v("super()")]),t._v(" is invoked")]),t._v(" "),a("li",[t._v("order — invoked before initializers")])])]),t._v(" "),a("li",[t._v("polymorphism\n"),a("ul",[a("li",[t._v("object variables are polymorphic — a variable can be assigned subclasses of its type")]),t._v(" "),a("li",[t._v("no polymorphism exploit in arrays — all arrays remember the element type with which they were created ("),a("code",[t._v("new")]),t._v("ed)"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Manager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" managers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Manager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" staff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" managers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\nstaff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry Hacker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ArrayStoreException")]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("method call")]),t._v(" "),a("ul",[a("li",[t._v("overriding resolution — according to function signatures, done by compiler\n"),a("ul",[a("li",[t._v("function signature\n"),a("ul",[a("li",[t._v("return type — return type is not a part of the signature (but is in JVM so bridge methods work)")]),t._v(" "),a("li",[t._v("bridge method — when return another type, a bridge method is synthesized")])])])])]),t._v(" "),a("li",[t._v("static binding — for "),a("code",[t._v("private")]),t._v(", "),a("code",[t._v("static")]),t._v(", "),a("code",[t._v("final")]),t._v(" methods or constructors, done by compiler")]),t._v(" "),a("li",[t._v("dynamic binding — JVM resolving the implicit parameter with method table lookup\n"),a("ul",[a("li",[t._v("method table — method table lists all method signatures and the actual methods to be called, computed by VM for each class in advance")]),t._v(" "),a("li",[t._v("order of method table lookup — from actual type to superclasses to "),a("code",[t._v("Object")])]),t._v(" "),a("li",[t._v("overhead of dynamic binding — no need to use static binding to avoid the overhead, JIT does the inlining optimization")])])])])]),t._v(" "),a("li",[a("p",[t._v("casting")]),t._v(" "),a("ul",[a("li",[t._v("direct assign to more general — cast to more general, a subclass reference to a superclass variable, direct assign")]),t._v(" "),a("li",[t._v("cast needed for more specific — cast to more specific, a superclass reference to a subclass variable, use the same syntax as primitive type cast, check at runtime\n"),a("ul",[a("li",[t._v("exception — "),a("code",[t._v("ClassCastException")]),t._v(" when cannot cast")]),t._v(" "),a("li",[t._v("check — use "),a("code",[t._v("instanceof")]),t._v(" to check before casting")]),t._v(" "),a("li",[t._v("cast range — can cast only within an inheritance hierarchy")]),t._v(" "),a("li",[t._v("minimal usage — best to minimize the use of casts and the "),a("code",[t._v("instanceof")]),t._v(" operator")])])])])]),t._v(" "),a("li",[a("p",[t._v("abstract class")]),t._v(" "),a("ul",[a("li",[t._v("no instance — cannot be instantiated, but can be super type")]),t._v(" "),a("li",[t._v("abstract methods — any class can be tagged "),a("code",[t._v("abstract")]),t._v(", but not vice versa\n"),a("ul",[a("li",[t._v("can be none — abstract classes can have no abstract methods, abstract classes can have fields and concrete methods")]),t._v(" "),a("li",[t._v("none in concrete class — a class with one or more "),a("code",[t._v("abstract")]),t._v(" methods must itself be declared "),a("code",[t._v("abstract")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Object")]),t._v(" — the cosmic superclass")]),t._v(" "),a("ul",[a("li",[t._v("for all reference type — only the values of primitive types (numbers, characters, and boolean values) are not objects")]),t._v(" "),a("li",[a("code",[t._v("boolean equals(Object otherObject)")]),t._v(" — determines whether two object references are identical\n"),a("ul",[a("li",[t._v("override — template as below, need to override "),a("code",[t._v("hashCode")]),t._v(" also if "),a("code",[t._v("equals")]),t._v(" overriden"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" otherObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// super.equals(other)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a quick test to see if the objects are identical, may be unnecessary if covered in `super.equals(other)`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" otherObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// must return false if the explicit parameter is null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("otherObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if the classes don't match, they can't be equal")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// alternative — use instanceof and tagging final to allow objects of different subclasses to be equal to one another")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" otherObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now we know otherObject is a non-null Employee")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" other "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" otherObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test whether the fields have identical values")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" hireDay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hireDay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("code",[t._v("native int hashCode()")]),t._v(" — derived from the memory address, recommended to be compatible with "),a("code",[t._v("equals()")])]),t._v(" "),a("li",[a("code",[t._v("String toString()")]),t._v(" — "),a("code",[t._v('getClass().getName() + "@" + Integer.toHexString(hashCode());')]),t._v(" "),a("ul",[a("li",[t._v("for arrays — arrays will come up with something like "),a("code",[t._v('"[I@1a46e30"')]),t._v(", where "),a("code",[t._v("[I")]),t._v(" denotes an array of integers ")])])]),t._v(" "),a("li",[a("code",[t._v("Class<?> getClass()")])]),t._v(" "),a("li",[a("code",[t._v("protected Object clone()")])]),t._v(" "),a("li",[a("code",[t._v("protected void finalize()")]),t._v(" — deprecated in JDK 9, see "),a("a",{attrs:{href:"#classes-and-modifiers"}},[t._v("before")])]),t._v(" "),a("li",[t._v("concurrency related — see "),a("RouterLink",{attrs:{to:"/backend/java/javaConcurrency.html"}},[t._v("Concurrency")])],1),t._v(" "),a("li",[t._v("methods in utility class "),a("code",[t._v("Objects")])])])])]),t._v(" "),a("h2",{attrs:{id:"interfaces-lambdas-and-inner-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-lambdas-and-inner-classes"}},[t._v("#")]),t._v(" Interfaces, Lambdas and Inner Classes")]),t._v(" "),a("h3",{attrs:{id:"interfaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interfaces"}},[t._v("#")]),t._v(" Interfaces")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("interface")]),t._v(" "),a("ul",[a("li",[t._v("methods in interfaces\n"),a("ul",[a("li",[t._v("non-static methods — all methods are implicitly "),a("code",[t._v("abstract public")]),t._v(", redundancy is discouraged\n"),a("ul",[a("li",[t._v("when implementing — "),a("code",[t._v("public")]),t._v(" still required when implementing")])])]),t._v(" "),a("li",[t._v("static methods — supported as of Java SE 8, need explicit access modifier")]),t._v(" "),a("li",[t._v("prohibited modifiers — an interface method may not be declared with "),a("code",[t._v("protected")]),t._v(" or package access, or with the modifiers "),a("code",[t._v("final")]),t._v(", "),a("code",[t._v("synchronized")]),t._v(", or "),a("code",[t._v("native")])])])]),t._v(" "),a("li",[t._v("inner classes in interfaces — automatically "),a("code",[t._v("static public")])]),t._v(" "),a("li",[t._v("constant fields — implicitly "),a("code",[t._v("public static final")]),t._v(", automatically inherited when implementing")]),t._v(" "),a("li",[t._v("no instance fields")]),t._v(" "),a("li",[a("code",[t._v("implements")]),t._v(", "),a("code",[t._v("SuperInterface.super")]),t._v(" — examples below")]),t._v(" "),a("li",[t._v("can be generic — "),a("code",[t._v("class Employee implements Comparable<Employee>")])]),t._v(" "),a("li",[t._v("use as super type — supports "),a("code",[t._v("instanceof")]),t._v(", "),a("code",[t._v("extend")]),t._v(", multiple inheritance\n"),a("ul",[a("li",[t._v("diamond problem — see below")])])])])]),t._v(" "),a("li",[a("p",[t._v("default methods")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("default")]),t._v(" implementation"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By default, all elements are the same")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v(" method conflict resolving — interface vs superclass vs another interface\n"),a("ul",[a("li",[t._v("superclasses take precedence — default methods are ignored if implemented in superclasses\n"),a("ul",[a("li",[t._v("no default "),a("code",[t._v("Object")]),t._v(" methods — not possible to make a default method that redefines one of the methods in the "),a("code",[t._v("Object")]),t._v(" class")]),t._v(" "),a("li",[t._v("no abstract "),a("code",[t._v("Object")]),t._v(" methods — redeclaring methods from the "),a("code",[t._v("Object")]),t._v(" class do not make the methods abstract, no effect to function interfaces")]),t._v(" "),a("li",[t._v("attach javadoc by "),a("code",[t._v("Object")]),t._v(" methods — some interfaces redeclare "),a("code",[t._v("Object")]),t._v(" methods in order to attach javadoc comments, like "),a("code",[t._v("Comparator")])])])]),t._v(" "),a("li",[t._v("interface clash — if clashes, even only one of the methods is "),a("code",[t._v("default")]),t._v(", the method must be overriden\n"),a("ul",[a("li",[a("code",[t._v("SuperInterface.super")]),t._v(" — choose one when interface clash"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Named")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Named")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("companion class")]),t._v(" "),a("ul",[a("li",[t._v("used to place static methods — it has been common to place static methods in companion classes, like "),a("code",[t._v("Collection")]),t._v(" / "),a("code",[t._v("Collections")]),t._v(" or "),a("code",[t._v("Path")]),t._v(" / "),a("code",[t._v("Paths")])]),t._v(" "),a("li",[t._v("used to implement some or all of methods of an interface — such as "),a("code",[t._v("Collection")]),t._v(" / "),a("code",[t._v("AbstractCollection")]),t._v(" or "),a("code",[t._v("MouseListener")]),t._v(" / "),a("code",[t._v("MouseAdapter")])]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v(" and "),a("code",[t._v("static")]),t._v(" methods in interfaces — with Java SE 8, this technique of companion class is obsolete, as the support of default methods and static methods")])])]),t._v(" "),a("li",[a("p",[t._v("some use of interface")]),t._v(" "),a("ul",[a("li",[t._v("callback — pass an object of a class implementing a callback interface, methods in the interface will be called when the event fires")]),t._v(" "),a("li",[t._v("tagging interface — "),a("code",[t._v("Cloneable")])])])])]),t._v(" "),a("h4",{attrs:{id:"common-interfaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-interfaces"}},[t._v("#")]),t._v(" Common Interfaces")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("interface Comparable<T>")]),t._v(" — "),a("code",[t._v("int compareTo(T o)")])]),t._v(" "),a("ul",[a("li",[t._v("overflow when implementing with subtraction — make sure absolute values of operands are at most "),a("code",[t._v("(Integer.MAX_VALUE - 1) / 2")]),t._v(" "),a("ul",[a("li",[t._v("otherwise use "),a("code",[t._v("Integer.compare()")])])])]),t._v(" "),a("li",[a("code",[t._v("equals()")]),t._v(" compliance — strongly recommended (though not required) to comply with "),a("code",[t._v("equals()")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("BigDecimal")]),t._v(" violates — "),a("code",[t._v('new BigDecimal("1.0").equals(new BigDecimal("1.00"))')]),t._v(" is "),a("code",[t._v("false")]),t._v(" because the numbers differ in precision")])])]),t._v(" "),a("li",[t._v("associative — to make "),a("code",[t._v("x.compareTo(y)")]),t._v(" compatible with "),a("code",[t._v("y.compareTo(x)")]),t._v(", start with below when implementing"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassCastException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("interface java.util.Comparator<T>")]),t._v(" — "),a("code",[t._v("int compare(T o1, T o2)")])]),t._v(" "),a("ul",[a("li",[t._v("nature and reversed order\n"),a("ul",[a("li",[a("code",[t._v("static <T extends Comparable<? super T>> Comparator<T> naturalOrder()")])]),t._v(" "),a("li",[a("code",[t._v("static <T extends Comparable<? super T>> Comparator<T> reverseOrder()")]),t._v(" — uses "),a("code",[t._v("Collections::reverseOrder")]),t._v(" under the hood")])])]),t._v(" "),a("li",[t._v("key extract"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sort people by name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comparing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("static <T,U extends Comparable<? super U>> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor)")])]),t._v(" "),a("li",[a("code",[t._v("static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator)")])]),t._v(" "),a("li",[a("code",[t._v("static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor)")])]),t._v(" "),a("li",[a("code",[t._v("static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor)")])]),t._v(" "),a("li",[a("code",[t._v("static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor)")])])])]),t._v(" "),a("li",[t._v("comparator chaining"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comparing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLastName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenComparing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirstName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("default Comparator<T> thenComparing(Comparator<? super T> other)")]),a("br"),t._v(" "),a("code",[t._v("default <U extends Comparable<? super U>> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor)")]),a("br"),t._v(" "),a("code",[t._v("default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator)")])]),t._v(" "),a("li",[a("code",[t._v("default Comparator<T> thenComparingType(ToTypeFunction<? super T> keyExtractor)")]),t._v(" — "),a("code",[t._v("type")]),t._v(" for "),a("code",[t._v("int")]),t._v(", "),a("code",[t._v("double")]),t._v(" and "),a("code",[t._v("long")])]),t._v(" "),a("li",[a("code",[t._v("default Comparator<T> reversed()")]),t._v(" — uses "),a("code",[t._v("Collections::reverseOrder")]),t._v(" under the hood")])])]),t._v(" "),a("li",[t._v("comparing "),a("code",[t._v("null")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator)")])]),t._v(" "),a("li",[a("code",[t._v("static <T> Comparator<T> nullsLast(Comparator<? super T> comparator)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("interface Cloneable")])]),t._v(" "),a("ul",[a("li",[t._v("mark interface — serves as a tag, a checked "),a("code",[t._v("CloneNotSupportedException")]),t._v(" if an object requests cloning but does not implement that interface")]),t._v(" "),a("li",[t._v("make a class cloneable — implement this interface, redefine "),a("code",[t._v("clone")]),t._v(" to be "),a("code",[t._v("public")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object::clone")]),t._v(" — protected, and does a shallow copy")]),t._v(" "),a("li",[t._v("use "),a("code",[t._v("Object::clone")]),t._v(" — "),a("code",[t._v("(T) super.clone()")])])])]),t._v(" "),a("li",[t._v("return "),a("code",[t._v("Object")]),t._v(" by convention — Up to Java SE 1.4, the clone method always had return type "),a("code",[t._v("Object")]),t._v(", but now the correct return type can be specified\n"),a("ul",[a("li",[t._v("inconsistency — "),a("code",[t._v("HashMap::clone")]),t._v(" and "),a("code",[t._v("ArrayList::clone")]),t._v(" etc. return "),a("code",[t._v("Object")]),t._v(", whereas "),a("code",[t._v("int[]::clone")]),t._v(" and "),a("code",[t._v("ArrayDeque::clone")]),t._v(" etc. return specific type")])])])])])]),t._v(" "),a("h3",{attrs:{id:"lambdas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambdas"}},[t._v("#")]),t._v(" Lambdas")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("closure")]),t._v(" "),a("ul",[a("li",[t._v("effectively final — any captured variable in a lambda expression must be effectively final: no difference if declared "),a("code",[t._v("final")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActionListener")]),t._v(" listener "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: Cannot refer to changing i")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Timer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("no mutation outside — illegal to refer to a variable in a lambda expression that is mutated outside")]),t._v(" "),a("li",[t._v("no mutation inside — cannot mutate captured value")]),t._v(" "),a("li",[t._v("access mutable data — use an array of length 1")])])]),t._v(" "),a("li",[t._v("no block variable shadowing — illegal to declare a parameter or a local variable in the lambda that has the same name as a local variable")]),t._v(" "),a("li",[t._v("block scope — the same scope as a nested block")]),t._v(" "),a("li",[t._v("same "),a("code",[t._v("this")]),t._v(" — "),a("code",[t._v("this")]),t._v(" is the same as what outside the lambda")])])]),t._v(" "),a("li",[a("p",[t._v("lambda expression syntax")]),t._v(" "),a("ul",[a("li",[t._v("inline"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("block with explicit "),a("code",[t._v("return")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("type inference"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" comp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("type inference without parentheses"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActionListener")]),t._v(" listener "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The time is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v('"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("inferred return type — return type is always inferred, cannot be specified")])])]),t._v(" "),a("li",[a("p",[t._v("functional interface — an interface with a single abstract method, like "),a("code",[t._v("Comparator<T>")])]),t._v(" "),a("ul",[a("li",[t._v("for conversion from lambdas — conversion to a functional interface is the only function for lambdas")]),t._v(" "),a("li",[t._v("object instance used behind the scenes — methods like "),a("code",[t._v("Arrays::sort")]),t._v(" receives an object of some class that implements the interface, lambda is executed when invoking the method of that interface")]),t._v(" "),a("li",[a("code",[t._v("@FunctionalInterface")]),t._v(" — optional annotation")]),t._v(" "),a("li",[t._v("lambda expression holders (also function interface) — see "),a("a",{attrs:{href:"#common-functional-interfaces"}},[t._v("Common Functional Interfaces")]),t._v(" for "),a("code",[t._v("java.util.function")])])])]),t._v(" "),a("li",[a("p",[t._v("method reference — use as lambdas")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("object"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceMethod")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceMethod")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceMethod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// uses `this` as the target and invokes the superclass version of the given method")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceMethod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the implicit parameter becomes explicit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// constructor reference")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n")])])]),a("ul",[a("li",[t._v("object instance used behind the scenes — turned into instances of functional interfaces like lambdas")]),t._v(" "),a("li",[a("code",[t._v("int[]::new")]),t._v(" — "),a("code",[t._v("new T[n]")]),t._v(" is illegal, so libary designers use this syntax to mitigate"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("lambda at runtime — see "),a("a",{attrs:{href:"#lambda-at-runtime"}},[t._v("Lambda at Runtime")])])])]),t._v(" "),a("h4",{attrs:{id:"common-functional-interfaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-functional-interfaces"}},[t._v("#")]),t._v(" Common Functional Interfaces")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("java.util.function")]),t._v(" package, all "),a("code",[t._v("@FunctionalInterface")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.function.Function<T, R>")]),t._v(" — "),a("code",[t._v("R apply(T t)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static <T> Function<T,T> identity()")])]),t._v(" "),a("li",[t._v("chaining\n"),a("ul",[a("li",[a("code",[t._v("default <V> Function<T,V> andThen(Function<? super R,? extends V> after)")])]),t._v(" "),a("li",[a("code",[t._v("default <V> Function<V,R> compose(Function<? super V,? extends T> before)")])])])]),t._v(" "),a("li",[t._v("variants\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.DoubleFunction<R>")]),t._v(" — "),a("code",[t._v("R apply(double value)")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.DoubleToIntFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.DoubleToLongFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntFunction<R>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntToDoubleFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntToLongFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongFunction<R>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongToDoubleFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongToIntFunction")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToDoubleFunction<T>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToIntFunction<T>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToLongFunction<T>")])])])]),t._v(" "),a("li",[t._v("variants with two parameters\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.BiFunction<T,U,R>")]),t._v(" — "),a("code",[t._v("R apply(T t, U u)")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToDoubleBiFunction<T,U>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToIntBiFunction<T,U>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ToLongBiFunction<T,U>")])])])])])]),t._v(" "),a("li",[a("p",[t._v("operator — "),a("code",[t._v("Function")]),t._v(" with type parameters of the same primitive type")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FunctionalInterface")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnaryOperator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("unary\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.UnaryOperator<T>")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static <T> UnaryOperator<T> identity()")])])])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.DoubleUnaryOperator")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntUnaryOperator")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongUnaryOperator")])])])]),t._v(" "),a("li",[t._v("binary\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.BinaryOperator<T>")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static <T> BinaryOperator<T> maxBy(Comparator<? super T> comparator)")])]),t._v(" "),a("li",[a("code",[t._v("static <T> BinaryOperator<T> minBy(Comparator<? super T> comparator)")])])])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.DoubleBinaryOperator")]),t._v(" — "),a("code",[t._v("double applyAsDouble(double left, double right)")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntBinaryOperator")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongBinaryOperator")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.function.Supplier<T>")]),t._v(" — "),a("code",[t._v("T get()")])]),t._v(" "),a("ul",[a("li",[t._v("variants\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.BooleanSupplier")]),t._v(" — "),a("code",[t._v("boolean getAsBoolean()")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.DoubleSupplier")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntSupplier")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongSupplier")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.function.Consumer<T>")]),t._v(" — "),a("code",[t._v("void accept(T t)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("default Consumer<T> andThen(Consumer<? super T> after)")]),t._v(" — chaining"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// default implementation")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" after"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("variants\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.DoubleConsumer")]),t._v(" — "),a("code",[t._v("void accept(double value)")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntConsumer")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongConsumer")])])])]),t._v(" "),a("li",[t._v("variants with two parameters\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.BiConsumer<T, U>")]),t._v(" — "),a("code",[t._v("void accept(T t, U u)")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ObjDoubleConsumer<T>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ObjIntConsumer<T>")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.ObjLongConsumer<T>")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.util.function.Predicate<T>")]),t._v(" — "),a("code",[t._v("boolean test(T t)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static <T> Predicate<T> isEqual(Object targetRef)")])]),t._v(" "),a("li",[t._v("chaining\n"),a("ul",[a("li",[a("code",[t._v("default Predicate<T> and(Predicate<? super T> other)")])]),t._v(" "),a("li",[a("code",[t._v("default Predicate<T> negate()")])]),t._v(" "),a("li",[a("code",[t._v("default Predicate<T> or(Predicate<? super T> other)")])])])]),t._v(" "),a("li",[t._v("variants\n"),a("ul",[a("li",[a("code",[t._v("java.util.function.DoublePredicate")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.IntPredicate")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.LongPredicate")])]),t._v(" "),a("li",[a("code",[t._v("java.util.function.BiPredicate<T,U>")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"inner-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inner-class"}},[t._v("#")]),t._v(" Inner Class")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("inner class")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("OuterClass.this")]),t._v(" — explicit reference to the outer class\n"),a("ul",[a("li",[t._v("passed as implicit parameter to inner class constructors")])])]),t._v(" "),a("li",[t._v("implicit reference — can access the data from the scope in which they are defined\n"),a("ul",[a("li",[t._v("synthesized constructor parameter for implicit reference — the compiler modifies all inner class constructors, adding a parameter for the outer class reference")])])]),t._v(" "),a("li",[t._v("constructing inner classes — "),a("code",[t._v("new")]),t._v(" keyword changes for implicit reference\n"),a("ul",[a("li",[t._v("inside outer class — "),a("code",[t._v("this.new")]),t._v(" or alternatively "),a("code",[t._v("new")])]),t._v(" "),a("li",[t._v("outside outer class — "),a("code",[t._v("outerObj.new")])])])]),t._v(" "),a("li",[t._v("access control — can be hidden from other classes in the same package\n"),a("ul",[a("li",[t._v("only inner classes can be private — regular classes always have either package or public visibility")]),t._v(" "),a("li",[a("code",[t._v("private")]),t._v(" accessible for each other — between the outer class and inner classes")])])]),t._v(" "),a("li",[t._v("refer to inner class outside the outer class — "),a("code",[t._v("OuterClass.InnerClass")])])])]),t._v(" "),a("li",[a("p",[t._v("inner class limits")]),t._v(" "),a("ul",[a("li",[t._v("static fields — must be "),a("code",[t._v("final")])]),t._v(" "),a("li",[t._v("static methods — cannot have static methods")])])]),t._v(" "),a("li",[a("p",[t._v("inner class after compilation or at runtime — synthesized regular classes")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Outer$Inner")]),t._v(" class — inner classes are translated into regular class files with "),a("code",[t._v("$")]),t._v(" (dollar signs) delimiting outer and inner class names\n"),a("ul",[a("li",[t._v("compared to regular classes — more access privileges to the outer class, like private fields")])])]),t._v(" "),a("li",[t._v("synthesized outer class reference — inner class has a "),a("code",[t._v("final")]),t._v(" "),a("code",[t._v("this$0")]),t._v(" field for reference to outer class generated by compiler")]),t._v(" "),a("li",[t._v("private inner classes — JVM does not support private classes, so the compiler produces a package-visible class with a private constructor, and a second package-visible constructor that calls the private one"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimePrinter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimePrinter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the last parameter type is synthesized solely to distinguish this constructor from others")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TalkingClock")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimePrinter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// actual call in outer class")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("mechanism for more privileged access to outer class — synthesized outer class backdoor method\n"),a("ul",[a("li",[t._v("backdoor method — outer class generates a package accessible static "),a("code",[t._v("access$0(OuterClass outer)")]),t._v(" method (method name can vary slightly), for inner class, outer class private field access is translated to backdoor method call")]),t._v(" "),a("li",[t._v("vulnerability — the generated backdoor method name is not legal in source code, but can be exploited by build or modify a class file")])])]),t._v(" "),a("li",[t._v("transparent to JVM — the virtual machine does not have any special knowledge about inner classes")]),t._v(" "),a("li",[t._v("verify by inspecting class files — use "),a("code",[t._v("javap -p")]),t._v(" to verify")])])]),t._v(" "),a("li",[a("p",[t._v("local inner class — class locally in a single method")]),t._v(" "),a("ul",[a("li",[t._v("no access modifier — never declared with an access specifier")]),t._v(" "),a("li",[t._v("restricted scope — scope is always restricted to the block being declared")]),t._v(" "),a("li",[t._v("effectively final closure — can access effectively final local variables\n"),a("ul",[a("li",[t._v("as final fields — behind the scenes stored as a final field of inner class, and spawned to constructor for initialization")])])]),t._v(" "),a("li",[t._v("anonymous inner subclass"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("construction parameters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inner class methods and data")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("implementing or extending — "),a("code",[t._v("SuperType")]),t._v(" can be an interface or a class, the inner class implements that interface or extends the class\n"),a("ul",[a("li",[t._v("a different subclass — take care that "),a("code",[t._v("equals()")]),t._v(" checking "),a("code",[t._v("getClass() == otherObject.getClass()")]),t._v(" may fail")])])]),t._v(" "),a("li",[t._v("no constructor redefining — anonymity cannot have constructors — the name of a constructor must be the same as the name of a class")]),t._v(" "),a("li",[t._v("use case\n"),a("ul",[a("li",[t._v("double brace initialization for "),a("code",[t._v("ArrayList")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tony"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("get the class from static methods, alternative to "),a("code",[t._v("T.class")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEnclosingClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("static inner class")]),t._v(" "),a("ul",[a("li",[t._v("static — do not have a outer class reference, can have static fields and methods")]),t._v(" "),a("li",[t._v("use case\n"),a("ul",[a("li",[t._v("enums are static inner classes")]),t._v(" "),a("li",[t._v("use in outer static methods — must be declared static if needed in a outer class static method")]),t._v(" "),a("li",[t._v("return type — can be used for holder for a method to return multiple values")])])]),t._v(" "),a("li",[t._v("the only static classes — only inner classes can be declared static")]),t._v(" "),a("li",[t._v("implicitly static\n"),a("ul",[a("li",[t._v("inner interfaces are implicitly "),a("code",[t._v("static")])]),t._v(" "),a("li",[t._v("inner classes inside interfaces are automatically "),a("code",[t._v("static public")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"error-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-handling"}},[t._v("#")]),t._v(" Error Handling")]),t._v(" "),a("h3",{attrs:{id:"debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[t._v("#")]),t._v(" Debugging")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("print or log")]),t._v(" "),a("ul",[a("li",[t._v("debug by print concatenated or formatted string")]),t._v(" "),a("li",[t._v("logging proxy — anonymous inner class overriding methods of interest with logger")]),t._v(" "),a("li",[t._v("stack trace — "),a("code",[t._v("Throwable::printStackTrace")]),t._v(" and rethrow, or "),a("code",[t._v("Thread.dumpStack()")]),t._v(" "),a("ul",[a("li",[t._v("capture string instead of printing to "),a("code",[t._v("System.err")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringWriter")]),t._v(" out "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" description "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("change handler for uncaught exceptions"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDefaultUncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uncaughtException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* logging... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("CLI options related to debugging — tbd")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ctrl")]),t._v(" + "),a("code",[t._v("\\")]),t._v(" — get thread dump when the program hangs??")]),t._v(" "),a("li",[a("code",[t._v("java")]),t._v(" "),a("ul",[a("li",[t._v("use "),a("code",[t._v("-verbose")]),t._v(" when launching JVM for diagnosing class path problems")]),t._v(" "),a("li",[a("code",[t._v("-XX:+HeapDumpOnOutOfMemoryError")]),t._v(", "),a("code",[t._v("-XX:HeapDumpPath=<file-or-dir-path>")])])])]),t._v(" "),a("li",[a("code",[t._v("javac")]),t._v(" with "),a("code",[t._v("-Xlint:all")])]),t._v(" "),a("li",[t._v("monitoring — "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/monitoring-tools-and-commands.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring Tools and Commands"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v("jconsole")]),t._v(" — start a graphical console to monitor and manage Java applications, to track memory consumption, thread usage, class loading")]),t._v(" "),a("li",[t._v("experimental — unsupported and might not be available in future JDK releases\n"),a("ul",[a("li",[a("code",[t._v("jps")]),t._v(" — list the instrumented JVMs on the target system")]),t._v(" "),a("li",[a("code",[t._v("jstat")]),t._v(" — monitor JVM statistics")]),t._v(" "),a("li",[a("code",[t._v("jstatd")]),t._v(" — monitor the creation and termination of instrumented Java HotSpot VMs")])])])])]),t._v(" "),a("li",[t._v("troubleshooting — "),a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/troubleshooting-tools-and-commands.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Troubleshooting Tools and Commands"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v("jcmd")]),t._v(": send diagnostic command requests to a running Java Virtual Machine (JVM)\n"),a("ul",[a("li",[t._v("example: NMT — see "),a("RouterLink",{attrs:{to:"/backend/java/JVM.html#memory"}},[t._v("#Memory")])],1)])]),t._v(" "),a("li",[a("code",[t._v("jdb")]),t._v(": find and fix bugs in Java platform programs")]),t._v(" "),a("li",[a("code",[t._v("jhsdb")]),t._v(": attach to a Java process or to a core dump from a crashed Java Virtual Machine (JVM)")]),t._v(" "),a("li",[t._v("experimental — unsupported and might not be available in future JDK releases\n"),a("ul",[a("li",[a("code",[t._v("jinfo")]),t._v(": generate Java configuration information for a specified Java process. For core files use "),a("code",[t._v("jhsdb jinfo")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("jmap")]),t._v(": print details of a specified process. For core files use "),a("code",[t._v("jhsdb jmap")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("jstack")]),t._v(": print Java stack traces of Java threads for a specified Java process. For core files use "),a("code",[t._v("jhsdb jstack")]),t._v(".")])])])])]),t._v(" "),a("li",[t._v("deprecated\n"),a("ul",[a("li",[a("code",[t._v("jhat")]),t._v(" — examining dump by "),a("code",[t._v("jmap")]),t._v(", removed since JDK 9")]),t._v(" "),a("li",[a("code",[t._v("java -Xprof")]),t._v(" for profiling, removed since JDK 10")]),t._v(" "),a("li",[a("code",[t._v("-agentlib:hprof")]),t._v(" — heap and CPU profiling, removed since JDK 9")])])]),t._v(" "),a("li",[a("code",[t._v("syslog")])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://visualvm.github.io/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("jvisualvm")]),a("OutboundLink")],1),t._v(" — VisualVM is a visual tool integrating commandline JDK tools and lightweight profiling capabilities.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mat")]),a("OutboundLink")],1),t._v(" — The Eclipse Memory Analyzer is a fast and feature-rich Java heap analyzer that helps you find memory leaks and reduce memory consumption")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Profiler - JProfiler"),a("OutboundLink")],1)])])])]),t._v(" "),a("h3",{attrs:{id:"exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[t._v("#")]),t._v(" Exceptions")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("unchecked exceptions and checked exceptions")]),t._v(" "),a("ul",[a("li",[t._v("unchecked — any exception that derives from the class "),a("code",[t._v("Error")]),t._v(" or the class "),a("code",[t._v("RuntimeException")]),t._v(" an unchecked exception")]),t._v(" "),a("li",[t._v("checked — All other exceptions are called checked exceptions, including "),a("code",[t._v("Exception")])]),t._v(" "),a("li",[t._v("why called checked — The compiler checks that you provide exception handlers for all checked exceptions")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Throwable")]),t._v(" — the superclass of all errors and exceptions, other objects cannot be thrown")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("constructors\n"),a("ul",[a("li",[a("code",[t._v("Throwable()")])]),t._v(" "),a("li",[a("code",[t._v("Throwable(String message)")])]),t._v(" "),a("li",[a("code",[t._v("Throwable(String message, Throwable cause)")])]),t._v(" "),a("li",[a("code",[t._v("protected Throwable(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)")])]),t._v(" "),a("li",[a("code",[t._v("Throwable(Throwable cause)")])])])]),t._v(" "),a("li",[t._v("stack trace\n"),a("ul",[a("li",[a("code",[t._v("void printStackTrace()")]),a("br"),t._v(" "),a("code",[t._v("void printStackTrace(PrintStream s)")]),a("br"),t._v(" "),a("code",[t._v("void printStackTrace(PrintWriter s)")])]),t._v(" "),a("li",[a("code",[t._v("void setStackTrace(StackTraceElement[] stackTrace)")])]),t._v(" "),a("li",[a("code",[t._v("StackTraceElement[] getStackTrace()")])]),t._v(" "),a("li",[a("code",[t._v("Throwable fillInStackTrace()")])])])]),t._v(" "),a("li",[t._v("error message\n"),a("ul",[a("li",[a("code",[t._v("String getMessage()")])]),t._v(" "),a("li",[a("code",[t._v("String getLocalizedMessage()")]),t._v(" — for overriding, defaults to "),a("code",[t._v("getMessage()")])]),t._v(" "),a("li",[a("code",[t._v("String toString()")]),t._v(" — class name, and message if applicable")])])]),t._v(" "),a("li",[t._v("wrapping\n"),a("ul",[a("li",[a("code",[t._v("Throwable initCause(Throwable cause)")])]),t._v(" "),a("li",[a("code",[t._v("Throwable getCause()")])])])]),t._v(" "),a("li",[t._v("suppress\n"),a("ul",[a("li",[a("code",[t._v("void addSuppressed(Throwable exception)")])]),t._v(" "),a("li",[a("code",[t._v("Throwable[] getSuppressed()")])])])]),t._v(" "),a("li",[t._v("subclasses\n"),a("ul",[a("li",[a("code",[t._v("Error")])]),t._v(" "),a("li",[a("code",[t._v("Exception")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Error")]),t._v(" — internal errors and resource exhaustion situations, not expected to throw by user")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Exception")]),t._v(" and its hierarchy")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("CloneNotSupportedException")])]),t._v(" "),a("li",[a("code",[t._v("InterruptedException")])]),t._v(" "),a("li",[a("code",[t._v("ReflectiveOperationException")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ClassNotFoundException")])]),t._v(" "),a("li",[a("code",[t._v("IllegalAccessException")])]),t._v(" "),a("li",[a("code",[t._v("InstantiationException")])]),t._v(" "),a("li",[a("code",[t._v("NoSuchFieldException")])]),t._v(" "),a("li",[a("code",[t._v("NoSuchMethodException")])])])]),t._v(" "),a("li",[a("code",[t._v("RuntimeException")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ArithmeticException")])]),t._v(" "),a("li",[a("code",[t._v("ArrayStoreException")])]),t._v(" "),a("li",[a("code",[t._v("ClassCastException")])]),t._v(" "),a("li",[a("code",[t._v("EnumConstantNotPresentException")])]),t._v(" "),a("li",[a("code",[t._v("IllegalArgumentException")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("IllegalThreadStateException")])]),t._v(" "),a("li",[a("code",[t._v("NumberFormatException")])])])]),t._v(" "),a("li",[a("code",[t._v("IllegalMonitorStateException")])]),t._v(" "),a("li",[a("code",[t._v("IllegalStateException")])]),t._v(" "),a("li",[a("code",[t._v("IndexOutOfBoundsException")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ArrayIndexOutOfBoundsException")])]),t._v(" "),a("li",[a("code",[t._v("StringIndexOutOfBoundsException")])])])]),t._v(" "),a("li",[a("code",[t._v("NegativeArraySizeException")])]),t._v(" "),a("li",[a("code",[t._v("NullPointerException")])]),t._v(" "),a("li",[a("code",[t._v("SecurityException")])]),t._v(" "),a("li",[a("code",[t._v("TypeNotPresentException")])]),t._v(" "),a("li",[a("code",[t._v("UnsupportedOperationException")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("StackTraceElement")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StackTraceElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("StackTraceElement(String declaringClass, String methodName, String fileName, int lineNumber)")])]),t._v(" "),a("li",[a("code",[t._v("Throwable::getStackTrace")])]),t._v(" "),a("li",[a("code",[t._v("Thread::getStackTrace")])]),t._v(" "),a("li",[a("code",[t._v("Thread.getAllStackTraces()")])])])]),t._v(" "),a("li",[t._v("stack info\n"),a("ul",[a("li",[a("code",[t._v("String getClassName()")])]),t._v(" "),a("li",[a("code",[t._v("String getFileName()")])]),t._v(" "),a("li",[a("code",[t._v("int getLineNumber()")])]),t._v(" "),a("li",[a("code",[t._v("String getMethodName()")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"exception-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling"}},[t._v("#")]),t._v(" Exception Handling")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("exception specification — declare checked exceptions")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modifiers return_type method_name(parameters) throws Exception1, Exception2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// java.io.FileInputStream")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n")])])]),a("ul",[a("li",[t._v("when to declare\n"),a("ul",[a("li",[t._v("nested method call — when calling a method that threatens to throw a checked exception")]),t._v(" "),a("li",[a("code",[t._v("throw")]),t._v(" checked exceptions spontaneously — check exceptions can be thrown only when declared by the method")])])]),t._v(" "),a("li",[t._v("if not declared — compiling error if a method fails to faithfully declare all checked exceptions or handle them")]),t._v(" "),a("li",[t._v("if caught — no need for "),a("code",[t._v("throws")])]),t._v(" "),a("li",[t._v("when overriding a method\n"),a("ul",[a("li",[t._v("more specific exceptions or not at all — exception specification cannot be more general; OK to throw more specific exceptions, or not to throw any exceptions in the subclass method")]),t._v(" "),a("li",[t._v("none if none in superclass — if the superclass method throws no checked exception at all, neither can the subclass")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("try catch")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// statements that might throw exceptions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optionally final in parameter")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emergency action for missing files")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnknownHostException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emergency action for unknown hosts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emergency action for all other I/O problems")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// close resources")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("multiple exception types — only needed when catching exception types that are not subclasses of one another"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnknownHostException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emergency action for missing files and unknown hosts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("implicit "),a("code",[t._v("final")]),t._v(" — the exception variable is implicitly "),a("code",[t._v("final")]),t._v(" when multiple exception types")])])]),t._v(" "),a("li",[t._v("rethrow — "),a("code",[t._v("throw")]),t._v(" in "),a("code",[t._v("catch")]),t._v(" block\n"),a("ul",[a("li",[t._v("exception wrapping — use "),a("code",[t._v("Throwable::initCause")]),t._v(" to throw as another wrapped type and "),a("code",[t._v("Throwable::getCause")]),t._v(" for original failure")]),t._v(" "),a("li",[t._v("bypass exception specification limit — rethrow a wrapped "),a("code",[t._v("RuntimeException")]),t._v(" if a method cannot throw checked exception\n"),a("ul",[a("li",[t._v("for "),a("code",[t._v("IOException")]),t._v(" — "),a("code",[t._v("java.io.UncheckedIOException")]),t._v(" is designed to wrap "),a("code",[t._v("IOException")])])])]),t._v(" "),a("li",[t._v("use generics to make checked exceptions unchecked, see "),a("a",{attrs:{href:"#generics"}},[t._v("Generics")])])])]),t._v(" "),a("li",[t._v("smart narrowing — when rethrow any exception"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SQLException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// access the database")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("level"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("example above — compiler now tracks the fact that "),a("code",[t._v("e")]),t._v(" originates from the "),a("code",[t._v("try")]),t._v(" block, it is valid to declare the enclosing method as throws "),a("code",[t._v("SQLException")])]),t._v(" "),a("li",[t._v("smart narrowing conditions\n"),a("ul",[a("li",[t._v("only checked exceptions — provided that the only checked exceptions in that block are "),a("code",[t._v("SQLException")]),t._v(" instances")]),t._v(" "),a("li",[a("code",[t._v("final")]),t._v(" "),a("code",[t._v("e")]),t._v(" — and provided that "),a("code",[t._v("e")]),t._v(" is not changed in the catch block")])])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("finally")]),t._v(" — always executed, can be used without "),a("code",[t._v("catch")])]),t._v(" "),a("ul",[a("li",[t._v("order — executes before the method return, if "),a("code",[t._v("return")]),t._v(" used before "),a("code",[t._v("finally")])]),t._v(" "),a("li",[t._v("mask "),a("code",[t._v("return")]),t._v(" and exceptions\n"),a("ul",[a("li",[a("code",[t._v("return")]),t._v(" in "),a("code",[t._v("finally")]),t._v(" will mask previous "),a("code",[t._v("return")])]),t._v(" "),a("li",[t._v("exceptions in "),a("code",[t._v("finally")]),t._v(" will mask exceptions previously thrown")])])]),t._v(" "),a("li",[t._v("handle exceptions in "),a("code",[t._v("finally")]),t._v(" "),a("ul",[a("li",[t._v("wrap a "),a("code",[t._v("try catch")]),t._v(" block to handle possible exception thrown by "),a("code",[t._v("finally")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code that might throw exceptions")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in.close();")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// show error message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("rethrow the original, suppress exception thrown by "),a("code",[t._v("finally")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code that might throw exceptions")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSuppressed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("try (resources)")]),t._v(" — auto close when exiting the block")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resource")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// work with res")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("the resource needs to implement "),a("code",[t._v("AutoCloseable")]),t._v(" which has a single method"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoCloseable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("multiple resources — use "),a("code",[t._v(";")]),t._v(" as delimiter")]),t._v(" "),a("li",[t._v("when both "),a("code",[t._v("try")]),t._v(" block and "),a("code",[t._v("AutoCloseable::close")]),t._v(" throw exception — any exceptions thrown by "),a("code",[t._v("close")]),t._v(" methods are suppressed")]),t._v(" "),a("li",[t._v("can have "),a("code",[t._v("catch")]),t._v(" and "),a("code",[t._v("finally")]),t._v(" blocks, but not recommended")])])])]),t._v(" "),a("h3",{attrs:{id:"assertion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assertion"}},[t._v("#")]),t._v(" Assertion")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("assert")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" condition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("condition")]),t._v(" — throw an "),a("code",[t._v("AssertionError")]),t._v(" if the assertion fails")]),t._v(" "),a("li",[a("code",[t._v("expression")]),t._v(" — passed to "),a("code",[t._v("AssertionError::new")]),t._v(" to produce a message string, using "),a("code",[t._v("String::valueOf")]),t._v(" when converting")]),t._v(" "),a("li",[t._v("enabling and disabling\n"),a("ul",[a("li",[t._v("disabled — disabled by default, "),a("code",[t._v("-da")]),t._v(" or "),a("code",[t._v("-disableassertions")]),t._v(" to explicitly disable certain classes")]),t._v(" "),a("li",[t._v("enable — by "),a("code",[t._v("-ea")]),t._v(" or "),a("code",[t._v("-enableassertions")]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-enableassertions")]),t._v(" MyApp\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-ea:MyClass")]),t._v(" -ea:com.mycompany.mylib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". MyApp "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for specific classes")]),t._v("\n")])])]),a("ul",[a("li",[t._v("enabling mechanism — when enabled, no recompiling, but the class loader stops stripping out the assertion code")])])]),t._v(" "),a("li",[t._v("also for JVM loaded classes — some classes are not loaded by a class loader but directly by the virtual machine, but above switches still work")]),t._v(" "),a("li",[t._v("enable for system classes — "),a("code",[t._v("-enablesystemassertions")]),t._v(" / "),a("code",[t._v("-esa")]),t._v(" for system classes")])])])])]),t._v(" "),a("li",[a("p",[t._v("assert use")]),t._v(" "),a("ul",[a("li",[t._v("fatal errors — assertion failures are intended to be fatal, unrecoverable errors")]),t._v(" "),a("li",[t._v("for development and testing — assertion checks are turned on only during development and testing")]),t._v(" "),a("li",[t._v("use for precondition — parameter checking")]),t._v(" "),a("li",[t._v("use for documenting assumptions"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use comments to document underlying assumptions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (i % 3 == 2)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use assertion instead")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// even better assertion")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("AssertionError")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AssertionError")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),a("p",[t._v("see "),a("RouterLink",{attrs:{to:"/backend/java/javaMisc.html#logging"}},[t._v("Logging")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"generics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generics"}},[t._v("#")]),t._v(" Generics")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Generics")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("further reading"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("diamond syntax")]),t._v(" "),a("li",[t._v("raw and typed\n"),a("ul",[a("li",[t._v("typed are subtypes — typed ones are subtypes of the raw one")]),t._v(" "),a("li",[t._v("warning when using raw types")]),t._v(" "),a("li",[t._v("raw at runtime — types only checked when compiling, all are raw without type at runtime")])])]),t._v(" "),a("li",[t._v("differently parameterized, different type — no relationship between "),a("code",[t._v("Generic<Type_2>")]),t._v(" and "),a("code",[t._v("Generic<Type_2>")]),t._v(", regardless of the relationship between the type variables")]),t._v(" "),a("li",[t._v("at runtime in JVM\n"),a("ul",[a("li",[t._v("erased to bound — type variables are erased and replaced by first bound, or "),a("code",[t._v("Object")])]),t._v(" "),a("li",[t._v("cast when needed — compiler inserts casts to other bounds when necessary\n"),a("ul",[a("li",[t._v("place the predominant interface at the first one for performance")])])]),t._v(" "),a("li",[t._v("bridge methods are synthesized when necessary (when overriding)\n"),a("ul",[a("li",[t._v("override method can have a different signature — due to type erasure of generics or different return type")]),t._v(" "),a("li",[t._v("bridge method — the same signature of super type method, calls actual method")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("generic syntax")]),t._v(" "),a("ul",[a("li",[t._v("name conventions\n"),a("ul",[a("li",[a("code",[t._v("E")]),t._v(" — for the element type of a collection")]),t._v(" "),a("li",[a("code",[t._v("K")]),t._v(" and "),a("code",[t._v("V")]),t._v(" — for key and value types of a table")]),t._v(" "),a("li",[a("code",[t._v("T")]),t._v(" (and the neighboring "),a("code",[t._v("U")]),t._v(" and "),a("code",[t._v("S")]),t._v(") — for “any type at all”")])])]),t._v(" "),a("li",[t._v("generic class syntax"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("generic methods inside ordinary classes"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SafeVarargs")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to suppress Warning: Possible heap pollution from parameterized vararg type")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMiddle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("call — type parameter before method name, "),a("code",[t._v("className.<type>method(params)")]),t._v(" "),a("ul",[a("li",[t._v("avoid parsing ambiguities in C++ — "),a("code",[t._v("g(f<a,b>(c))")])])])]),t._v(" "),a("li",[t._v("type inference — type can be inferred from parameters, but can be problematic when multiple super types")])])]),t._v(" "),a("li",[t._v("generic bounds — "),a("code",[t._v("extends")]),t._v(", including"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("class bound — must be the first one in the bounds list")]),t._v(" "),a("li",[t._v("interface bound and class bound — arbitrary number of interfaces, but at most one class")]),t._v(" "),a("li",[a("code",[t._v("&")])])])]),t._v(" "),a("li",[t._v("wildcards — "),a("code",[t._v("?")]),t._v(" "),a("ul",[a("li",[t._v("wildcard type "),a("code",[t._v("?")]),t._v(" — for a variable of type "),a("code",[t._v("?")]),t._v(", can only assign when left value is "),a("code",[t._v("Object")]),t._v(", or right value is "),a("code",[t._v("null")]),t._v(" "),a("ul",[a("li",[t._v("example — "),a("code",[t._v("Collection<?>")]),t._v(" can be used as a super type for any "),a("code",[t._v("Collection")]),t._v(" while "),a("code",[t._v("Collection<Object>")]),t._v(" cannot; can read "),a("code",[t._v("Object")]),t._v(" from but can only add "),a("code",[t._v("null")]),t._v(" to")]),t._v(" "),a("li",[t._v("problem when nested: signature "),a("code",[t._v("Iterable<Map<String, ?>>")]),t._v(" not applicable for argument "),a("code",[t._v("Iterable<Map<String, Object>>")]),t._v(" or anything similar — use "),a("code",[t._v("Iterable<? extends Map<String, ?>>")])])])]),t._v(" "),a("li",[a("code",[t._v("? extends SomeType")]),t._v(" — including; a variable of this type can only be right value"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Manager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" managerBuddies "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ceo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" wildcardBuddies "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" managerBuddies"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wildcardBuddies"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function signature is `? extends Employee getFirst()`, OK")]),t._v("\nwildcardBuddies"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowlyEmployee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function signature is `void setFirst(? extends Employee)`, compile-time error")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("? super SomeType")]),t._v(" — including; the contrary of "),a("code",[t._v("? extends SomeType")]),t._v(" (left value can only be "),a("code",[t._v("Object")]),t._v(")\n"),a("ul",[a("li",[t._v("example — "),a("code",[t._v("<T extends Comparable<? super T>>")]),t._v(", a rescue when "),a("code",[t._v("T")]),t._v(" does not implement "),a("code",[t._v("Comparable")]),t._v(" but its super class does")])])]),t._v(" "),a("li",[t._v("wildcard capture — when the wildcard represents a single, definite type, it can be captured by type parameter"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapHelper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapHelper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("use generics to make checked exceptions unchecked")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throwAs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do work")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the compiler will believe that t becomes an unchecked exception")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throwAs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// alternatively, see https://stackoverflow.com/questions/31316581/a-peculiar-feature-of-exception-type-inference-in-java-8")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Block.throwAs(t);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("limits of generics")]),t._v(" "),a("ul",[a("li",[t._v("type parameters cannot be primitive types — not compatible with "),a("code",[t._v("Object")]),t._v(" when type erased at runtime")]),t._v(" "),a("li",[t._v("not in static context — type variables not valid in static context (parameterized types are available)"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" singleInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingleInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... construct new instance of T")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" singleInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("not when "),a("code",[t._v("throw")]),t._v(" or "),a("code",[t._v("catch")]),t._v(" — cannot throw or catch instances of a generic class")]),t._v(" "),a("li",[t._v("not when cast and "),a("code",[t._v("instanceof")]),t._v(" — compile warning when cast ("),a("code",[t._v("(Pair<String>) a")]),t._v("), compile error when "),a("code",[t._v("instanceof")]),t._v(" ("),a("code",[t._v("a instanceof Pair<T>")]),t._v(")")]),t._v(" "),a("li",[t._v("name clash\n"),a("ul",[a("li",[t._v("name clash with methods in "),a("code",[t._v("Object")]),t._v(" — error by clash with "),a("code",[t._v("Object::equals")]),t._v(" when defining "),a("code",[t._v("equals(T other)")])]),t._v(" "),a("li",[t._v("error when generic interfaces implemented more than once with different arguments — will be a conflict with the synthesized bridge methods"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Manager")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Manager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bridge method for Comparable<X>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("heap pollution, cannot initialize arrays of parameterized types, but can be declared — error when "),a("code",[t._v("new Pair<String>[10]")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// legal but not safe workaround, possible heap pollution")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" table "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// heap pollution")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" objArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// defined above")]),t._v("\nobjArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("cannot instantiate type variable — error when "),a("code",[t._v("new T()")]),t._v(" "),a("ul",[a("li",[t._v("workaround — provide the constructor using lambda"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makePair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makePair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" constr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("workaround — use reflection"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makePair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makePair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" cl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("cannot construct generic array — error when "),a("code",[t._v("new T[n]")]),t._v(" "),a("ul",[a("li",[t._v("parameterized vararg type ("),a("code",[t._v("T...")]),t._v(") — against the rule, but can use "),a("code",[t._v("@SafeVarargs")]),t._v(" to suppress warning")]),t._v(" "),a("li",[t._v("workaround — use "),a("code",[t._v("Object[]")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no cast needed")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("workaround — use cast from "),a("code",[t._v("Object[]")]),t._v(", type erasure makes the cast undetectable at runtime"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" elements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("not work when assigning to actual type — "),a("code",[t._v("ArrayList::toArray")]),t._v(" either return "),a("code",[t._v("Object[]")]),t._v(" or take a "),a("code",[t._v("T[]")]),t._v(" parameter to return "),a("code",[t._v("T[]")])])])]),t._v(" "),a("li",[t._v("workaround — provide constructor or use reflection, see above")])])])])])]),t._v(" "),a("h2",{attrs:{id:"annotations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#annotations"}},[t._v("#")]),t._v(" Annotations")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("annotations")]),t._v(" "),a("ul",[a("li",[t._v("syntax — each annotation is preceded by an "),a("code",[t._v("@")]),t._v(" symbol, used like a modifier and is placed before the annotated item without a semicolon\n"),a("ul",[a("li",[t._v("an item can have multiple annotations")]),t._v(" "),a("li",[t._v("one annotation can be used multiple times on one item if "),a("code",[t._v("@Repeatable")])])])]),t._v(" "),a("li",[t._v("annotation interfaces — define annotations, creates actual Java interfaces, implicitly extend "),a("code",[t._v("Annotation")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("modifiers "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationName")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("elementName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  type "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("elementName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("cannot be extended or implemented explicitly")]),t._v(" "),a("li",[t._v("when being processed — tools that process annotations receive objects implementing annotation interfaces, and call methods to retrieve elements")]),t._v(" "),a("li",[a("code",[t._v("java.lang.annotation.Annotation")]),t._v(" — the common interface extended by all annotation types. Note that an interface that manually extends this one does not define an annotation type."),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Annotation")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("Class<? extends Annotation> annotationType()")])])])])])]),t._v(" "),a("li",[t._v("annotation places\n"),a("ul",[a("li",[t._v("declarations")]),t._v(" "),a("li",[t._v("type uses")])])])])]),t._v(" "),a("li",[a("p",[t._v("annotation elements")]),t._v(" "),a("ul",[a("li",[t._v("elements of annotations — parameters when annotating, all element values must be compile-time constants, correspond to methods of annotation interfaces"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AnnotationName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementName1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elementName2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AnnotationName")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AnnotationName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("valueForSingleElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("marker annotation — annotations no elements need to be specified when annotating")]),t._v(" "),a("li",[t._v("single value annotation — only one element called "),a("code",[t._v("value")])])])]),t._v(" "),a("li",[t._v("annotation element types — non-null, usually "),a("code",[t._v('""')]),t._v(" or "),a("code",[t._v("Void.class")]),t._v(" as substitution of "),a("code",[t._v("null")]),t._v(" "),a("ul",[a("li",[t._v("primitive types")]),t._v(" "),a("li",[a("code",[t._v("String")])]),t._v(" "),a("li",[a("code",[t._v("Class")])]),t._v(" "),a("li",[a("code",[t._v("Enum")])]),t._v(" "),a("li",[t._v("annotation types, error to introduce circular dependencies"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reference")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Reference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an annotation type")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@BugReport")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Reference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3352627"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// when annotating")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("arrays of the preceding types (flat), enclosed in braces when annotating"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@BugReport")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reportedBy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Carl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@BugReport")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reportedBy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Joe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// OK, same as {"Joe"}')]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("declaration annotations")]),t._v(" "),a("ul",[a("li",[t._v("annotation target — implementing classes of "),a("code",[t._v("AnnotatedElement")]),t._v(": "),a("code",[t._v("Class")]),t._v(" (also interfaces), "),a("code",[t._v("Constructor")]),t._v(", "),a("code",[t._v("Executable")]),t._v(", "),a("code",[t._v("Field")]),t._v(", "),a("code",[t._v("Method")]),t._v(", "),a("code",[t._v("Package")]),t._v(", "),a("code",[t._v("Parameter")]),t._v("; sub-interface "),a("code",[t._v("TypeVariable")]),t._v(" and local variables\n"),a("ul",[a("li",[t._v("package annotations — in "),a("code",[t._v("package-info.java")]),t._v(", can only be processed at the source level"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Package-level javadoc\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GPL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gnu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GPL")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("parameter annotations — explicitly declare "),a("code",[t._v("this")]),t._v(" if necessary")])])]),t._v(" "),a("li",[t._v("local variable annotations — can only be processed at the source level")]),t._v(" "),a("li",[t._v("an annotation can annotate itself")])])]),t._v(" "),a("li",[a("p",[t._v("type use ("),a("code",[t._v("ElementType.TYPE_USE")]),t._v(") annotations — annotate types, as sub-interfaces of "),a("code",[t._v("AnnotatedElement")])]),t._v(" "),a("ul",[a("li",[t._v("type arguments — "),a("code",[t._v("List<@NonNull String>")]),t._v(", "),a("code",[t._v("List<@Localized ? extends Message>")]),t._v(", "),a("code",[t._v("List<? extends @Localized Message>")])]),t._v(" "),a("li",[t._v("arrays — "),a("code",[t._v("@NonNull String[][] words")]),t._v(" ("),a("code",[t._v("words[i][j]")]),t._v(" is not "),a("code",[t._v("null")]),t._v("), "),a("code",[t._v("String @NonNull [][] words")]),t._v(" ("),a("code",[t._v("words")]),t._v(" is not "),a("code",[t._v("null")]),t._v("), "),a("code",[t._v("String[] @NonNull [] words")]),t._v(" ("),a("code",[t._v("words[i]")]),t._v(" is not "),a("code",[t._v("null")]),t._v(")")]),t._v(" "),a("li",[t._v("when inheriting — "),a("code",[t._v("class Warning extends @Localized Message")])]),t._v(" "),a("li",[t._v("when "),a("code",[t._v("new")]),t._v(" — "),a("code",[t._v("new @Localized String(...)")])]),t._v(" "),a("li",[t._v("casts and "),a("code",[t._v("instanceof")]),t._v(" — "),a("code",[t._v("(@Localized String) text")]),t._v(", "),a("code",[t._v("if (text instanceof @Localized String)")])]),t._v(" "),a("li",[t._v("exception specifications — "),a("code",[t._v("public String read() throws @Localized IOException")])]),t._v(" "),a("li",[t._v("method references — "),a("code",[t._v("@Localized Message::getText")])]),t._v(" "),a("li",[t._v("cannot"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NonNull")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR: Cannot annotate class literal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("@"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NonNull")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR: Cannot annotate import")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"standard-annotations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard-annotations"}},[t._v("#")]),t._v(" Standard Annotations")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("for compilation")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Deprecated")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSTRUCTOR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIELD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOCAL_VARIABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PACKAGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PARAMETER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deprecated")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("@SuppressWarnings")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIELD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PARAMETER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSTRUCTOR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOCAL_VARIABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SOURCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuppressWarnings")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v('@SuppressWarnings("fallthrough")')])])])]),t._v(" "),a("li",[a("code",[t._v("@Override")]),t._v(" — error when not overriding but define a new method"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SOURCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Override")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.Generated")]),t._v(" — mark source code that has been generated. It can also be used to differentiate user written code from generated code in a single file (in "),a("code",[t._v("javax.annotation.processing")]),t._v(" for post JDK 8)"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SOURCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PACKAGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ANNOTATION_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSTRUCTOR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIELD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOCAL_VARIABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PARAMETER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Generated")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("@FunctionalInterface")]),t._v(" — error if conditions of functional interfaces not meet"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FunctionalInterface")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("@SafeVarargs")]),t._v(" — assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSTRUCTOR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SafeVarargs")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("meta")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ANNOTATION_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("@java.lang.annotation.Target")]),t._v(" — the contexts in which an annotation type is applicable, any declaration except a type parameter declaration if absent\n"),a("ul",[a("li",[a("code",[t._v("ElementType[] value")])]),t._v(" "),a("li",[a("code",[t._v("enum java.lang.annotation.ElementType")]),t._v(" — "),a("code",[t._v("ANNOTATION_TYPE")]),t._v(", "),a("code",[t._v("CONSTRUCTOR")]),t._v(", "),a("code",[t._v("FIELD")]),t._v(", "),a("code",[t._v("LOCAL_VARIABLE")]),t._v(", "),a("code",[t._v("METHOD")]),t._v(", "),a("code",[t._v("PACKAGE")]),t._v(", "),a("code",[t._v("PARAMETER")]),t._v(", "),a("code",[t._v("TYPE")]),t._v(", "),a("code",[t._v("TYPE_PARAMETER")]),t._v(", "),a("code",[t._v("TYPE_USE")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("TYPE")]),t._v(" — class, interface (including annotation type), or enum declaration")])])])])]),t._v(" "),a("li",[a("code",[t._v("@java.lang.annotation.Retention")]),t._v(" — how long annotations with the annotated type are to be retained, defaults to "),a("code",[t._v("RetentionPolicy.CLASS")]),t._v(" if absent\n"),a("ul",[a("li",[a("code",[t._v("RetentionPolicy value")])]),t._v(" "),a("li",[a("code",[t._v("enum java.lang.annotation.RetentionPolicy")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CLASS")]),t._v(" — in class files but not the VM")]),t._v(" "),a("li",[a("code",[t._v("RUNTIME")])]),t._v(" "),a("li",[a("code",[t._v("SOURCE")])])])])])]),t._v(" "),a("li",[a("code",[t._v("@java.lang.annotation.Documented")]),t._v(" — indicates that annotations with a type are to be documented by javadoc and similar tools by default")]),t._v(" "),a("li",[a("code",[t._v("@java.lang.annotation.Inherited")]),t._v(" — indicates that an annotation type is automatically inherited, has no effect if the annotated type is used to annotate anything other than a class")]),t._v(" "),a("li",[a("code",[t._v("@java.lang.annotation.Repeatable")]),t._v(" — indicates the annotation type is repeatable, with the containing annotation type to hold repeated annotations"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Repeatable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestCases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestCase")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("params")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestCases")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("Class<? extends Annotation> value")]),t._v(" — a container annotation that holds the repeated annotations in an array")])])])])]),t._v(" "),a("li",[a("p",[t._v("for java EE resource managing (deprecated from JDK 9 and removed from JDK 11, available in Maven)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@javax.annotation.PostConstruct")]),t._v(" — used on a method that needs to be executed after dependency injection is done"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostConstruct")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Only one method can be annotated with this annotation")]),t._v(" "),a("li",[t._v("annotated method signature — see javadoc")])])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.PreDestroy")]),t._v(" — used on methods as a callback notification to signal that the instance is in the process of being removed by the container"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PreDestroy")]),t._v("\n")])])]),a("ul",[a("li",[t._v("annotated method requirements — see javadoc")])])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.Resource")]),t._v(" — marks a resource that is needed by the application"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIELD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resource")]),t._v("\n")])])]),a("ul",[a("li",[t._v("example"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc/mydb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataSource")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.Resources")]),t._v(" — multiple resources")])])])]),t._v(" "),a("h3",{attrs:{id:"source-level-annotation-processing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-level-annotation-processing"}},[t._v("#")]),t._v(" Source-Level Annotation Processing")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("CLI")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("javac -processor <class1>[,<class2>,<class3>...] sourceFiles\n")])])]),a("ul",[a("li",[t._v("also other alternatives")]),t._v(" "),a("li",[t._v("produce new source files until no more — Each annotation processor is executed in turn and given the annotations in which it expressed an interest. If an annotation processor creates a new source file, the process is repeated. Once a processing round yields no further source files, all source files are compiled.\n"),a("ul",[a("li",[a("code",[t._v("-XprintRounds")]),t._v(" — show rounds")]),t._v(" "),a("li",[t._v("cannot modify source files — use with agents or bytecode engineering tools")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("javax.annotation.processing")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SupportedAnnotationTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.annotations.ToString"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SupportedSourceVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SourceVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RELEASE_8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ToStringAnnotationProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoundEnvironment")]),t._v(" currentRound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("javax.annotation.processing.AbstractProcessor")]),t._v(" — for processors to extend"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Processor")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("interface")]),t._v(" "),a("code",[t._v("javax.annotation.processing.RoundEnvironment")])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.processing.SupportedAnnotationTypes")])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.processing.SupportedOptions")])]),t._v(" "),a("li",[a("code",[t._v("@javax.annotation.processing.SupportedSourceVersion")])])])]),t._v(" "),a("li",[a("p",[t._v("language model (AST) — "),a("code",[t._v("javax.lang.model")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("javax.lang.model.element.Element")]),t._v(" — AST nodes")])])])]),t._v(" "),a("h2",{attrs:{id:"metaprogramming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metaprogramming"}},[t._v("#")]),t._v(" Metaprogramming")]),t._v(" "),a("h3",{attrs:{id:"reflection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflection"}},[t._v("#")]),t._v(" Reflection")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("runtime type identification — used by VM for method resolution")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object::getClass")])]),t._v(" "),a("li",[a("code",[t._v("Class::forName")])]),t._v(" "),a("li",[a("code",[t._v("T.class")]),t._v(" if "),a("code",[t._v("T")]),t._v(" is any Java type (or "),a("code",[t._v("void.class")]),t._v(", "),a("code",[t._v("int.class")]),t._v(" etc.)")]),t._v(" "),a("li",[t._v("type capturing — use "),a("code",[t._v("Class<T>")]),t._v(" as a parameter for type match, when called with a class object, the type parameter "),a("code",[t._v("T")]),t._v(" will be matched")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.lang.reflect")]),t._v(" package (see "),a("a",{attrs:{href:"#proxy"}},[t._v("Proxy")]),t._v(" for proxies)")]),t._v(" "),a("ul",[a("li",[t._v("outside "),a("code",[t._v("java.lang.reflect")]),t._v(" — "),a("code",[t._v("java.lang.Class")]),t._v(", "),a("code",[t._v("java.lang.Package")]),t._v(" (implements "),a("code",[t._v("AnnotatedElement")]),t._v(")")]),t._v(" "),a("li",[t._v("interface hierarchy\n"),a("ul",[a("li",[a("code",[t._v("Member")]),t._v(" — a field or a method or a constructor")]),t._v(" "),a("li",[a("code",[t._v("AnnotatedElement")]),t._v(" — represents an annotated element with methods getting annotations\n"),a("ul",[a("li",[a("code",[t._v("AnnotatedType")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AnnotatedArrayType")])]),t._v(" "),a("li",[a("code",[t._v("AnnotatedParameterizedType")])]),t._v(" "),a("li",[a("code",[t._v("AnnotatedTypeVariable")])]),t._v(" "),a("li",[a("code",[t._v("AnnotatedWildcardType")])])])]),t._v(" "),a("li",[a("code",[t._v("GenericDeclaration")])]),t._v(" "),a("li",[a("code",[t._v("TypeVariable<D>")]),t._v(" (also extends "),a("code",[t._v("java.lang.reflect.Type)")])])])]),t._v(" "),a("li",[a("code",[t._v("Type")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GenericArrayType")])]),t._v(" "),a("li",[a("code",[t._v("ParameterizedType")])]),t._v(" "),a("li",[a("code",[t._v("TypeVariable<D>")]),t._v(" (also extends "),a("code",[t._v("java.lang.reflect.AnnotatedElement")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("WildcardType")])])])])])]),t._v(" "),a("li",[t._v("class hierarchy\n"),a("ul",[a("li",[a("code",[t._v("AnnotatedElement")]),t._v(" interface\n"),a("ul",[a("li",[a("code",[t._v("Parameter")])]),t._v(" "),a("li",[a("code",[t._v("AccessibleObject")]),t._v(" — allows suppression of access checks if the necessary "),a("code",[t._v("java.lang.reflect.ReflectPermission")]),t._v(" is available, access is checked every time a reflective method is invoked\n"),a("ul",[a("li",[a("code",[t._v("Member")]),t._v(" interface\n"),a("ul",[a("li",[a("code",[t._v("Executable")]),t._v(" (implements "),a("code",[t._v("GenericDeclaration")]),t._v(")\n"),a("ul",[a("li",[a("code",[t._v("Constructor<T>")]),t._v(" — "),a("code",[t._v("T newInstance(Object... initargs)")])]),t._v(" "),a("li",[a("code",[t._v("Method")]),t._v(" — "),a("code",[t._v("Object invoke(Object obj, Object... args)")])])])]),t._v(" "),a("li",[a("code",[t._v("Field")]),t._v(" — get and set methods")])])])])])])]),t._v(" "),a("li",[a("code",[t._v("Array")]),t._v(" — get, set methods and "),a("code",[t._v("newInstance")])]),t._v(" "),a("li",[a("code",[t._v("Modifier")]),t._v(" — as a bit vector")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Class")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenericDeclaration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotatedElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeDescriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OfField")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("reflection\n"),a("ul",[a("li",[a("code",[t._v("String getName()")])]),t._v(" "),a("li",[a("code",[t._v("String getTypeName()")])]),t._v(" "),a("li",[a("code",[t._v("String toString()")])]),t._v(" "),a("li",[a("code",[t._v("Class<?> getComponentType()")]),t._v(" — type of elements in an array, "),a("code",[t._v("null")]),t._v(" if "),a("code",[t._v("this")]),t._v(" is not an array")]),t._v(" "),a("li",[a("code",[t._v("ClassLoader getClassLoader()")])]),t._v(" "),a("li",[a("code",[t._v("T[] getEnumConstants()")])]),t._v(" "),a("li",[a("code",[t._v("Class<? super T> getSuperclass()")])])])]),t._v(" "),a("li",[t._v("instance creation\n"),a("ul",[a("li",[a("code",[t._v("T newInstance()")])]),t._v(" "),a("li",[a("code",[t._v("T cast(Object obj) throws ClassCastException")])])])]),t._v(" "),a("li",[t._v("method reflection — from this class and superclasses, "),a("code",[t._v("declared-")]),t._v(" only for this class\n"),a("ul",[a("li",[a("code",[t._v("Field[] getFields()")])]),t._v(" "),a("li",[a("code",[t._v("Field getField(String name)")])]),t._v(" "),a("li",[a("code",[t._v("Field[] getDeclaredFields()")])]),t._v(" "),a("li",[a("code",[t._v("Field getDeclaredField(String name)")])]),t._v(" "),a("li",[a("code",[t._v("Method[] getMethods()")])]),t._v(" "),a("li",[a("code",[t._v("Method getMethod(String name, Class<?>... parameterTypes)")])]),t._v(" "),a("li",[a("code",[t._v("Method[] getDeclaredMethods()")])]),t._v(" "),a("li",[a("code",[t._v("Method getDeclaredMethod(String name, Class<?>... parameterTypes)")])]),t._v(" "),a("li",[a("code",[t._v("Constructor[] getConstructors()")])]),t._v(" "),a("li",[a("code",[t._v("Constructor<T> getConstructor(Class<?>... parameterTypes)")])]),t._v(" "),a("li",[a("code",[t._v("Constructor[] getDeclaredConstructors()")])]),t._v(" "),a("li",[a("code",[t._v("Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)")])])])]),t._v(" "),a("li",[t._v("inner class and outer class\n"),a("ul",[a("li",[a("code",[t._v("Class<?>[] getClasses()")])]),t._v(" "),a("li",[a("code",[t._v("Class<?> getEnclosingClass()")])])])]),t._v(" "),a("li",[t._v("generics\n"),a("ul",[a("li",[a("code",[t._v("Type[] getGenericInterfaces()")])]),t._v(" "),a("li",[a("code",[t._v("Type getGenericSuperclass()")])]),t._v(" "),a("li",[a("code",[t._v("TypeVariable<Class<T>>[] getTypeParameters()")])])])]),t._v(" "),a("li",[t._v("get resources, delegating to class loader\n"),a("ul",[a("li",[a("code",[t._v("URL getResource(String name)")])]),t._v(" "),a("li",[a("code",[t._v("InputStream getResourceAsStream(String name)")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("proxies")]),t._v(" "),a("ul",[a("li",[t._v("usage — at runtime, create new classes that implement given interfaces, with a method invocation handler")]),t._v(" "),a("li",[t._v("proxy class definition\n"),a("ul",[a("li",[t._v("runtime defined class — proxy objects are of classes defined at runtime with names such as "),a("code",[t._v("$Proxy0")])]),t._v(" "),a("li",[t._v("modifiers and inheritance — all proxies are "),a("code",[t._v("public final")]),t._v(" and extends "),a("code",[t._v("Proxy")])]),t._v(" "),a("li",[t._v("cached — only one proxy class for a particular class loader and ordered set of interfaces")]),t._v(" "),a("li",[t._v("package — default package if given interfaces all public, else belongs to the package of given non-public interfaces")])])]),t._v(" "),a("li",[t._v("proxying — all proxy classes override the "),a("code",[t._v("toString()")]),t._v(", "),a("code",[t._v("equals()")]),t._v(", and "),a("code",[t._v("hashCode()")]),t._v(", and given interface methods with "),a("code",[t._v("InvocationHandler::invoke")]),t._v(" "),a("ul",[a("li",[t._v("other methods in "),a("code",[t._v("Object")]),t._v(" are untouched")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("interface java.lang.reflect.InvocationHandler")]),t._v(" — invocation handlers")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("public Object invoke(Object proxy, Method method, Object[] args) throws Throwable")])]),t._v(" "),a("li",[t._v("additional data is stored in the invocation handler")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.lang.reflect.Proxy")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("creation\n"),a("ul",[a("li",[a("code",[t._v("static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)")])]),t._v(" "),a("li",[a("code",[t._v("static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces)")])])])]),t._v(" "),a("li",[a("code",[t._v("static InvocationHandler getInvocationHandler(Object proxy)")])]),t._v(" "),a("li",[a("code",[t._v("static boolean isProxyClass(Class<?> cl)")])])])]),t._v(" "),a("li",[a("p",[t._v("use example")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProxyTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" clz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newProxyInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TraceHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalRandom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("current")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TraceHandler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InvocationHandler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TraceHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" proxy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print implicit argument")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print method name")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"("')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print explicit arguments")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// invoke actual method")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"handles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handles"}},[t._v("#")]),t._v(" Handles")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("java.lang.invoke")]),t._v(" package special treatment by JVM")]),t._v(" "),a("ul",[a("li",[t._v("signature polymorphism — for some methods in "),a("code",[t._v("MethodHandle")]),t._v(", "),a("code",[t._v("VarHandle")]),t._v(", see below")]),t._v(" "),a("li",[a("code",[t._v("Constable")]),t._v(" — for "),a("code",[t._v("MethodHandle")]),t._v(", "),a("code",[t._v("VarHandle")]),t._v(" and "),a("code",[t._v("MethodType")]),t._v(", see below")]),t._v(" "),a("li",[a("code",[t._v("invokedynamic")]),t._v(" instruction — makes use of bootstrap "),a("code",[t._v("MethodHandle")]),t._v(" constants to dynamically resolve "),a("code",[t._v("CallSite")]),t._v(" objects for custom method invocation behavior")]),t._v(" "),a("li",[a("code",[t._v("ldc")]),t._v(" instruction — makes use of bootstrap "),a("code",[t._v("MethodHandle")]),t._v(" constants to dynamically resolve custom constant values")])])]),t._v(" "),a("li",[a("p",[t._v("signature polymorphism — for example, methods of other signatures can be invoked from "),a("code",[t._v("MethodHandle.invoke(Object... args)")])]),t._v(" "),a("ul",[a("li",[t._v("signature polymorphism method calls at compile and runtime\n"),a("ul",[a("li",[t._v("compile — the Java compiler emits an "),a("code",[t._v("invokevirtual")]),t._v(" instruction with the given symbolic type descriptor against the named method as usual, but the symbolic type descriptor is derived from the actual argument and return types, not from the method declaration"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" mh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiles to")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 23: invokevirtual #8                  // Method java/lang/invoke/MethodHandle.invoke:(I)I")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiles to")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 24: invokevirtual #10                 // Method java/lang/invoke/MethodHandle.invoke:(D)Ljava/lang/Object;")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("at runtime\n"),a("ul",[a("li",[t._v("link if the first time — as usual "),a("code",[t._v("invokevirtual")]),t._v(", but the JVM will successfully link any such call, regardless of its symbolic type descriptor")]),t._v(" "),a("li",[t._v("invocation check — see below")]),t._v(" "),a("li",[t._v("invoke — optionally adjust types, then invoke the method handle's underlying method (or other behavior, as the case may be)")])])])])]),t._v(" "),a("li",[t._v("invocation check — "),a("code",[t._v("NoSuchMethodException")]),t._v(", "),a("code",[t._v("IllegalAccessException")]),t._v(" "),a("ul",[a("li",[t._v("symbolic type descriptor check — the caller's one is matched against the one assigned when the method handle is created after "),a("code",[t._v("invokevirtual")]),t._v(" is linked; "),a("code",[t._v("NoSuchMethodException")]),t._v(" upon failure")]),t._v(" "),a("li",[t._v("access check — performed when the method handle is created; if "),a("code",[t._v("ldc")]),t._v(", access checking is performed as part of linking; "),a("code",[t._v("IllegalAccessException")]),t._v(" upon failure")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("interface java.lang.constant.Constable")]),t._v(" — immediate constant support by JVM bytecode format for "),a("code",[t._v("MethodHandle")]),t._v(", "),a("code",[t._v("VarHandle")]),t._v(" and "),a("code",[t._v("MethodType")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CONSTANT_MethodHandle")]),t._v(" — refers directly to an associated "),a("code",[t._v("CONSTANT_Methodref")]),t._v(", "),a("code",[t._v("CONSTANT_InterfaceMethodref")]),t._v(", or "),a("code",[t._v("CONSTANT_Fieldref")]),t._v(" constant pool entry"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#29 = MethodHandle       6:#44          // REF_invokeStatic Solution.lambda$foo$0:(IILjava/lang/Integer;)Z\n#44 = Methodref          #7.#54         // Solution.lambda$foo$0:(IILjava/lang/Integer;)Z\n")])])])]),t._v(" "),a("li",[a("code",[t._v("CONSTANT_MethodType")]),t._v(" — type is "),a("code",[t._v("(Integer) -> boolean")]),t._v(" in the below example"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#30 = MethodType         #45            //  (Ljava/lang/Integer;)Z\n#45 = Utf8               (Ljava/lang/Integer;)Z\n")])])])]),t._v(" "),a("li",[a("code",[t._v("VarHandle")]),t._v(" — tbd")])])])]),t._v(" "),a("h4",{attrs:{id:"dynamically-computed-callsite-and-constant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamically-computed-callsite-and-constant"}},[t._v("#")]),t._v(" Dynamically-Computed CallSite and Constant")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("dynamically-computed call sites — "),a("code",[t._v("invokedynamic")]),t._v(" instruction")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("22: invokedynamic #4,  0              // InvokeDynamic #0:test:(II)Ljava/util/function/Predicate;\n#4 = InvokeDynamic      #0:#31         // #0:test:(II)Ljava/util/function/Predicate;\n#31 = NameAndType        #46:#47        // test:(II)Ljava/util/function/Predicate;\n")])])]),a("ul",[a("li",[a("code",[t._v("#4 = InvokeDynamic")])]),t._v(" "),a("li",[a("code",[t._v("#0")]),t._v(": bootstrap method — each "),a("code",[t._v("invokedynamic")]),t._v(" instruction statically specifies its own bootstrap method as a constant pool reference")]),t._v(" "),a("li",[a("code",[t._v("#31 = NameAndType")]),t._v(" — like "),a("code",[t._v("invokestatic")]),t._v(" and other invoke instructions, specifies the invocation's name and method type descriptor")]),t._v(" "),a("li",[t._v("linkage\n"),a("ul",[a("li",[t._v("initial unlinked state — no target method for the instruction to invoke; it is linked just before first execution")]),t._v(" "),a("li",[t._v("link "),a("code",[t._v("invokedynamic")]),t._v(" to a "),a("code",[t._v("CallSite")]),t._v(" — by calling a bootstrap method which is given the static information content of the call, and which must produce a "),a("code",[t._v("CallSite")])])])])])]),t._v(" "),a("li",[a("p",[t._v("dynamically-computed constants — "),a("code",[t._v("CONSTANT_Dynamic")]),t._v(" tagged constants in constant pool")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CONSTANT_Dynamic")]),t._v(" contents — like the "),a("code",[t._v("InvokeDynamic")]),t._v(" above\n"),a("ul",[a("li",[t._v("bootstrap method")]),t._v(" "),a("li",[a("code",[t._v("NameAndType")]),t._v(" — like "),a("code",[t._v("getstatic")]),t._v(" instruction and the other field reference instructions, specifies the constant's name and field type descriptor")])])]),t._v(" "),a("li",[t._v("linkage — similar to "),a("code",[t._v("invokedynamic")]),t._v(", resolve to a value of declared type")]),t._v(" "),a("li",[a("code",[t._v("InvokeDynamic")]),t._v(" and "),a("code",[t._v("CONSTANT_Dynamic")]),t._v(" — a "),a("code",[t._v("CONSTANT_Dynamic")]),t._v(" is to a "),a("code",[t._v("InvokeDynamic")]),t._v(" like a "),a("code",[t._v("CONSTANT_Fieldref")]),t._v(" is to a "),a("code",[t._v("CONSTANT_Methodref")])])])]),t._v(" "),a("li",[a("p",[t._v("bootstrap methods")]),t._v(" "),a("ul",[a("li",[t._v("bootstrap method execution — link "),a("code",[t._v("invokedynamic")]),t._v(" or resolve "),a("code",[t._v("CONSTANT_Dynamic")]),t._v(" "),a("ol",[a("li",[t._v("resolve the bootstrap method related constants in constant pool\n"),a("ul",[a("li",[t._v("the bootstrap method, a "),a("code",[t._v("CONSTANT_MethodHandle")])]),t._v(" "),a("li",[t._v("the "),a("code",[t._v("Class")]),t._v(" or "),a("code",[t._v("MethodType")]),t._v(" derived from type component of the "),a("code",[t._v("CONSTANT_NameAndType")]),t._v(" descriptor")]),t._v(" "),a("li",[t._v("static arguments, if any (note that static arguments can themselves be dynamically-computed constants)")])])]),t._v(" "),a("li",[t._v("invoke the bootstrap method with following args, as if by "),a("code",[t._v("MethodHandle::invoke")])])])]),t._v(" "),a("li",[t._v("bootstrap method args — see "),a("a",{attrs:{href:"#lambda-at-runtime"}},[t._v("Lambda at Runtime")]),t._v(" for example\n"),a("ul",[a("li",[a("code",[t._v("MethodHandles.Lookup")]),t._v(" - a lookup object on the caller class in which dynamically-computed constant or call site occurs")]),t._v(" "),a("li",[a("code",[t._v("CONSTANT_NameAndType")]),t._v(" — a "),a("code",[t._v("String")]),t._v(" the name, and a "),a("code",[t._v("MethodType")]),t._v(" or "),a("code",[t._v("Class")]),t._v(", the resolved type descriptor")]),t._v(" "),a("li",[a("code",[t._v("Class")]),t._v(", if it is a dynamic constant — the resolved type descriptor of the constant")]),t._v(" "),a("li",[t._v("the additional resolved static arguments, if any\n"),a("ul",[a("li",[t._v("no type limitation — dynamically-computed constants can be provided as static arguments to bootstrap methods")])])]),t._v(" "),a("li",[t._v("return — "),a("code",[t._v("CallSite")]),t._v(" or the "),a("code",[t._v("Class")]),t._v(" mentioned above")])])]),t._v(" "),a("li",[t._v("thread safety — must take the usual precautions against race conditions; if several threads simultaneously execute a bootstrap method for a single dynamically-computed call site or constant, the JVM must choose one bootstrap method result and install it visibly to all threads")])])])]),t._v(" "),a("h4",{attrs:{id:"method-handle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method-handle"}},[t._v("#")]),t._v(" Method Handle")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("java.lang.invoke.MethodHandle")]),t._v(" — a typed, immutable, directly executable reference to an underlying method, constructor, field, or similar low-level operation, with optional transformations of arguments or return values")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constable")]),t._v("\n")])])]),a("ul",[a("li",[t._v("functional equivalent of a particular bytecode behavior — see lookup methods in "),a("code",[t._v("MethodHandles.Lookup")])]),t._v(" "),a("li",[t._v("type\n"),a("ul",[a("li",[a("code",[t._v("MethodType type()")]),t._v(" — method handles are dynamically and strongly typed according to their parameter and return types")]),t._v(" "),a("li",[t._v("type conversion\n"),a("ul",[a("li",[a("code",[t._v("MethodHandle asType​(MethodType newType)")]),t._v(" — produces an adapter method handle")]),t._v(" "),a("li",[a("code",[t._v("MethodHandle bindTo​(Object x)")]),t._v(" — curry")]),t._v(" "),a("li",[t._v("other "),a("code",[t._v("as-")]),t._v(" methods and more")])])])])]),t._v(" "),a("li",[t._v("invoke\n"),a("ul",[a("li",[a("code",[t._v("Object invoke​(Object... args) throws Throwable")]),t._v(" — "),a("code",[t._v("invokeExact")]),t._v(" if "),a("code",[t._v("type")]),t._v(" match, otherwise may "),a("code",[t._v("asType")]),t._v(" or may perform adaptations directly on the caller's arguments")]),t._v(" "),a("li",[a("code",[t._v("Object invokeExact​(Object... args) throws Throwable")]),t._v(" — requiring an exact "),a("code",[t._v("type")]),t._v(" match")]),t._v(" "),a("li",[t._v("more")]),t._v(" "),a("li",[t._v("reflection of above methods — "),a("code",[t._v("UnsupportedOperationException")]),t._v(" if invoked via "),a("code",[t._v("Method::invoke")]),t._v(", via JNI, or indirectly via "),a("code",[t._v("Lookup.unreflect")])]),t._v(" "),a("li",[t._v("signature polymorphic — see before")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.lang.invoke.MethodHandles")]),t._v(" — utility class")]),t._v(" "),a("ul",[a("li",[t._v("lookup methods\n"),a("ul",[a("li",[a("code",[t._v("MethodHandles.Lookup lookup()")])]),t._v(" "),a("li",[a("code",[t._v("MethodHandles.Lookup publicLookup()")])])])]),t._v(" "),a("li",[t._v("method handle combine and transform methods")]),t._v(" "),a("li",[t._v("other method handle factory methods\n"),a("ul",[a("li",[a("code",[t._v("MethodHandle identity​(Class<?> type)")])])])]),t._v(" "),a("li",[a("code",[t._v("java.lang.invoke.MethodHandles.Lookup")]),t._v(" — access restrictions enforced against look up class, which is the class where this "),a("code",[t._v("Lookup")]),t._v(" is created\n"),a("ul",[a("li",[a("code",[t._v("Class<?> lookupClass()")])]),t._v(" "),a("li",[t._v("lookup factory methods — see javadoc, correspond to all major use cases for methods, constructors, and fields")]),t._v(" "),a("li",[a("code",[t._v("unreflect")]),t._v(" — reflection to method handle")]),t._v(" "),a("li",[t._v("lookup factory methods to bytecode behavior — see javadoc")]),t._v(" "),a("li",[t._v("cross module — tbd")])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("java.lang.invoke.CallSite")]),t._v(" — hold a variable "),a("code",[t._v("target")]),t._v(" of type "),a("code",[t._v("MethodHandle")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("invokedynamic")]),t._v(" "),a("ul",[a("li",[t._v("call delegation — an invokedynamic instruction linked to a "),a("code",[t._v("CallSite")]),t._v(" delegates all calls to the site's current target")]),t._v(" "),a("li",[t._v("one to none or many — a "),a("code",[t._v("CallSite")]),t._v(" may be associated with several "),a("code",[t._v("invokedynamic")]),t._v(" instructions or none")])])]),t._v(" "),a("li",[a("code",[t._v("MethodHandle dynamicInvoker()")]),t._v(" — produces a method handle equivalent to an "),a("code",[t._v("invokedynamic")]),t._v(" instruction which has been linked to this call site (equivalent to "),a("code",[t._v("getTarget")]),t._v(" and then "),a("code",[t._v("invokeExact")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("void setTarget​(MethodHandle newTarget)")]),t._v(" — the type of the new target must be equal to the type of the old target\n"),a("ul",[a("li",[a("code",[t._v("java.lang.invoke.ConstantCallSite")]),t._v(" — "),a("code",[t._v("UnsupportedOperationException")]),t._v(" for "),a("code",[t._v("setTarget")])]),t._v(" "),a("li",[a("code",[t._v("java.lang.invoke.MutableCallSite")])]),t._v(" "),a("li",[a("code",[t._v("java.lang.invoke.VolatileCallSite")]),t._v(" — "),a("code",[t._v("MutableCallSite")]),t._v(" but the "),a("code",[t._v("target")]),t._v(" is "),a("code",[t._v("volatile")])])])])])])]),t._v(" "),a("h4",{attrs:{id:"varhandle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#varhandle"}},[t._v("#")]),t._v(" VarHandle")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("java.lang.invoke.VarHandle")]),t._v(" — a dynamically strongly typed reference to a variable, or to a parametrically-defined family of variables, including static fields, non-static fields, array elements, or components of an off-heap data structure")]),t._v(" "),a("ul",[a("li",[t._v("properties\n"),a("ul",[a("li",[t._v("immutable and stateless")]),t._v(" "),a("li",[t._v("similar to "),a("code",[t._v("MethodHandle")]),t._v(" — dynamic argument check and signature polymorphic, access check at creation")])])]),t._v(" "),a("li",[a("code",[t._v("Class<?> varType()")]),t._v(" — the type of every variable referenced\n"),a("ul",[a("li",[a("code",[t._v("float")]),t._v(" and "),a("code",[t._v("double")]),t._v(" — compared bitwise, which differs from "),a("code",[t._v("==")]),t._v(" and "),a("code",[t._v("equals")])])])]),t._v(" "),a("li",[a("code",[t._v("List<Class<?>> coordinateTypes()")]),t._v(" — the types of coordinate expressions that jointly locate a variable referenced by this "),a("code",[t._v("VarHandle")])]),t._v(" "),a("li",[t._v("static memory fence methods — "),a("code",[t._v("fullFence()")]),t._v(", "),a("code",[t._v("acquireFence()")]),t._v(", "),a("code",[t._v("releaseFence()")]),t._v(", "),a("code",[t._v("loadLoadFence()")]),t._v(" and "),a("code",[t._v("storeStoreFence()")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("VarHandle")]),t._v(" access methods")]),t._v(" "),a("ul",[a("li",[t._v("access mode method properties\n"),a("ul",[a("li",[a("code",[t._v("enum VarHandle.AccessMode")]),t._v(" — each member corresponds to an access method in "),a("code",[t._v("VarHandle")])]),t._v(" "),a("li",[t._v("signature polymorphic — see before")]),t._v(" "),a("li",[t._v("actual arguments — the coordinate types of a "),a("code",[t._v("VarHandle")]),t._v(" instance, and the types for values of importance to the access mode, see example")]),t._v(" "),a("li",[t._v("dynamic argument check — "),a("code",[t._v("MethodType accessModeType​(VarHandle.AccessMode accessMode)")])]),t._v(" "),a("li",[t._v("invocation behaves as if "),a("code",[t._v("MethodHandle::invoke")]),t._v(", see javadoc for examples")])])]),t._v(" "),a("li",[t._v("access mode methods\n"),a("ul",[a("li",[t._v("atomicity and consistency properties, override declarations\n"),a("ul",[a("li",[t._v("plain — bitwise atomic only for references and for primitive values of at most 32 bits")]),t._v(" "),a("li",[t._v("opaque — bitwise atomic and coherently ordered with respect to accesses to the same variable")]),t._v(" "),a("li",[t._v("acquire, release — opaque, and acquire mode reads and their subsequent accesses are ordered after matching release mode writes and their previous accesses")]),t._v(" "),a("li",[t._v("volatile — acquire, release, and ordered with respect to each other")])])]),t._v(" "),a("li",[t._v("taxonomy\n"),a("ul",[a("li",[t._v("read — "),a("code",[t._v("get")]),t._v(", "),a("code",[t._v("getVolatile")]),t._v(", "),a("code",[t._v("getAcquire")]),t._v(", "),a("code",[t._v("getOpaque")])]),t._v(" "),a("li",[t._v("write — "),a("code",[t._v("set")]),t._v(", "),a("code",[t._v("setVolatile")]),t._v(", "),a("code",[t._v("setRelease")]),t._v(", "),a("code",[t._v("setOpaque")])]),t._v(" "),a("li",[t._v("atomic update — "),a("code",[t._v("compareAndSet")]),t._v(", "),a("code",[t._v("weakCompareAndSetPlain")]),t._v(", "),a("code",[t._v("weakCompareAndSet")]),t._v(", "),a("code",[t._v("weakCompareAndSetAcquire")]),t._v(", "),a("code",[t._v("weakCompareAndSetRelease")]),t._v(", "),a("code",[t._v("compareAndExchangeAcquire")]),t._v(", "),a("code",[t._v("compareAndExchange")]),t._v(", "),a("code",[t._v("compareAndExchangeRelease")]),t._v(", "),a("code",[t._v("getAndSet")]),t._v(", "),a("code",[t._v("getAndSetAcquire")]),t._v(", "),a("code",[t._v("getAndSetRelease")])]),t._v(" "),a("li",[t._v("numeric atomic update — "),a("code",[t._v("getAndAdd")]),t._v(", "),a("code",[t._v("getAndAddAcquire")]),t._v(", "),a("code",[t._v("getAndAddRelease")])]),t._v(" "),a("li",[t._v("bitwise atomic update — "),a("code",[t._v("getAndBitwiseOr")]),t._v(", "),a("code",[t._v("getAndBitwiseOrAcquire")]),t._v(", "),a("code",[t._v("getAndBitwiseOrRelease")]),t._v(", "),a("code",[t._v("getAndBitwiseAnd")]),t._v(", "),a("code",[t._v("getAndBitwiseAndAcquire")]),t._v(", "),a("code",[t._v("getAndBitwiseAndRelease")]),t._v(", "),a("code",[t._v("getAndBitwiseXor")]),t._v(", "),a("code",[t._v("getAndBitwiseXorAcquire")]),t._v(", "),a("code",[t._v("getAndBitwiseXorRelease")])])])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("VarHandle")]),t._v(" creation and conversion")]),t._v(" "),a("ul",[a("li",[t._v("creation — access modes supported according to javadoc\n"),a("ul",[a("li",[t._v("in "),a("code",[t._v("MethodHandles.Lookup")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("findVarHandle​(Class<?> recv, String name, Class<?> type)")]),t._v(" — returns a "),a("code",[t._v("VarHandle")]),t._v(" of a non-static "),a("code",[t._v("recv.name")]),t._v(" of "),a("code",[t._v("type")]),t._v("; one coordinate type, "),a("code",[t._v("recv")])]),t._v(" "),a("li",[a("code",[t._v("findStaticVarHandle​(Class<?> decl, String name, Class<?> type)")]),t._v(" — returns a "),a("code",[t._v("VarHandle")]),t._v(" of a static "),a("code",[t._v("recv.name")]),t._v(" of "),a("code",[t._v("type")]),t._v("; no coordinate types")]),t._v(" "),a("li",[a("code",[t._v("unreflectVarHandle​(Field f)")])])])]),t._v(" "),a("li",[t._v("in "),a("code",[t._v("MethodHandles")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("arrayElementVarHandle​(Class<?> arrayClass)")]),t._v(" — the list of coordinate types is "),a("code",[t._v("(arrayClass, int)")])]),t._v(" "),a("li",[a("code",[t._v("byteArrayViewVarHandle​")]),t._v(", "),a("code",[t._v("byteBufferViewVarHandle")])])])])])]),t._v(" "),a("li",[t._v("to "),a("code",[t._v("MethodHandle")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("MethodHandle toMethodHandle​(VarHandle.AccessMode accessMode)")])]),t._v(" "),a("li",[a("code",[t._v("MethodHandles::varHandleInvoker")])]),t._v(" "),a("li",[a("code",[t._v("MethodHandles::varHandleExactInvoker")])]),t._v(" "),a("li",[a("code",[t._v("MethodHandles.lookup().findVirtual(VarHandle.class, ...)")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("VarHandle")]),t._v(" example")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VarHandle")]),t._v(" avh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayElementVarHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" avh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"expected"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"lambda-at-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda-at-runtime"}},[t._v("#")]),t._v(" Lambda at Runtime")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("lambda at runtime reference — from "),a("a",{attrs:{href:"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Translation of Lambda Expressions"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("desugar")]),t._v(" "),a("ul",[a("li",[t._v("desugar to method — when the compiler encounters a lambda expression, it first lowers (desugars) the lambda body into a method whose argument list and return type match that of the lambda expression, possibly with some additional arguments (for values captured from the lexical scope, if any)")]),t._v(" "),a("li",[t._v("desugar strategy — private, static over instance, in the innermost class in which the lambda expression appears, signatures should match the body signature of the lambda, extra arguments should be prepended on the front of the argument list for captured values, and would not desugar method references at all")]),t._v(" "),a("li",[t._v("instance-capturing lambda — instance-capturing lambdas are desugared to private instance method; when capturing an instance-capturing lambda, the receiver ("),a("code",[t._v("this")]),t._v(") is specified as the first dynamic argument, meshes well with available implementation techniques (bound method handles)")]),t._v(" "),a("li",[t._v("example: desugar of a method — see below")]),t._v(" "),a("li",[t._v("example: deadlock caused by desugar — during class loading, other fork join threads will call desugared static method, which requires the class loaded"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parallelStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsIgnoreCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a9"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("CallSite")]),t._v(" from "),a("code",[t._v("invokedynamic")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("invokedynamic")]),t._v(" call site, built by lambda factory — at the point at which the lambda expression would be captured, it generates an "),a("code",[t._v("invokedynamic")]),t._v(" call site, which implements lambda capture as the dynamic argument list and, when invoked, returns an instance of the functional interface to which the lambda is being converted\n"),a("ul",[a("li",[t._v("see "),a("a",{attrs:{href:"#handles"}},[t._v("Handles")]),t._v(" for "),a("code",[t._v("invokedynamic")])]),t._v(" "),a("li",[a("code",[t._v("java.lang.invoke.LambdaMetafactory::metafactory")]),t._v(", "),a("code",[t._v("LambdaMetafactory::altMetafactory")]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallSite")]),t._v(" metafactory​"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// automatically stacked by the VM at CallSite linkage")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Lookup")]),t._v(" caller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" invokedName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodType")]),t._v(" invokedType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodType")]),t._v(" samMethodType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// single abstract (functional interface) method")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandle")]),t._v(" implMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the implementation method, may have extra arguments and may subtype or box")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// enforced dynamically at invocation time; samMethodType, or may be a specialization of it")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodType")]),t._v(" instantiatedMethodType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("invokedType")]),t._v(" — expected signature of the "),a("code",[t._v("CallSite")]),t._v(", the parameter types represent the types of capture variables; the return type is the functional interface; see number of instantiations below for example")])])]),t._v(" "),a("li",[t._v("method references — treated the same way as lambda expressions, except that most method references do not need to be desugared into a new method; we can simply load a constant method handle for the referenced method and pass that to the metafactory")])])]),t._v(" "),a("li",[t._v("example: "),a("code",[t._v("invokedynamic")]),t._v(" in bytecode — see below")]),t._v(" "),a("li",[t._v("number of instantiations — only one instantiation ("),a("code",[t._v("MethodHandles::constant")]),t._v(") if no capture"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// called by bootstrap methods in LambdaMetafactory to build CallSite")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallSite")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildCallSite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LambdaConversionException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" innerClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spinInnerClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("invokedType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parameterCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("disableEagerInitialization"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In the case of a non-capturing lambda, we optimize linkage by pre-computing a single instance,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unless we've suppressed eager initialization")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" inst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantCallSite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("samBase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("disableEagerInitialization"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNSAFE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ensureClassInitialized")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this CallSite calls innerClass::get$Lambda with method type\n               invokedType every time to get an instance */")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantCallSite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Lookup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IMPL_LOOKUP")]),t._v("\n                         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findStatic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAME_FACTORY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" invokedType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number of instantiations test example")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntUnaryOperator")]),t._v(" oper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" opCounter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambdaTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntUnaryOperator")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("op "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" oper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("opCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    oper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyAsInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    opCounter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambdaTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    opCounter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lambdaTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("example: desugar of a lambda with capturing and its "),a("code",[t._v("invokedynamic")]),t._v(" call site")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bottom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("103")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// final int bottom = 0, top = 103; // no capture if final")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" bottom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bottom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("103")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* invokedynamic #4, 0 */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" lambda$foo$"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bottom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" bottom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("constant pool contents and correspondences to the bootstrap method"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#4 = InvokeDynamic  #0:#31    // #0:test:(II)Ljava/util/function/Predicate;\n  #31 = NameAndType #46:#47   // test:(II)Ljava/util/function/Predicate;\n    #46 = Utf8      test                               /* invokedName */\n    #47 = Utf8      (II)Ljava/util/function/Predicate; /* invokedType */\n\n  0: #27 /* method handle of bootstrap method */\n  #27 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:...\n    Method arguments:\n      #28 (Ljava/lang/Object;)Z                      /* samMethodType */\n      #29 REF_invokeStatic       B.lambda$foo$0:(IILjava/lang/Integer;)Z\n      #30 (Ljava/lang/Integer;)Z            /* instantiatedMethodType */\n")])])]),a("ul",[a("li",[a("code",[t._v("#47")]),t._v(" "),a("code",[t._v("(II)Ljava/util/function/Predicate;")]),t._v(" — "),a("code",[t._v("MethodType")]),t._v(" of "),a("code",[t._v("(int, int) -> Predicate")])]),t._v(" "),a("li",[a("code",[t._v("#29")]),t._v(" — argument "),a("code",[t._v("implMethod")]),t._v(" in "),a("code",[t._v("LambdaMetafactory::metafactory")]),t._v("; a "),a("code",[t._v("MethodHandle")]),t._v(" invoking "),a("code",[t._v("B::lambda$foo$0")]),t._v(" and of "),a("code",[t._v("MethodType")]),t._v(" of "),a("code",[t._v("(int, int, Integer) -> boolean")])])])])])]),t._v(" "),a("li",[a("p",[t._v("serialization — tbd")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);