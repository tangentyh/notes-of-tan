(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{227:function(e,i,l){"use strict";l.r(i);var v=l(0),t=Object(v.a)({},(function(){var e=this,i=e.$createElement,l=e._self._c||i;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"Operating-System"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Operating-System"}},[e._v("#")]),e._v(" Operating System")]),e._v(" "),l("h2",{attrs:{id:"Miscellanea"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Miscellanea"}},[e._v("#")]),e._v(" Miscellanea")]),e._v(" "),l("ol",[l("li",[l("a",{attrs:{href:"https://colin-scott.github.io/personal_website/research/interactive_latency.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Numbers Every Programmer Should Know By Year"),l("OutboundLink")],1),l("div",{staticClass:"language-shell extra-class"},[l("pre",{pre:!0,attrs:{class:"language-shell"}},[l("code",[l("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" cheat.sh/latencies\n")])])]),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("Latency Comparison Numbers (~2012)\n----------------------------------\nL1 cache reference                           0.5 ns\nBranch mispredict                            5   ns\nL2 cache reference                           7   ns                      14x L1 cache\nMutex lock/unlock                           25   ns\nMain memory reference                      100   ns                      20x L2 cache, 200x L1 cache\nCompress 1K bytes with Zippy             3,000   ns        3 us\nSend 1K bytes over 1 Gbps network       10,000   ns       10 us\nRead 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD\nRead 1 MB sequentially from memory     250,000   ns      250 us\nRound trip within same datacenter      500,000   ns      500 us\nRead 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory\nDisk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip\nRead 1 MB sequentially from disk    20,000,000   ns   20,000 us   20 ms  80x memory, 20X SSD\nSend packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms\n")])])]),l("ul",[l("li",[l("a",{attrs:{href:"http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("original link to berkeley"),l("OutboundLink")],1)]),e._v(" "),l("li",[l("a",{attrs:{href:"https://gist.github.com/jboner/2841832",target:"_blank",rel:"noopener noreferrer"}},[e._v("widespread 2012 version"),l("OutboundLink")],1)])])])]),e._v(" "),l("h2",{attrs:{id:"Introduction"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("基本特征")]),e._v(" "),l("ul",[l("li",[e._v("并发\n"),l("ul",[l("li",[e._v("并发 — 宏观上在一段时间内能同时运行多个程序")]),e._v(" "),l("li",[e._v("并行 — 同一时刻能运行多个指令。多流水线、多核处理器或者分布式计算系统。")])])]),e._v(" "),l("li",[e._v("共享\n"),l("ul",[l("li",[e._v("互斥共享\n"),l("ul",[l("li",[e._v("互斥共享的资源称为临界资源")])])]),e._v(" "),l("li",[e._v("同时共享")])])]),e._v(" "),l("li",[e._v("虚拟 — 把一个物理实体转换为多个逻辑实体\n"),l("ul",[l("li",[e._v("时分复用技术")]),e._v(" "),l("li",[e._v("空分复用技术 — 虚拟内存")])])]),e._v(" "),l("li",[e._v("异步")])])]),e._v(" "),l("li",[l("p",[e._v("基本功能")]),e._v(" "),l("ul",[l("li",[e._v("进程管理 — 进程控制、进程同步、进程通信、死锁处理、处理机调度等。")]),e._v(" "),l("li",[e._v("内存管理 — 内存分配、地址映射、内存保护与共享、虚拟内存等。")]),e._v(" "),l("li",[e._v("文件管理 — 文件存储空间的管理、目录管理、文件读写管理和保护等。")]),e._v(" "),l("li",[e._v("设备管理 — 完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。主要包括缓冲管理、设备分配、设备处理、虛拟设备等。")])])]),e._v(" "),l("li",[l("p",[e._v("系统调用 — 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。")]),e._v(" "),l("ul",[l("li",[e._v("common calls\n"),l("ul",[l("li",[e._v("进程控制 — fork(); exit(); wait();")]),e._v(" "),l("li",[e._v("进程通信 — pipe(); shmget(); mmap();")]),e._v(" "),l("li",[e._v("文件操作 — open(); read(); write();")]),e._v(" "),l("li",[e._v("设备操作 — ioctl(); read(); write();")]),e._v(" "),l("li",[e._v("信息维护 — getpid(); alarm(); sleep();")]),e._v(" "),l("li",[e._v("安全 — chmod(); umask(); chown();")])])])])]),e._v(" "),l("li",[l("p",[e._v("monolithic and micro-kernel — 在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。")])]),e._v(" "),l("li",[l("p",[e._v("interrupt")]),e._v(" "),l("ul",[l("li",[e._v("外中断 — 由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。")]),e._v(" "),l("li",[e._v("异常 — 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。")]),e._v(" "),l("li",[e._v("陷入 — 在用户程序中使用系统调用。")])])])]),e._v(" "),l("h2",{attrs:{id:"Process"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Process"}},[e._v("#")]),e._v(" Process")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("process and thread")]),e._v(" "),l("ul",[l("li",[e._v("进程 — 进程是资源分配的基本单位。\n"),l("ul",[l("li",[e._v("进程控制块 (Process Control Block, PCB) — 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。")])])]),e._v(" "),l("li",[e._v("线程 — 线程是独立调度的基本单位。一个进程中可以有多个线程，它们共享进程资源。")])])]),e._v(" "),l("li",[l("p",[e._v("进程状态的切换")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("                scheduler dispatch\n       admitted       ------\x3e          exit\ncreated -----\x3e ready          running ------\x3e terminated\n                 |    <------    |\n         I/O or  |   interrupt   | I/O or\n          event  |               | event wait\n      completion \\--\x3e waiting <--/\n")])])]),l("ul",[l("li",[e._v("就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。")]),e._v(" "),l("li",[e._v("阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。")])])]),e._v(" "),l("li",[l("p",[e._v("进程调度算法")]),e._v(" "),l("ul",[l("li",[e._v("批处理系统 — 调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）\n"),l("ul",[l("li",[e._v("先来先服务 first-come first-serverd（FCFS） — 短作业必须一直等待前面的长作业执行完毕才能执行")]),e._v(" "),l("li",[e._v("短作业优先 shortest job first（SJF） — 长作业有可能会饿死")]),e._v(" "),l("li",[e._v("最短剩余时间优先 shortest remaining time next（SRTN） — 短作业优先的抢占式版本")])])]),e._v(" "),l("li",[e._v("交互式系统 — 调度算法的目标是快速地进行响应\n"),l("ul",[l("li",[e._v("优先级调度 — 为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。")]),e._v(" "),l("li",[e._v("时间片轮转 — FCFS，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。\n"),l("ul",[l("li",[e._v("时间片太小 — 会导致进程切换得太频繁，在进程切换上就会花过多时间")]),e._v(" "),l("li",[e._v("时间片过长 — 实时性不能得到保证")])])]),e._v(" "),l("li",[e._v("多级反馈队列 — 多个队列，每个队列时间片大小都不同，例如 1,2,4,8,...。进程在第一个队列没执行完，就会被移到下一个队列。每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。解决长任务进程切换过多的问题。")])])])])]),e._v(" "),l("li",[l("p",[e._v("进程同步")]),e._v(" "),l("ul",[l("li",[e._v("临界区 — 对临界资源进行访问的那段代码称为临界区。")]),e._v(" "),l("li",[e._v("同步与互斥\n"),l("ul",[l("li",[e._v("同步 — 多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。")]),e._v(" "),l("li",[e._v("互斥 — 多个进程在同一时刻只有一个进程能进入临界区。")])])]),e._v(" "),l("li",[e._v("信号量（semaphore） — 整型变量，mutex when 1\n"),l("ul",[l("li",[e._v("down 和 up 操作，也就是常见的 P 和 V 操作。\n"),l("ul",[l("li",[e._v("down — 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；")]),e._v(" "),l("li",[e._v("up — 对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。")])])]),e._v(" "),l("li",[e._v("atomic — 执行这些操作的时候屏蔽中断")])])]),e._v(" "),l("li",[e._v("管程 — like object intrinsic lock in Java")])])]),e._v(" "),l("li",[l("p",[e._v("经典同步问题")]),e._v(" "),l("ul",[l("li",[e._v("生产者和消费者问题")]),e._v(" "),l("li",[e._v("哲学家进餐问题 — 五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。\n"),l("ul",[l("li",[e._v("死锁 — 如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其它哲学家吃完并释放自己手中的筷子")]),e._v(" "),l("li",[e._v("防止死锁 — "),l("a",{attrs:{href:"https://leetcode.com/problems/the-dining-philosophers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Dining Philosophers - LeetCode"),l("OutboundLink")],1)])])]),e._v(" "),l("li",[e._v("读者-写者问题")])])]),e._v(" "),l("li",[l("p",[e._v("进程通信")]),e._v(" "),l("ul",[l("li",[e._v("管道 — 通过 pipe 函数创建的，"),l("code",[e._v("fd[0]")]),e._v(" 用于读，"),l("code",[e._v("fd[1]")]),e._v(" 用于写。只支持半双工通信（单向交替传输）；只能在父子进程或者兄弟进程中使用。")]),e._v(" "),l("li",[e._v("FIFO, aka named pipe — 去除了管道只能在父子进程中使用的限制。常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。")]),e._v(" "),l("li",[e._v("消息队列\n"),l("ul",[l("li",[e._v("消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难；")]),e._v(" "),l("li",[e._v("避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；")]),e._v(" "),l("li",[e._v("读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。")])])]),e._v(" "),l("li",[e._v("semaphore")]),e._v(" "),l("li",[e._v("共享存储 — 允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种 IPC。需要使用信号量用来同步对共享存储的访问。多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外 XSI 共享内存不是使用文件，而是使用内存的匿名段。")]),e._v(" "),l("li",[e._v("socket")])])])]),e._v(" "),l("h2",{attrs:{id:"Disk"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Disk"}},[e._v("#")]),e._v(" Disk")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("磁盘结构")]),e._v(" "),l("ul",[l("li",[e._v("盘面（Platter）：一个磁盘有多个盘面；")]),e._v(" "),l("li",[e._v("磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道；")]),e._v(" "),l("li",[e._v("扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4 K 两种大小；")]),e._v(" "),l("li",[e._v("磁头（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）；")]),e._v(" "),l("li",[e._v("制动手臂（Actuator arm）：用于在磁道之间移动磁头；")]),e._v(" "),l("li",[e._v("主轴（Spindle）：使整个盘面转动。")])])]),e._v(" "),l("li",[l("p",[e._v("磁盘调度算法")]),e._v(" "),l("ul",[l("li",[e._v("读写一个磁盘块的时间的影响因素有\n"),l("ul",[l("li",[e._v("旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）")]),e._v(" "),l("li",[e._v("寻道时间（制动手臂移动，使得磁头移动到适当的磁道上） — 其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。")]),e._v(" "),l("li",[e._v("实际的数据传输时间")])])]),e._v(" "),l("li",[e._v("FCFS — 按照磁盘请求的顺序进行调度")]),e._v(" "),l("li",[e._v("SSTF, Shortest Seek Time First — 优先调度与当前磁头所在磁道距离最近的磁道, 两端的磁道请求容易出现饥饿现象")]),e._v(" "),l("li",[e._v("SCAN, 电梯算法 — 电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。")])])]),e._v(" "),l("li",[l("p",[e._v("SSD")]),e._v(" "),l("ul",[l("li",[e._v("hierarchy\n"),l("ul",[l("li",[e._v("memory cells -> strings (typically 32 to 64 cells per string) -> arrays")]),e._v(" "),l("li",[e._v("pages, range from 2 to 16 Kb, read / write unit; pages in an empty block have to be written sequentially")]),e._v(" "),l("li",[e._v("blocks, typically contain 64 to 512 pages, smallest erase entity")]),e._v(" "),l("li",[e._v("planes")]),e._v(" "),l("li",[e._v("dies")])])]),e._v(" "),l("li",[e._v("Flash Translation Layer (FTL) — mapping page IDs to their physical locations, tracking empty, written, and discarded pages, also responsible for garbage collection")]),e._v(" "),l("li",[e._v("write amplification — data cannot be directly overwritten as in HDD: NAND flash memory writes data in pages but erases data in blocks, have to do GC to erase before write\n"),l("ul",[l("li",[l("code",[e._v("TRIM")]),e._v(", a SATA command — tell an SSD which blocks of previously saved data are no longer needed as a result of file deletions or volume formatting, thus ignoring those during GC")]),e._v(" "),l("li",[e._v("OP (Over Provisioning) — reserved space, 7% ~ 30%, can alleviate write amplification")])])])])]),e._v(" "),l("li",[l("p",[e._v("block device abstraction — most operating systems have a block device abstraction, which hides an internal disk structure and buffers I/O operations internally; the smallest unit of disk operation")]),e._v(" "),l("ul",[l("li",[e._v("strategy — writing only full blocks, and combining subsequent writes to the same block")])])]),e._v(" "),l("li",[l("p",[e._v("redundant arrays of independent disks, RAID")]),e._v(" "),l("ul",[l("li",[e._v("RAID 0 — horizontal scaling of disks, no redundancy but high performance, can be used for logs")]),e._v(" "),l("li",[e._v("RAID 1 — an exact copy (or mirror) of a set of data on two or more disks; any read request can be serviced and handled by any drive in the array, overall write performance is equal to the speed of the slowest disk")]),e._v(" "),l("li",[e._v("RAID 10 and RAID 01 — multiple RAID 1 forming RAID 0, or multiple RAID 0 forming RAID 1")]),e._v(" "),l("li",[e._v("RAID 5 — parity check based, parity information is distributed among the drives, requires that all drives but one be present to operate. Upon failure of a single drive, subsequent reads can be calculated from the distributed parity such that no data is lost")]),e._v(" "),l("li",[e._v("more")])])]),e._v(" "),l("li",[l("p",[e._v("file systems")]),e._v(" "),l("ul",[l("li",[e._v("HDFS, GFS — tbd")])])])]),e._v(" "),l("h2",{attrs:{id:"Compiling"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Compiling"}},[e._v("#")]),e._v(" Compiling")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("目标文件")]),e._v(" "),l("ul",[l("li",[e._v("可执行目标文件：可以直接在内存中执行；")]),e._v(" "),l("li",[e._v("可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件；")]),e._v(" "),l("li",[e._v("共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接；")])])]),e._v(" "),l("li",[l("p",[e._v("编译过程")]),e._v(" "),l("ul",[l("li",[e._v("预处理阶段：处理以 # 开头的预处理命令；")]),e._v(" "),l("li",[e._v("编译阶段：翻译成汇编文件（文本）；")]),e._v(" "),l("li",[e._v("汇编阶段：将汇编文件翻译成可重定位目标文件；")]),e._v(" "),l("li",[e._v("链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。\n"),l("ul",[l("li",[e._v("静态链接 — 以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出\n"),l("ul",[l("li",[e._v("过程\n"),l("ul",[l("li",[e._v("符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。")]),e._v(" "),l("li",[e._v("重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。")])])]),e._v(" "),l("li",[e._v("问题\n"),l("ul",[l("li",[e._v("当静态库更新时那么整个程序都要重新进行链接；")]),e._v(" "),l("li",[e._v("对于 "),l("code",[e._v("printf")]),e._v(" 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。")])])])])]),e._v(" "),l("li",[e._v("动态链接\n"),l("ul",[l("li",[e._v("在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；")]),e._v(" "),l("li",[e._v("在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。")])])])])])])])]),e._v(" "),l("h2",{attrs:{id:"Memory"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Memory"}},[e._v("#")]),e._v(" Memory")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("虚拟内存")]),e._v(" "),l("ul",[l("li",[e._v("内存 -> 地址空间 -> 页")]),e._v(" "),l("li",[e._v("虚拟内存 — 页被映射到物理内存")])])]),e._v(" "),l("li",[l("p",[e._v("分页系统地址映射 - 内存管理单元（MMU）-- 管理着地址空间和物理内存的转换")]),e._v(" "),l("ul",[l("li",[e._v("页表（Page table） — 存储着页（程序地址空间）和页框（物理内存空间）的映射表。")]),e._v(" "),l("li",[e._v("虚拟地址分 — 成两个部分，一部分存储页面号，一部分存储偏移量")])])]),e._v(" "),l("li",[l("p",[e._v("页面置换算法 — 在程序运行过程中，如果要访问的页面不在内存中(page fault)，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。")]),e._v(" "),l("ul",[l("li",[e._v("OPT, Optimal replacement algorithm — 所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。")]),e._v(" "),l("li",[e._v("LRU, Least Recently Used\n"),l("ul",[l("li",[e._v("2Q (Two-Queue LRU) — maintains two queues to distinguish between the recently and frequently accessed pages")])])]),e._v(" "),l("li",[e._v("NRU, Not Recently Used — flag R for read, flag M for modified, R resets periodically; choose page in order 00, 01, 10, 11 according to flag R and M")]),e._v(" "),l("li",[e._v("FIFO, First In First Out\n"),l("ul",[l("li",[e._v("plain FIFO")]),e._v(" "),l("li",[e._v("second chance — FIFO but if last visited flag is set, the head is enqueued again with flag cleared, and continue the process with the new head")]),e._v(" "),l("li",[e._v("Clock — 使用环形链表将页面连接起来，再使用一个指针指向最老的页面。避免 second chance 中的链表移动")])])]),e._v(" "),l("li",[e._v("LFU")])])]),e._v(" "),l("li",[l("p",[e._v("segment")]),e._v(" "),l("ul",[l("li",[e._v("覆盖问题 — 编译器在编译过程中建立的多个表，有 4 个表是动态增长的(call stack, constant table, source text, symbol table)，如果使用分页系统的一维地址空间，动态增长的特点会导致覆盖问题")]),e._v(" "),l("li",[e._v("分段 — 把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。")]),e._v(" "),l("li",[e._v("段页式 — 程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。")])])])]),e._v(" "),l("h2",{attrs:{id:"Dead-Lock"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#Dead-Lock"}},[e._v("#")]),e._v(" Dead Lock")]),e._v(" "),l("ol",[l("li",[l("p",[e._v("necessary condition")]),e._v(" "),l("ul",[l("li",[e._v("互斥：每个资源要么已经分配给了一个进程，要么就是可用的。")]),e._v(" "),l("li",[e._v("占有和等待：已经得到了某个资源的进程可以再请求新的资源。")]),e._v(" "),l("li",[e._v("不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。")]),e._v(" "),l("li",[e._v("环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。")])])]),e._v(" "),l("li",[l("p",[e._v("鸵鸟策略 — 因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。")])]),e._v(" "),l("li",[l("p",[e._v("死锁检测与死锁恢复")]),e._v(" "),l("ul",[l("li",[e._v("每种类型一个资源的死锁检测 — 检测有向图是否存在环，可以 DFS + visited")]),e._v(" "),l("li",[e._v("每种类型多个资源的死锁检测 — current allocation matrix C, request matrix P, resource vector, remaining resource vector A\n"),l("ol",[l("li",[e._v("寻找一个没有标记的进程 P~i~，它所请求的资源小于等于 A。")]),e._v(" "),l("li",[e._v("如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。")]),e._v(" "),l("li",[e._v("如果没有这样一个进程，算法终止。")]),e._v(" "),l("li",[e._v("任何没有被标记的进程都是死锁进程")])])]),e._v(" "),l("li",[e._v("死锁恢复\n"),l("ul",[l("li",[e._v("利用抢占恢复")]),e._v(" "),l("li",[e._v("利用回滚恢复")]),e._v(" "),l("li",[e._v("通过杀死进程恢复")])])])])]),e._v(" "),l("li",[l("p",[e._v("死锁预防")]),e._v(" "),l("ul",[l("li",[e._v("破坏互斥条件 — 例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。")]),e._v(" "),l("li",[e._v("破坏占有和等待条件 — 一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。")]),e._v(" "),l("li",[e._v("破坏不可抢占条件")]),e._v(" "),l("li",[e._v("破坏环路等待 — 给资源统一编号，进程只能按编号顺序来请求资源。")])])]),e._v(" "),l("li",[l("p",[e._v("死锁避免")]),e._v(" "),l("ul",[l("li",[e._v("安全状态 — 如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。与死锁的检测类似")]),e._v(" "),l("li",[e._v("单个资源的银行家算法 — 断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。")]),e._v(" "),l("li",[e._v("多个资源的银行家算法\n"),l("ul",[l("li",[e._v("查找待分配的资源的矩阵是否存在一行（一个进程待分配待资源）小于等于可用资源向量。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。")]),e._v(" "),l("li",[e._v("假若找到这样一行，将该进程标记为终止，已分配资源释放")]),e._v(" "),l("li",[e._v("重复以上两步，直到所有进程都标记为终止，则状态时安全的。")]),e._v(" "),l("li",[e._v("如果一个状态不是安全的，需要拒绝进入这个状态。")])])])])])])])}),[],!1,null,null,null);i.default=t.exports}}]);